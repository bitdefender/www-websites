{"version":3,"file":"quote.js","sources":["../../../src/blocks/quote/quote.js"],"sourcesContent":["import { createTag } from '../../scripts/utils/utils.js';\nimport { decorateIcons } from '../../scripts/lib-franklin.js';\n\nfunction createQuote(item) {\n  const paragraphs = Array.from(item.querySelectorAll('p'));\n  const quote = paragraphs.find((paragraph) => {\n    const strongOrEm = paragraph.querySelector('strong, em');\n    return !strongOrEm && paragraph.textContent.trim() !== '';\n  });\n\n  const author = item.querySelector('p > strong');\n  const stars = item.querySelector('p > em');\n  if (!quote) {\n    return null;\n  }\n\n  // Get the text content of the paragraph\n  const paragraphText = stars.textContent;\n\n  // Initialize a variable to count the asterisks\n  let asteriskCount = 0;\n\n  // Loop through the text and count asterisks\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < paragraphText.length; i++) {\n    if (paragraphText[i] === '*') {\n      asteriskCount += 1;\n    }\n  }\n  const starsContainer = createTag('div', { class: 'quote-stars-container' });\n  // eslint-disable-next-line no-plusplus\n  for (let i = 0; i < asteriskCount; i++) {\n    const star = createTag('span', { class: 'star' });\n    starsContainer.append(star);\n  }\n\n  return createTag(\n    'div',\n    {\n      class: 'quote-container',\n\n    },\n    `<div class=\"quote-img\">\n        <span class=\"icon icon-dark-blue-quote\"/>\n    </div>\n    <div class=\"quote-content\">\n        <p class=\"stars\">${starsContainer?.innerHTML}</p>\n        <p class=\"description\">${quote?.innerHTML}</p>\n        <p class=\"author\">${author?.innerHTML}</p>\n    </div>`,\n  );\n}\nexport default async function decorate(block) {\n  const quoteWrap = createTag('div', { class: 'quote-wrap' });\n  [...block.children].forEach((item) => {\n    const quote = createQuote(item);\n    if (quote) {\n      quoteWrap.append(quote);\n    }\n  });\n  block.replaceChildren(quoteWrap);\n\n  decorateIcons(block);\n}\n"],"names":["createQuote","item","quote","paragraph","author","stars","paragraphText","asteriskCount","i","starsContainer","createTag","star","decorate","block","quoteWrap","decorateIcons"],"mappings":"uHAGA,SAASA,EAAYC,EAAM,CAEzB,MAAMC,EADa,MAAM,KAAKD,EAAK,iBAAiB,GAAG,CAAC,EAC/B,KAAME,GAEtB,CADYA,EAAU,cAAc,YAAY,GACjCA,EAAU,YAAY,KAAM,IAAK,EACxD,EAEKC,EAASH,EAAK,cAAc,YAAY,EACxCI,EAAQJ,EAAK,cAAc,QAAQ,EACzC,GAAI,CAACC,EACH,OAAO,KAIT,MAAMI,EAAgBD,EAAM,YAG5B,IAAIE,EAAgB,EAIpB,QAASC,EAAI,EAAGA,EAAIF,EAAc,OAAQE,IACpCF,EAAcE,CAAC,IAAM,MACvBD,GAAiB,GAGrB,MAAME,EAAiBC,EAAU,MAAO,CAAE,MAAO,uBAAuB,CAAE,EAE1E,QAASF,EAAI,EAAGA,EAAID,EAAeC,IAAK,CACtC,MAAMG,EAAOD,EAAU,OAAQ,CAAE,MAAO,MAAM,CAAE,EAChDD,EAAe,OAAOE,CAAI,CAC9B,CAEE,OAAOD,EACL,MACA,CACE,MAAO,iBAER,EACD;AAAA;AAAA;AAAA;AAAA,2BAIuBD,GAAgB,SAAS;AAAA,iCACnBP,GAAO,SAAS;AAAA,4BACrBE,GAAQ,SAAS;AAAA,WAE1C,CACH,CACe,eAAeQ,EAASC,EAAO,CAC5C,MAAMC,EAAYJ,EAAU,MAAO,CAAE,MAAO,YAAY,CAAE,EAC1D,CAAC,GAAGG,EAAM,QAAQ,EAAE,QAASZ,GAAS,CACpC,MAAMC,EAAQF,EAAYC,CAAI,EAC1BC,GACFY,EAAU,OAAOZ,CAAK,CAE5B,CAAG,EACDW,EAAM,gBAAgBC,CAAS,EAE/BC,EAAcF,CAAK,CACrB"}