{"version":3,"file":"password-generator.js","sources":["../../../src/blocks/password-generator/password-generator.js"],"sourcesContent":["import { decorateIcons } from '../../scripts/lib-franklin.js';\nimport passwordService from '../../scripts/utils/pass_service.js';\n\n/**\n * Finds a div element whose first paragraph contains the specified search text.\n * When found, removes that paragraph and returns the parent div.\n *\n * @param {HTMLElement} block - The container to search within\n * @param {string} searchText - The text to search for in the first paragraph\n * @returns {HTMLElement|null} - The div containing the specified text, or null if not found\n */\nfunction getDivBasedOnFirstParagraph(block, searchText) {\n  const allDivs = Array.from(block.querySelectorAll('div'));\n\n  const targetDiv = allDivs.find((div) => {\n    const firstParagraph = div.querySelector('p');\n    if (firstParagraph?.textContent.includes(searchText)) {\n      firstParagraph.remove();\n      return true;\n    }\n    return false;\n  });\n\n  return targetDiv || null;\n}\n\nfunction updatePasswordStrength(password, strengthElement) {\n  // Get the strength span elements\n  const strongSpan = strengthElement.querySelector('#password-result');\n  // Check if the password is strong enough using the password service\n  const thingIs = passwordService.ratePasswordFromPasswordInfo(password);\n  const rating = passwordService.fromRating(thingIs);\n  // Update the strength indicator\n  strongSpan.className = '';\n  switch (rating) {\n    case passwordService.SecurityReportConstants.passwordStrengthWeak:\n      strongSpan.textContent = passwordService.SecurityReportConstants.passwordStrengthWeak;\n      strongSpan.classList.add('weak');\n      break;\n    case passwordService.SecurityReportConstants.passwordStrengthPoor:\n      strongSpan.textContent = passwordService.SecurityReportConstants.passwordStrengthPoor;\n      strongSpan.classList.add('poor');\n      break;\n    case passwordService.SecurityReportConstants.passwordStrengthGood:\n      strongSpan.textContent = passwordService.SecurityReportConstants.passwordStrengthGood;\n      strongSpan.classList.add('good');\n      break;\n    default:\n      strongSpan.textContent = passwordService.SecurityReportConstants.passwordStrengthStrong;\n      strongSpan.classList.add('strong');\n  }\n}\n\nfunction createSharePopup(element) {\n  const sharePopup = document.createElement('div');\n  sharePopup.classList.add('share-popup');\n  element.insertAdjacentElement('beforeend', sharePopup);\n  return sharePopup;\n}\n\nfunction copyToClipboard(block, caller, popupText, password) {\n  const copyText = password;\n\n  // Copy the text inside the text field\n  navigator.clipboard.writeText(copyText);\n  const buttonsContainer = block.querySelector('.button-container');\n  if (buttonsContainer) {\n    const sharePopup = block.querySelector('.share-popup') || createSharePopup(caller);\n    sharePopup.textContent = `${popupText}`;\n    sharePopup.style = 'opacity: 1';\n    setTimeout(() => {\n      sharePopup.style = 'opacity:0;';\n    }, 2000);\n  }\n}\n\n// Function to adjust font size based on password length and screen width\nfunction adjustFontSize(input, password) {\n  if (password.length > 25 && window.innerWidth < 991) {\n    input.style.fontSize = 'calc(100% - 4px)';\n  } else {\n    input.style.fontSize = ''; // Reset to default\n  }\n}\n\nexport default function decorate(block) {\n  const { clipboardText, selectAtLeastOneCheckboxText } = block.closest('.section').dataset;\n\n  // const breadcrumb = createTag('div', { class: 'breadcrumb' });\n  // block.closest('.section').prepend(breadcrumb);\n\n  const privacyPolicyRow = getDivBasedOnFirstParagraph(block, '<privacy-policy>');\n  privacyPolicyRow.classList.add('privacy-policy');\n\n  const passwordGeneratorRow = getDivBasedOnFirstParagraph(block, '<password-generator>');\n  passwordGeneratorRow.classList.add('password-generator-grid');\n  const passwordGeneratorColumns = [...passwordGeneratorRow.children];\n  // eslint-disable-next-line no-unused-vars\n  const [columnText, button] = passwordGeneratorColumns;\n  const [passwordLengthText, checkboxList, passwordStrengthText] = [...columnText.children];\n  columnText.remove();\n  // Process the password strength text to extract the strong and weak values\n\n  // expected output is 'Password strength strong-weak-text Strong, Weak\n  // parse the paragraph into my desired outcome\n  const strengthMatch = passwordStrengthText.innerHTML.split('strong-weak-text');\n  const [weakText, poorText, goodText, strongText] = strengthMatch[1].split(',');\n  passwordService.updatePasswordStrengthTexts(weakText, poorText, goodText, strongText);\n\n  passwordStrengthText.innerHTML = `${strengthMatch[0]} <span id='password-result' class='strong'>${strongText}</span>`;\n  const formElement = document.createElement('form');\n  formElement.classList.add('password-generator--form');\n  formElement.innerHTML = `\n    <div class=\"password-generator--input-container\">\n      <input class=\"password-generator--input\" readonly>\n      <input type=\"submit\" class=\"password-generator--input-retry\">\n    </div>\n    <div class=\"password-generator--parameters\">\n        <div class=\"range-slider-container\">\n          <p>${passwordLengthText.innerText}</p>\n          <input name=\"range\" type=\"range\" min=\"4\" max=\"32\" value=\"16\" class=\"slider\" id=\"password-range\">\n          <label for=\"range\" id=\"range-label\"></label>\n        </div>\n        <div class=\"form-checkboxes\">\n          <div>\n            <input type=\"checkbox\" id=\"uppercase\" name=\"uppercase\" checked />  \n            <label for=\"uppercase\">${checkboxList.children[0].textContent}</label>\n          </div>\n          <div>\n            <input type=\"checkbox\" id=\"lowercase\" name=\"lowercase\" checked />  \n            <label for=\"lowercase\">${checkboxList.children[1].textContent}</label>\n          </div>\n          <div>\n            <input type=\"checkbox\" id=\"numbers\" name=\"numbers\" checked />  \n            <label for=\"numbers\">${checkboxList.children[2].textContent}</label>\n          </div>\n          <div>\n            <input type=\"checkbox\" id=\"special\" name=\"special\" checked />  \n            <label for=\"special\">${checkboxList.children[3].textContent}</label>\n          </div>\n        </div>\n        <p class=\"password-strength\">${passwordStrengthText.innerHTML}<p>\n    </div>\n  `;\n\n  passwordGeneratorRow.prepend(formElement);\n  decorateIcons(block);\n\n  const passwordInput = block.querySelector('.password-generator--input');\n  const generateButton = block.querySelector('.password-generator--input-retry');\n  const copyPassword = block.querySelector(\"[href='#copy-link'], [href='#copy-password']\");\n  copyPassword.id = 'copy-password';\n  const slider = block.querySelector('#password-range');\n  const rangeLabel = block.querySelector('#range-label');\n  const uppercaseCheckbox = block.querySelector('#uppercase');\n  const lowercaseCheckbox = block.querySelector('#lowercase');\n  const numbersCheckbox = block.querySelector('#numbers');\n  const specialCheckbox = block.querySelector('#special');\n  const strengthElement = block.querySelector('.password-strength');\n\n  // Display the default slider value\n  rangeLabel.innerHTML = slider.value;\n\n  // Update the current slider value (each time you drag the slider handle)\n  slider.oninput = function updateRangeLabel() {\n    rangeLabel.innerHTML = this.value;\n  };\n  let password = '';\n  function generatePassword() {\n    const settings = {\n      passwordLength: parseInt(slider.value, 10),\n      includeLettersUppercase: uppercaseCheckbox.checked,\n      includeLettersLowercase: lowercaseCheckbox.checked,\n      includeNumbers: numbersCheckbox.checked,\n      includeSpecialChars: specialCheckbox.checked,\n      passwordLettersUppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n      passwordLettersLowercase: 'abcdefghijklmnopqrstuvwxyz',\n      passwordNumbers: '0123456789',\n      passwordSpecialChars: '!@#$%^&*()_+-=[]{}|;:,.<>?',\n    };\n\n    // Ensure at least one character type is selected\n    if (!settings.includeLettersUppercase\n        && !settings.includeLettersLowercase\n        && !settings.includeNumbers\n        && !settings.includeSpecialChars) {\n      if (!block.querySelector('.danger-selection')) {\n        const notification = document.createElement('p');\n        notification.textContent = selectAtLeastOneCheckboxText;\n        notification.classList.add('danger-selection');\n        block.prepend(notification);\n        setTimeout(() => {\n          notification.remove();\n        }, 2000);\n      }\n      return;\n    }\n\n    // Generate the password\n    password = passwordService.generateWithSettings(settings);\n\n    // Display the password\n    passwordInput.value = password;\n\n    // Adjust font size based on password length\n    adjustFontSize(passwordInput, password);\n\n    // Update the password strength indicator\n    updatePasswordStrength(password, strengthElement);\n  }\n\n  generateButton.addEventListener('click', (e) => {\n    e.preventDefault();\n    generatePassword();\n  });\n\n  // Generate a password on page load\n  generatePassword();\n\n  copyPassword.addEventListener('click', (e) => {\n    e.preventDefault();\n    copyToClipboard(block, copyPassword, clipboardText, password);\n  });\n\n  // Update password when settings change\n  [slider, uppercaseCheckbox, lowercaseCheckbox, numbersCheckbox, specialCheckbox].forEach(\n    (element) => element.addEventListener('change', generatePassword),\n  );\n}\n"],"names":["getDivBasedOnFirstParagraph","block","searchText","div","firstParagraph","updatePasswordStrength","password","strengthElement","strongSpan","thingIs","passwordService","rating","createSharePopup","element","sharePopup","copyToClipboard","caller","popupText","copyText","adjustFontSize","input","decorate","clipboardText","selectAtLeastOneCheckboxText","passwordGeneratorRow","passwordGeneratorColumns","columnText","button","passwordLengthText","checkboxList","passwordStrengthText","strengthMatch","weakText","poorText","goodText","strongText","formElement","decorateIcons","passwordInput","generateButton","copyPassword","slider","rangeLabel","uppercaseCheckbox","lowercaseCheckbox","numbersCheckbox","specialCheckbox","generatePassword","settings","notification","e"],"mappings":"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"}