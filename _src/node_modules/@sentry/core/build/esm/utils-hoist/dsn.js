import{DEBUG_BUILD as h}from"../debug-build.js";import{consoleSandbox as I,logger as l}from"./logger.js";const $=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;function y(t){return t==="http"||t==="https"}function S(t,r=!1){const{host:n,path:o,pass:s,port:p,projectId:e,protocol:a,publicKey:c}=t;return`${a}://${c}${r&&s?`:${s}`:""}@${n}${p?`:${p}`:""}/${o&&`${o}/`}${e}`}function D(t){const r=$.exec(t);if(!r){I(()=>{console.error(`Invalid Sentry Dsn: ${t}`)});return}const[n,o,s="",p="",e="",a=""]=r.slice(1);let c="",i=a;const u=i.split("/");if(u.length>1&&(c=u.slice(0,-1).join("/"),i=u.pop()),i){const d=i.match(/^\d+/);d&&(i=d[0])}return f({host:p,pass:s,path:c,projectId:i,port:e,protocol:n,publicKey:o})}function f(t){return{protocol:t.protocol,publicKey:t.publicKey||"",pass:t.pass||"",host:t.host,port:t.port||"",path:t.path||"",projectId:t.projectId}}function g(t){if(!h)return!0;const{port:r,projectId:n,protocol:o}=t;return["protocol","publicKey","host","projectId"].find(e=>t[e]?!1:(l.error(`Invalid Sentry Dsn: ${e} missing`),!0))?!1:n.match(/^\d+$/)?y(o)?r&&isNaN(parseInt(r,10))?(l.error(`Invalid Sentry Dsn: Invalid port ${r}`),!1):!0:(l.error(`Invalid Sentry Dsn: Invalid protocol ${o}`),!1):(l.error(`Invalid Sentry Dsn: Invalid projectId ${n}`),!1)}function m(t){const r=typeof t=="string"?D(t):f(t);if(!(!r||!g(r)))return r}export{D as dsnFromString,S as dsnToString,m as makeDsn};
//# sourceMappingURL=dsn.js.map
