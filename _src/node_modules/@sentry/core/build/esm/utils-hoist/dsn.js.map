{"version":3,"file":"dsn.js","sources":["../../../../../../../node_modules/@sentry/core/build/esm/utils-hoist/dsn.js"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build.js';\nimport { consoleSandbox, logger } from './logger.js';\n\n/** Regular expression used to parse a Dsn. */\nconst DSN_REGEX = /^(?:(\\w+):)\\/\\/(?:(\\w+)(?::(\\w+)?)?@)([\\w.-]+)(?::(\\d+))?\\/(.+)/;\n\nfunction isValidProtocol(protocol) {\n  return protocol === 'http' || protocol === 'https';\n}\n\n/**\n * Renders the string representation of this Dsn.\n *\n * By default, this will render the public representation without the password\n * component. To get the deprecated private representation, set `withPassword`\n * to true.\n *\n * @param withPassword When set to true, the password will be included.\n */\nfunction dsnToString(dsn, withPassword = false) {\n  const { host, path, pass, port, projectId, protocol, publicKey } = dsn;\n  return (\n    `${protocol}://${publicKey}${withPassword && pass ? `:${pass}` : ''}` +\n    `@${host}${port ? `:${port}` : ''}/${path ? `${path}/` : path}${projectId}`\n  );\n}\n\n/**\n * Parses a Dsn from a given string.\n *\n * @param str A Dsn as string\n * @returns Dsn as DsnComponents or undefined if @param str is not a valid DSN string\n */\nfunction dsnFromString(str) {\n  const match = DSN_REGEX.exec(str);\n\n  if (!match) {\n    // This should be logged to the console\n    consoleSandbox(() => {\n      // eslint-disable-next-line no-console\n      console.error(`Invalid Sentry Dsn: ${str}`);\n    });\n    return undefined;\n  }\n\n  const [protocol, publicKey, pass = '', host = '', port = '', lastPath = ''] = match.slice(1);\n  let path = '';\n  let projectId = lastPath;\n\n  const split = projectId.split('/');\n  if (split.length > 1) {\n    path = split.slice(0, -1).join('/');\n    projectId = split.pop() ;\n  }\n\n  if (projectId) {\n    const projectMatch = projectId.match(/^\\d+/);\n    if (projectMatch) {\n      projectId = projectMatch[0];\n    }\n  }\n\n  return dsnFromComponents({ host, pass, path, projectId, port, protocol: protocol , publicKey });\n}\n\nfunction dsnFromComponents(components) {\n  return {\n    protocol: components.protocol,\n    publicKey: components.publicKey || '',\n    pass: components.pass || '',\n    host: components.host,\n    port: components.port || '',\n    path: components.path || '',\n    projectId: components.projectId,\n  };\n}\n\nfunction validateDsn(dsn) {\n  if (!DEBUG_BUILD) {\n    return true;\n  }\n\n  const { port, projectId, protocol } = dsn;\n\n  const requiredComponents = ['protocol', 'publicKey', 'host', 'projectId'];\n  const hasMissingRequiredComponent = requiredComponents.find(component => {\n    if (!dsn[component]) {\n      logger.error(`Invalid Sentry Dsn: ${component} missing`);\n      return true;\n    }\n    return false;\n  });\n\n  if (hasMissingRequiredComponent) {\n    return false;\n  }\n\n  if (!projectId.match(/^\\d+$/)) {\n    logger.error(`Invalid Sentry Dsn: Invalid projectId ${projectId}`);\n    return false;\n  }\n\n  if (!isValidProtocol(protocol)) {\n    logger.error(`Invalid Sentry Dsn: Invalid protocol ${protocol}`);\n    return false;\n  }\n\n  if (port && isNaN(parseInt(port, 10))) {\n    logger.error(`Invalid Sentry Dsn: Invalid port ${port}`);\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Creates a valid Sentry Dsn object, identifying a Sentry instance and project.\n * @returns a valid DsnComponents object or `undefined` if @param from is an invalid DSN source\n */\nfunction makeDsn(from) {\n  const components = typeof from === 'string' ? dsnFromString(from) : dsnFromComponents(from);\n  if (!components || !validateDsn(components)) {\n    return undefined;\n  }\n  return components;\n}\n\nexport { dsnFromString, dsnToString, makeDsn };\n//# sourceMappingURL=dsn.js.map\n"],"names":["DSN_REGEX","isValidProtocol","protocol","dsnToString","dsn","withPassword","host","path","pass","port","projectId","publicKey","dsnFromString","str","match","consoleSandbox","lastPath","split","projectMatch","dsnFromComponents","components","validateDsn","DEBUG_BUILD","component","logger","makeDsn","from"],"mappings":"yGAIA,MAAMA,EAAY,kEAElB,SAASC,EAAgBC,EAAU,CACjC,OAAOA,IAAa,QAAUA,IAAa,OAC7C,CAWA,SAASC,EAAYC,EAAKC,EAAe,GAAO,CAC9C,KAAM,CAAE,KAAAC,EAAM,KAAAC,EAAM,KAAAC,EAAM,KAAAC,EAAM,UAAAC,EAAW,SAAAR,EAAU,UAAAS,CAAS,EAAKP,EACnE,MACE,GAAGF,CAAQ,MAAMS,CAAS,GAAGN,GAAgBG,EAAO,IAAIA,CAAI,GAAK,EAAE,IAC/DF,CAAI,GAAGG,EAAO,IAAIA,CAAI,GAAK,EAAE,IAAIF,GAAO,GAAGA,CAAI,GAAU,GAAGG,CAAS,EAE7E,CAQA,SAASE,EAAcC,EAAK,CAC1B,MAAMC,EAAQd,EAAU,KAAKa,CAAG,EAEhC,GAAI,CAACC,EAAO,CAEVC,EAAe,IAAM,CAEnB,QAAQ,MAAM,uBAAuBF,CAAG,EAAE,CAChD,CAAK,EACD,MACJ,CAEE,KAAM,CAACX,EAAUS,EAAWH,EAAO,GAAIF,EAAO,GAAIG,EAAO,GAAIO,EAAW,EAAE,EAAIF,EAAM,MAAM,CAAC,EAC3F,IAAIP,EAAO,GACPG,EAAYM,EAEhB,MAAMC,EAAQP,EAAU,MAAM,GAAG,EAMjC,GALIO,EAAM,OAAS,IACjBV,EAAOU,EAAM,MAAM,EAAG,EAAE,EAAE,KAAK,GAAG,EAClCP,EAAYO,EAAM,IAAK,GAGrBP,EAAW,CACb,MAAMQ,EAAeR,EAAU,MAAM,MAAM,EACvCQ,IACFR,EAAYQ,EAAa,CAAC,EAEhC,CAEE,OAAOC,EAAkB,CAAE,KAAAb,EAAM,KAAAE,EAAM,KAAAD,EAAM,UAAAG,EAAW,KAAAD,EAAM,SAAUP,EAAW,UAAAS,EAAW,CAChG,CAEA,SAASQ,EAAkBC,EAAY,CACrC,MAAO,CACL,SAAUA,EAAW,SACrB,UAAWA,EAAW,WAAa,GACnC,KAAMA,EAAW,MAAQ,GACzB,KAAMA,EAAW,KACjB,KAAMA,EAAW,MAAQ,GACzB,KAAMA,EAAW,MAAQ,GACzB,UAAWA,EAAW,SACvB,CACH,CAEA,SAASC,EAAYjB,EAAK,CACxB,GAAI,CAACkB,EACH,MAAO,GAGT,KAAM,CAAE,KAAAb,EAAM,UAAAC,EAAW,SAAAR,CAAU,EAAGE,EAWtC,MAT2B,CAAC,WAAY,YAAa,OAAQ,WAAW,EACjB,KAAKmB,GACrDnB,EAAImB,CAAS,EAIX,IAHLC,EAAO,MAAM,uBAAuBD,CAAS,UAAU,EAChD,GAGV,EAGQ,GAGJb,EAAU,MAAM,OAAO,EAKvBT,EAAgBC,CAAQ,EAKzBO,GAAQ,MAAM,SAASA,EAAM,EAAE,CAAC,GAClCe,EAAO,MAAM,oCAAoCf,CAAI,EAAE,EAChD,IAGF,IATLe,EAAO,MAAM,wCAAwCtB,CAAQ,EAAE,EACxD,KANPsB,EAAO,MAAM,yCAAyCd,CAAS,EAAE,EAC1D,GAcX,CAMA,SAASe,EAAQC,EAAM,CACrB,MAAMN,EAAa,OAAOM,GAAS,SAAWd,EAAcc,CAAI,EAAIP,EAAkBO,CAAI,EAC1F,GAAI,GAACN,GAAc,CAACC,EAAYD,CAAU,GAG1C,OAAOA,CACT","x_google_ignoreList":[0]}