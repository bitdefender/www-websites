{"version":3,"file":"debug-ids.js","sources":["../../../../../../../node_modules/@sentry/core/build/esm/utils-hoist/debug-ids.js"],"sourcesContent":["import { GLOBAL_OBJ } from './worldwide.js';\n\nlet parsedStackResults;\nlet lastKeysCount;\nlet cachedFilenameDebugIds;\n\n/**\n * Returns a map of filenames to debug identifiers.\n */\nfunction getFilenameToDebugIdMap(stackParser) {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return {};\n  }\n\n  const debugIdKeys = Object.keys(debugIdMap);\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n    return cachedFilenameDebugIds;\n  }\n\n  lastKeysCount = debugIdKeys.length;\n\n  // Build a map of filename -> debug_id.\n  cachedFilenameDebugIds = debugIdKeys.reduce((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n\n    const result = parsedStackResults[stackKey];\n\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame?.filename;\n        const debugId = debugIdMap[stackKey];\n\n        if (filename && debugId) {\n          acc[filename] = debugId;\n          parsedStackResults[stackKey] = [filename, debugId];\n          break;\n        }\n      }\n    }\n\n    return acc;\n  }, {});\n\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nfunction getDebugImagesForResources(\n  stackParser,\n  resource_paths,\n) {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n\n  const images = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path] ,\n      });\n    }\n  }\n\n  return images;\n}\n\nexport { getDebugImagesForResources, getFilenameToDebugIdMap };\n//# sourceMappingURL=debug-ids.js.map\n"],"names":["parsedStackResults","lastKeysCount","cachedFilenameDebugIds","getFilenameToDebugIdMap","stackParser","debugIdMap","GLOBAL_OBJ","debugIdKeys","acc","stackKey","result","parsedStack","i","filename","debugId"],"mappings":"4CAEA,IAAIA,EACAC,EACAC,EAKJ,SAASC,EAAwBC,EAAa,CAC5C,MAAMC,EAAaC,EAAW,gBAC9B,GAAI,CAACD,EACH,MAAO,CAAE,EAGX,MAAME,EAAc,OAAO,KAAKF,CAAU,EAI1C,OAAIH,GAA0BK,EAAY,SAAWN,IAIrDA,EAAgBM,EAAY,OAG5BL,EAAyBK,EAAY,OAAO,CAACC,EAAKC,IAAa,CACxDT,IACHA,EAAqB,CAAE,GAGzB,MAAMU,EAASV,EAAmBS,CAAQ,EAE1C,GAAIC,EACFF,EAAIE,EAAO,CAAC,CAAC,EAAIA,EAAO,CAAC,MACpB,CACL,MAAMC,EAAcP,EAAYK,CAAQ,EAExC,QAASG,EAAID,EAAY,OAAS,EAAGC,GAAK,EAAGA,IAAK,CAEhD,MAAMC,EADaF,EAAYC,CAAC,GACH,SACvBE,EAAUT,EAAWI,CAAQ,EAEnC,GAAII,GAAYC,EAAS,CACvBN,EAAIK,CAAQ,EAAIC,EAChBd,EAAmBS,CAAQ,EAAI,CAACI,EAAUC,CAAO,EACjD,KACV,CACA,CACA,CAEI,OAAON,CACR,EAAE,EAAE,GAEEN,CACT","x_google_ignoreList":[0]}