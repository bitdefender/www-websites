{"version":3,"file":"logger.js","sources":["../../../../../../../node_modules/@sentry/core/build/esm/utils-hoist/logger.js"],"sourcesContent":["import { getGlobalSingleton } from '../carrier.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\nconst CONSOLE_LEVELS = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] ;\n\n/** This may be mutated by the console instrumentation. */\nconst originalConsoleMethods\n\n = {};\n\n/** A Sentry Logger instance. */\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console ;\n  const wrappedFuncs = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) ;\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level] ;\n    wrappedFuncs[level] = console[level] ;\n    console[level] = originalConsoleMethod;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] ;\n    });\n  }\n}\n\nfunction makeLogger() {\n  let enabled = false;\n  const logger = {\n    enable: () => {\n      enabled = true;\n    },\n    disable: () => {\n      enabled = false;\n    },\n    isEnabled: () => enabled,\n  };\n\n  if (DEBUG_BUILD) {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = (...args) => {\n        if (enabled) {\n          consoleSandbox(() => {\n            GLOBAL_OBJ.console[name](`${PREFIX}[${name}]:`, ...args);\n          });\n        }\n      };\n    });\n  } else {\n    CONSOLE_LEVELS.forEach(name => {\n      logger[name] = () => undefined;\n    });\n  }\n\n  return logger ;\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.\n */\nconst logger = getGlobalSingleton('logger', makeLogger);\n\nexport { CONSOLE_LEVELS, consoleSandbox, logger, originalConsoleMethods };\n//# sourceMappingURL=logger.js.map\n"],"names":["PREFIX","CONSOLE_LEVELS","originalConsoleMethods","consoleSandbox","callback","GLOBAL_OBJ","console","wrappedFuncs","wrappedLevels","level","originalConsoleMethod","makeLogger","enabled","logger","DEBUG_BUILD","name","args","getGlobalSingleton"],"mappings":"+IAKA,MAAMA,EAAS,iBAETC,EAAiB,CACrB,QACA,OACA,OACA,QACA,MACA,SACA,OACF,EAGMC,EAEH,CAAA,EAUH,SAASC,EAAeC,EAAU,CAChC,GAAI,EAAE,YAAaC,GACjB,OAAOD,EAAU,EAGnB,MAAME,EAAUD,EAAW,QACrBE,EAAe,CAAE,EAEjBC,EAAgB,OAAO,KAAKN,CAAsB,EAGxDM,EAAc,QAAQC,GAAS,CAC7B,MAAMC,EAAwBR,EAAuBO,CAAK,EAC1DF,EAAaE,CAAK,EAAIH,EAAQG,CAAK,EACnCH,EAAQG,CAAK,EAAIC,CACrB,CAAG,EAED,GAAI,CACF,OAAON,EAAU,CACrB,QAAY,CAERI,EAAc,QAAQC,GAAS,CAC7BH,EAAQG,CAAK,EAAIF,EAAaE,CAAK,CACzC,CAAK,CACL,CACA,CAEA,SAASE,GAAa,CACpB,IAAIC,EAAU,GACd,MAAMC,EAAS,CACb,OAAQ,IAAM,CACZD,EAAU,EACX,EACD,QAAS,IAAM,CACbA,EAAU,EACX,EACD,UAAW,IAAMA,CAClB,EAED,OAAIE,EACFb,EAAe,QAAQc,GAAQ,CAC7BF,EAAOE,CAAI,EAAI,IAAIC,IAAS,CACtBJ,GACFT,EAAe,IAAM,CACnBE,EAAW,QAAQU,CAAI,EAAE,GAAGf,CAAM,IAAIe,CAAI,KAAM,GAAGC,CAAI,CACnE,CAAW,CAEJ,CACP,CAAK,EAEDf,EAAe,QAAQc,GAAQ,CAC7BF,EAAOE,CAAI,EAAI,MACrB,CAAK,EAGIF,CACT,CAMK,MAACA,EAASI,EAAmB,SAAUN,CAAU","x_google_ignoreList":[0]}