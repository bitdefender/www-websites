{"version":3,"file":"sdk.js","sources":["../../../../../../node_modules/@sentry/core/build/esm/sdk.js"],"sourcesContent":["import { getCurrentScope } from './currentScopes.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { logger, consoleSandbox } from './utils-hoist/logger.js';\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(\n  clientClass,\n  options,\n) {\n  if (options.debug === true) {\n    if (DEBUG_BUILD) {\n      logger.enable();\n    } else {\n      // use `console.warn` rather than `logger.warn` since by non-debug bundles have all `logger.x` statements stripped\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  client.init();\n  return client;\n}\n\n/**\n * Make the given client the current client.\n */\nfunction setCurrentClient(client) {\n  getCurrentScope().setClient(client);\n}\n\nexport { initAndBind, setCurrentClient };\n//# sourceMappingURL=sdk.js.map\n"],"names":["initAndBind","clientClass","options","DEBUG_BUILD","logger","consoleSandbox","getCurrentScope","client","setCurrentClient"],"mappings":"yKAaA,SAASA,EACPC,EACAC,EACA,CACIA,EAAQ,QAAU,KAChBC,EACFC,EAAO,OAAQ,EAGfC,EAAe,IAAM,CAEnB,QAAQ,KAAK,8EAA8E,CACnG,CAAO,GAGSC,EAAiB,EACzB,OAAOJ,EAAQ,YAAY,EAEjC,MAAMK,EAAS,IAAIN,EAAYC,CAAO,EACtC,OAAAM,EAAiBD,CAAM,EACvBA,EAAO,KAAM,EACNA,CACT,CAKA,SAASC,EAAiBD,EAAQ,CAChCD,EAAiB,EAAC,UAAUC,CAAM,CACpC","x_google_ignoreList":[0]}