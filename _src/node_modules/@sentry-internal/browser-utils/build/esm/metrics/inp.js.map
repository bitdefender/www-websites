{"version":3,"file":"inp.js","sources":["../../../../../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/inp.js"],"sourcesContent":["import { browserPerformanceTimeOrigin, getActiveSpan, getRootSpan, spanToJSON, getCurrentScope, htmlTreeAsString, SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';\nimport { addPerformanceInstrumentationHandler, addInpInstrumentationHandler, isPerformanceEventTiming } from './instrument.js';\nimport { getBrowserPerformanceAPI, msToSec, startStandaloneWebVitalSpan } from './utils.js';\n\nconst LAST_INTERACTIONS = [];\nconst INTERACTIONS_SPAN_MAP = new Map();\n\n/**\n * Start tracking INP webvital events.\n */\nfunction startTrackingINP() {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin()) {\n    const inpCallback = _trackINP();\n\n    return () => {\n      inpCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\nconst INP_ENTRY_MAP = {\n  click: 'click',\n  pointerdown: 'click',\n  pointerup: 'click',\n  mousedown: 'click',\n  mouseup: 'click',\n  touchstart: 'click',\n  touchend: 'click',\n  mouseover: 'hover',\n  mouseout: 'hover',\n  mouseenter: 'hover',\n  mouseleave: 'hover',\n  pointerover: 'hover',\n  pointerout: 'hover',\n  pointerenter: 'hover',\n  pointerleave: 'hover',\n  dragstart: 'drag',\n  dragend: 'drag',\n  drag: 'drag',\n  dragenter: 'drag',\n  dragleave: 'drag',\n  dragover: 'drag',\n  drop: 'drag',\n  keydown: 'press',\n  keyup: 'press',\n  keypress: 'press',\n  input: 'press',\n};\n\n/** Starts tracking the Interaction to Next Paint on the current page. */\nfunction _trackINP() {\n  return addInpInstrumentationHandler(({ metric }) => {\n    if (metric.value == undefined) {\n      return;\n    }\n\n    const entry = metric.entries.find(entry => entry.duration === metric.value && INP_ENTRY_MAP[entry.name]);\n\n    if (!entry) {\n      return;\n    }\n\n    const { interactionId } = entry;\n    const interactionType = INP_ENTRY_MAP[entry.name];\n\n    /** Build the INP span, create an envelope from the span, and then send the envelope */\n    const startTime = msToSec((browserPerformanceTimeOrigin() ) + entry.startTime);\n    const duration = msToSec(metric.value);\n    const activeSpan = getActiveSpan();\n    const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n\n    // We first try to lookup the span from our INTERACTIONS_SPAN_MAP,\n    // where we cache the route per interactionId\n    const cachedSpan = interactionId != null ? INTERACTIONS_SPAN_MAP.get(interactionId) : undefined;\n\n    const spanToUse = cachedSpan || rootSpan;\n\n    // Else, we try to use the active span.\n    // Finally, we fall back to look at the transactionName on the scope\n    const routeName = spanToUse ? spanToJSON(spanToUse).description : getCurrentScope().getScopeData().transactionName;\n\n    const name = htmlTreeAsString(entry.target);\n    const attributes = {\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.inp',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: `ui.interaction.${interactionType}`,\n      [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: entry.duration,\n    };\n\n    const span = startStandaloneWebVitalSpan({\n      name,\n      transaction: routeName,\n      attributes,\n      startTime,\n    });\n\n    if (span) {\n      span.addEvent('inp', {\n        [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: 'millisecond',\n        [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: metric.value,\n      });\n\n      span.end(startTime + duration);\n    }\n  });\n}\n\n/**\n * Register a listener to cache route information for INP interactions.\n */\nfunction registerInpInteractionListener() {\n  const handleEntries = ({ entries }) => {\n    const activeSpan = getActiveSpan();\n    const activeRootSpan = activeSpan && getRootSpan(activeSpan);\n\n    entries.forEach(entry => {\n      if (!isPerformanceEventTiming(entry) || !activeRootSpan) {\n        return;\n      }\n\n      const interactionId = entry.interactionId;\n      if (interactionId == null) {\n        return;\n      }\n\n      // If the interaction was already recorded before, nothing more to do\n      if (INTERACTIONS_SPAN_MAP.has(interactionId)) {\n        return;\n      }\n\n      // We keep max. 10 interactions in the list, then remove the oldest one & clean up\n      if (LAST_INTERACTIONS.length > 10) {\n        const last = LAST_INTERACTIONS.shift() ;\n        INTERACTIONS_SPAN_MAP.delete(last);\n      }\n\n      // We add the interaction to the list of recorded interactions\n      // and store the span for this interaction\n      LAST_INTERACTIONS.push(interactionId);\n      INTERACTIONS_SPAN_MAP.set(interactionId, activeRootSpan);\n    });\n  };\n\n  addPerformanceInstrumentationHandler('event', handleEntries);\n  addPerformanceInstrumentationHandler('first-input', handleEntries);\n}\n\nexport { registerInpInteractionListener, startTrackingINP };\n//# sourceMappingURL=inp.js.map\n"],"names":["LAST_INTERACTIONS","INTERACTIONS_SPAN_MAP","startTrackingINP","getBrowserPerformanceAPI","browserPerformanceTimeOrigin","inpCallback","_trackINP","INP_ENTRY_MAP","addInpInstrumentationHandler","metric","entry","interactionId","interactionType","startTime","msToSec","duration","activeSpan","getActiveSpan","rootSpan","getRootSpan","spanToUse","routeName","spanToJSON","getCurrentScope","name","htmlTreeAsString","attributes","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME","span","startStandaloneWebVitalSpan","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE","registerInpInteractionListener","handleEntries","entries","activeRootSpan","isPerformanceEventTiming","last","addPerformanceInstrumentationHandler"],"mappings":"g6BAIA,MAAMA,EAAoB,CAAE,EACtBC,EAAwB,IAAI,IAKlC,SAASC,GAAmB,CAE1B,GADoBC,EAA0B,GAC3BC,IAAgC,CACjD,MAAMC,EAAcC,EAAW,EAE/B,MAAO,IAAM,CACXD,EAAa,CACd,CACL,CAEE,MAAO,MACT,CAEA,MAAME,EAAgB,CACpB,MAAO,QACP,YAAa,QACb,UAAW,QACX,UAAW,QACX,QAAS,QACT,WAAY,QACZ,SAAU,QACV,UAAW,QACX,SAAU,QACV,WAAY,QACZ,WAAY,QACZ,YAAa,QACb,WAAY,QACZ,aAAc,QACd,aAAc,QACd,UAAW,OACX,QAAS,OACT,KAAM,OACN,UAAW,OACX,UAAW,OACX,SAAU,OACV,KAAM,OACN,QAAS,QACT,MAAO,QACP,SAAU,QACV,MAAO,OACT,EAGA,SAASD,GAAY,CACnB,OAAOE,EAA6B,CAAC,CAAE,OAAAC,KAAa,CAClD,GAAIA,EAAO,OAAS,KAClB,OAGF,MAAMC,EAAQD,EAAO,QAAQ,KAAKC,GAASA,EAAM,WAAaD,EAAO,OAASF,EAAcG,EAAM,IAAI,CAAC,EAEvG,GAAI,CAACA,EACH,OAGF,KAAM,CAAE,cAAAC,CAAa,EAAKD,EACpBE,EAAkBL,EAAcG,EAAM,IAAI,EAG1CG,EAAYC,EAASV,EAA4B,EAAOM,EAAM,SAAS,EACvEK,EAAWD,EAAQL,EAAO,KAAK,EAC/BO,EAAaC,EAAe,EAC5BC,EAAWF,EAAaG,EAAYH,CAAU,EAAI,OAMlDI,GAFaT,GAAiB,KAAOV,EAAsB,IAAIU,CAAa,EAAI,SAEtDO,EAI1BG,EAAYD,EAAYE,EAAWF,CAAS,EAAE,YAAcG,EAAe,EAAG,aAAY,EAAG,gBAE7FC,EAAOC,EAAiBf,EAAM,MAAM,EACpCgB,EAAa,CACjB,CAACC,CAAgC,EAAG,wBACpC,CAACC,CAA4B,EAAG,kBAAkBhB,CAAe,GACjE,CAACiB,CAAiC,EAAGnB,EAAM,QAC5C,EAEKoB,EAAOC,EAA4B,CACvC,KAAAP,EACA,YAAaH,EACb,WAAAK,EACA,UAAAb,CACN,CAAK,EAEGiB,IACFA,EAAK,SAAS,MAAO,CACnB,CAACE,CAA0C,EAAG,cAC9C,CAACC,CAA2C,EAAGxB,EAAO,KAC9D,CAAO,EAEDqB,EAAK,IAAIjB,EAAYE,CAAQ,EAEnC,CAAG,CACH,CAKA,SAASmB,GAAiC,CACxC,MAAMC,EAAgB,CAAC,CAAE,QAAAC,KAAc,CACrC,MAAMpB,EAAaC,EAAe,EAC5BoB,EAAiBrB,GAAcG,EAAYH,CAAU,EAE3DoB,EAAQ,QAAQ1B,GAAS,CACvB,GAAI,CAAC4B,EAAyB5B,CAAK,GAAK,CAAC2B,EACvC,OAGF,MAAM1B,EAAgBD,EAAM,cAC5B,GAAIC,GAAiB,MAKjB,CAAAV,EAAsB,IAAIU,CAAa,EAK3C,IAAIX,EAAkB,OAAS,GAAI,CACjC,MAAMuC,EAAOvC,EAAkB,MAAO,EACtCC,EAAsB,OAAOsC,CAAI,CACzC,CAIMvC,EAAkB,KAAKW,CAAa,EACpCV,EAAsB,IAAIU,EAAe0B,CAAc,EAC7D,CAAK,CACF,EAEDG,EAAqC,QAASL,CAAa,EAC3DK,EAAqC,cAAeL,CAAa,CACnE","x_google_ignoreList":[0]}