import{WINDOW as o}from"../types.js";import{spanToJSON as b}from"../../../../../@sentry/core/build/esm/utils/spanUtils.js";import{withActiveSpan as N,startInactiveSpan as d}from"../../../../../@sentry/core/build/esm/tracing/trace.js";import{getClient as S,getCurrentScope as _}from"../../../../../@sentry/core/build/esm/currentScopes.js";function I(e){return typeof e=="number"&&isFinite(e)}function T(e,t,i,{...n}){const r=b(e).start_timestamp;return r&&r>t&&typeof e.updateStartTime=="function"&&e.updateStartTime(t),N(e,()=>{const a=d({startTime:t,...n});return a&&a.end(i),a})}function D(e){const t=S();if(!t)return;const{name:i,transaction:n,attributes:r,startTime:a}=e,{release:c,environment:p,sendDefaultPii:l}=t.getOptions(),m=t.getIntegrationByName("Replay")?.getReplayId(),u=_(),s=u.getUser(),g=s!==void 0?s.email||s.id||s.ip_address:void 0;let f;try{f=u.getScopeData().contexts.profile.profile_id}catch{}const y={release:c,environment:p,user:g||void 0,profile_id:f||void 0,replay_id:m||void 0,transaction:n,"user_agent.original":o.navigator?.userAgent,"client.address":l?"{{auto}}":void 0,...r};return d({name:i,attributes:y,startTime:a,experimental:{standalone:!0}})}function O(){return o.addEventListener&&o.performance}function W(e){return e/1e3}function B(e){let t="unknown",i="unknown",n="";for(const r of e){if(r==="/"){[t,i]=e.split("/");break}if(!isNaN(Number(r))){t=n==="h"?"http":n,i=e.split(n)[1];break}n+=r}return n===e&&(t=n),{name:t,version:i}}export{B as extractNetworkProtocol,O as getBrowserPerformanceAPI,I as isMeasurementValue,W as msToSec,T as startAndEndSpan,D as startStandaloneWebVitalSpan};
//# sourceMappingURL=utils.js.map
