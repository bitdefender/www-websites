import{DEBUG_BUILD as h}from"../debug-build.js";import{onCLS as H}from"./web-vitals/getCLS.js";import{onFID as v}from"./web-vitals/getFID.js";import{onINP as C}from"./web-vitals/getINP.js";import{onLCP as T}from"./web-vitals/getLCP.js";import{observe as b}from"./web-vitals/lib/observe.js";import{onTTFB as F}from"./web-vitals/onTTFB.js";import{logger as L}from"../../../../../@sentry/core/build/esm/utils-hoist/logger.js";import{getFunctionName as _}from"../../../../../@sentry/core/build/esm/utils-hoist/stacktrace.js";const u={},s={};let a,l,m,c,p;function q(n,r=!1){return f("cls",n,P,a,r)}function z(n,r=!1){return f("lcp",n,x,m,r)}function J(n){return f("fid",n,E,l)}function K(n){return f("ttfb",n,B,c)}function Q(n){return f("inp",n,D,p)}function R(n,r){return g(n,r),s[n]||(N(n),s[n]=!0),I(n,r)}function i(n,r){const t=u[n];if(t?.length)for(const e of t)try{e(r)}catch(o){h&&L.error(`Error while triggering instrumentation handler.
Type: ${n}
Name: ${_(e)}
Error:`,o)}}function P(){return H(n=>{i("cls",{metric:n}),a=n},{reportAllChanges:!0})}function E(){return v(n=>{i("fid",{metric:n}),l=n})}function x(){return T(n=>{i("lcp",{metric:n}),m=n},{reportAllChanges:!0})}function B(){return F(n=>{i("ttfb",{metric:n}),c=n})}function D(){return C(n=>{i("inp",{metric:n}),p=n})}function f(n,r,t,e,o=!1){g(n,r);let d;return s[n]||(d=t(),s[n]=!0),e&&r({metric:e}),I(n,r,o?d:void 0)}function N(n){const r={};n==="event"&&(r.durationThreshold=0),b(n,t=>{i(n,{entries:t})},r)}function g(n,r){u[n]=u[n]||[],u[n].push(r)}function I(n,r,t){return()=>{t&&t();const e=u[n];if(!e)return;const o=e.indexOf(r);o!==-1&&e.splice(o,1)}}function W(n){return"duration"in n}export{q as addClsInstrumentationHandler,J as addFidInstrumentationHandler,Q as addInpInstrumentationHandler,z as addLcpInstrumentationHandler,R as addPerformanceInstrumentationHandler,K as addTtfbInstrumentationHandler,W as isPerformanceEventTiming};
//# sourceMappingURL=instrument.js.map
