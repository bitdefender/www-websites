{"version":3,"file":"getFID.js","sources":["../../../../../../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/getFID.js"],"sourcesContent":["import { bindReporter } from './lib/bindReporter.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { runOnce } from './lib/runOnce.js';\nimport { whenActivated } from './lib/whenActivated.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Thresholds for FID. See https://web.dev/articles/fid#what_is_a_good_fid_score */\nconst FIDThresholds = [100, 300];\n\n/**\n * Calculates the [FID](https://web.dev/articles/fid) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nconst onFID = (onReport, opts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('FID');\n    // eslint-disable-next-line prefer-const\n    let report;\n\n    const handleEntry = (entry) => {\n      // Only report if the page wasn't hidden prior to the first input.\n      if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n        metric.value = entry.processingStart - entry.startTime;\n        metric.entries.push(entry);\n        report(true);\n      }\n    };\n\n    const handleEntries = (entries) => {\n      (entries ).forEach(handleEntry);\n    };\n\n    const po = observe('first-input', handleEntries);\n\n    report = bindReporter(onReport, metric, FIDThresholds, opts.reportAllChanges);\n\n    if (po) {\n      onHidden(\n        runOnce(() => {\n          handleEntries(po.takeRecords() );\n          po.disconnect();\n        }),\n      );\n    }\n  });\n};\n\nexport { FIDThresholds, onFID };\n//# sourceMappingURL=getFID.js.map\n"],"names":["FIDThresholds","onFID","onReport","opts","whenActivated","visibilityWatcher","getVisibilityWatcher","metric","initMetric","report","handleEntry","entry","handleEntries","entries","po","observe","bindReporter","onHidden","runOnce"],"mappings":"qWA0BK,MAACA,EAAgB,CAAC,IAAK,GAAG,EAWzBC,EAAQ,CAACC,EAAUC,EAAO,KAAO,CACrCC,EAAc,IAAM,CAClB,MAAMC,EAAoBC,EAAsB,EAC1CC,EAASC,EAAW,KAAK,EAE/B,IAAIC,EAEJ,MAAMC,EAAeC,GAAU,CAEzBA,EAAM,UAAYN,EAAkB,kBACtCE,EAAO,MAAQI,EAAM,gBAAkBA,EAAM,UAC7CJ,EAAO,QAAQ,KAAKI,CAAK,EACzBF,EAAO,EAAI,EAEd,EAEKG,EAAiBC,GAAY,CAChCA,EAAU,QAAQH,CAAW,CAC/B,EAEKI,EAAKC,EAAQ,cAAeH,CAAa,EAE/CH,EAASO,EAAad,EAAUK,EAAQP,EAAeG,EAAK,gBAAgB,EAExEW,GACFG,EACEC,EAAQ,IAAM,CACZN,EAAcE,EAAG,aAAe,EAChCA,EAAG,WAAY,CACzB,CAAS,CACF,CAEP,CAAG,CACH","x_google_ignoreList":[0]}