{"version":3,"file":"getNativeImplementation.js","sources":["../../../../../../node_modules/@sentry-internal/browser-utils/build/esm/getNativeImplementation.js"],"sourcesContent":["import { isNativeFunction, logger } from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { WINDOW } from './types.js';\n\n/**\n * We generally want to use window.fetch / window.setTimeout.\n * However, in some cases this may be wrapped (e.g. by Zone.js for Angular),\n * so we try to get an unpatched version of this from a sandboxed iframe.\n */\n\nconst cachedImplementations = {};\n\n/**\n * Get the native implementation of a browser function.\n *\n * This can be used to ensure we get an unwrapped version of a function, in cases where a wrapped function can lead to problems.\n *\n * The following methods can be retrieved:\n * - `setTimeout`: This can be wrapped by e.g. Angular, causing change detection to be triggered.\n * - `fetch`: This can be wrapped by e.g. ad-blockers, causing an infinite loop when a request is blocked.\n */\nfunction getNativeImplementation(\n  name,\n) {\n  const cached = cachedImplementations[name];\n  if (cached) {\n    return cached;\n  }\n\n  let impl = WINDOW[name] ;\n\n  // Fast path to avoid DOM I/O\n  if (isNativeFunction(impl)) {\n    return (cachedImplementations[name] = impl.bind(WINDOW) );\n  }\n\n  const document = WINDOW.document;\n  // eslint-disable-next-line deprecation/deprecation\n  if (document && typeof document.createElement === 'function') {\n    try {\n      const sandbox = document.createElement('iframe');\n      sandbox.hidden = true;\n      document.head.appendChild(sandbox);\n      const contentWindow = sandbox.contentWindow;\n      if (contentWindow?.[name]) {\n        impl = contentWindow[name] ;\n      }\n      document.head.removeChild(sandbox);\n    } catch (e) {\n      // Could not create sandbox iframe, just use window.xxx\n      DEBUG_BUILD && logger.warn(`Could not create sandbox iframe for ${name} check, bailing to window.${name}: `, e);\n    }\n  }\n\n  // Sanity check: This _should_ not happen, but if it does, we just skip caching...\n  // This can happen e.g. in tests where fetch may not be available in the env, or similar.\n  if (!impl) {\n    return impl;\n  }\n\n  return (cachedImplementations[name] = impl.bind(WINDOW) );\n}\n\n/** Clear a cached implementation. */\nfunction clearCachedImplementation(name) {\n  cachedImplementations[name] = undefined;\n}\n\n/**\n * A special usecase for incorrectly wrapped Fetch APIs in conjunction with ad-blockers.\n * Whenever someone wraps the Fetch API and returns the wrong promise chain,\n * this chain becomes orphaned and there is no possible way to capture it's rejections\n * other than allowing it bubble up to this very handler. eg.\n *\n * const f = window.fetch;\n * window.fetch = function () {\n *   const p = f.apply(this, arguments);\n *\n *   p.then(function() {\n *     console.log('hi.');\n *   });\n *\n *   return p;\n * }\n *\n * `p.then(function () { ... })` is producing a completely separate promise chain,\n * however, what's returned is `p` - the result of original `fetch` call.\n *\n * This mean, that whenever we use the Fetch API to send our own requests, _and_\n * some ad-blocker blocks it, this orphaned chain will _always_ reject,\n * effectively causing another event to be captured.\n * This makes a whole process become an infinite loop, which we need to somehow\n * deal with, and break it in one way or another.\n *\n * To deal with this issue, we are making sure that we _always_ use the real\n * browser Fetch API, instead of relying on what `window.fetch` exposes.\n * The only downside to this would be missing our own requests as breadcrumbs,\n * but because we are already not doing this, it should be just fine.\n *\n * Possible failed fetch error messages per-browser:\n *\n * Chrome:  Failed to fetch\n * Edge:    Failed to Fetch\n * Firefox: NetworkError when attempting to fetch resource\n * Safari:  resource blocked by content blocker\n */\nfunction fetch(...rest) {\n  return getNativeImplementation('fetch')(...rest);\n}\n\n/**\n * Get an unwrapped `setTimeout` method.\n * This ensures that even if e.g. Angular wraps `setTimeout`, we get the native implementation,\n * avoiding triggering change detection.\n */\nfunction setTimeout(...rest) {\n  return getNativeImplementation('setTimeout')(...rest);\n}\n\nexport { clearCachedImplementation, fetch, getNativeImplementation, setTimeout };\n//# sourceMappingURL=getNativeImplementation.js.map\n"],"names":["cachedImplementations","getNativeImplementation","name","cached","impl","WINDOW","isNativeFunction","document","sandbox","contentWindow","e","DEBUG_BUILD","logger","clearCachedImplementation","setTimeout","rest"],"mappings":"mQAUA,MAAMA,EAAwB,CAAE,EAWhC,SAASC,EACPC,EACA,CACA,MAAMC,EAASH,EAAsBE,CAAI,EACzC,GAAIC,EACF,OAAOA,EAGT,IAAIC,EAAOC,EAAOH,CAAI,EAGtB,GAAII,EAAiBF,CAAI,EACvB,OAAQJ,EAAsBE,CAAI,EAAIE,EAAK,KAAKC,CAAM,EAGxD,MAAME,EAAWF,EAAO,SAExB,GAAIE,GAAY,OAAOA,EAAS,eAAkB,WAChD,GAAI,CACF,MAAMC,EAAUD,EAAS,cAAc,QAAQ,EAC/CC,EAAQ,OAAS,GACjBD,EAAS,KAAK,YAAYC,CAAO,EACjC,MAAMC,EAAgBD,EAAQ,cAC1BC,IAAgBP,CAAI,IACtBE,EAAOK,EAAcP,CAAI,GAE3BK,EAAS,KAAK,YAAYC,CAAO,CAClC,OAAQE,EAAG,CAEVC,GAAeC,EAAO,KAAK,uCAAuCV,CAAI,6BAA6BA,CAAI,KAAMQ,CAAC,CACpH,CAKE,OAAKN,IAIGJ,EAAsBE,CAAI,EAAIE,EAAK,KAAKC,CAAM,EACxD,CAGA,SAASQ,EAA0BX,EAAM,CACvCF,EAAsBE,CAAI,EAAI,MAChC,CAiDA,SAASY,KAAcC,EAAM,CAC3B,OAAOd,EAAwB,YAAY,EAAE,GAAGc,CAAI,CACtD","x_google_ignoreList":[0]}