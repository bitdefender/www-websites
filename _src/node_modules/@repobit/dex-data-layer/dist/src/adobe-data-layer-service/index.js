import '../../../../dex-utils/dist/src/index.js';
import { PageLoadedEvent } from '../events/page-loaded-event/index.js';
import { ProductLoadedEvent } from '../events/product-loaded-event/index.js';
import merge from '../../../../../../_virtual/cjs.js';

class AdobeDataLayerService {
    static _dataLayer = {};
    static {
        window.adobeDataLayer = window.adobeDataLayer || [];
    }
    static combineMerge(target, source) {
        const mergeResult = new Set();
        if (source.length) {
            source.forEach(sourceElement => {
                mergeResult.add(JSON.stringify(sourceElement));
            });
        }
        if (target.length) {
            target.forEach(targetElement => {
                mergeResult.add(JSON.stringify(targetElement));
            });
        }
        return [...mergeResult].map(value => JSON.parse(value));
    }
    /**
     * add the values from the local object to adobeDataLayer
     */
    static pushEventsToDataLayer() {
        const productLoadedObject = this._dataLayer['product loaded'];
        if (productLoadedObject) {
            const productObject = productLoadedObject['product'];
            productObject.all = productObject.all?.filter(product => !productObject.info?.some(mainProduct => JSON.stringify(product) === JSON.stringify(mainProduct)));
            Object.keys(productObject).forEach(key => {
                if (!productObject[key] || !productObject[key].length) {
                    delete productObject[key];
                }
            });
        }
        Object.keys(this._dataLayer).forEach(dataLayerKey => {
            window.adobeDataLayer.push({ ...this._dataLayer[dataLayerKey] });
            delete this._dataLayer[dataLayerKey];
        });
    }
    // getter for funcionality checks
    static get dataLayer() {
        return this._dataLayer;
    }
    static push(event) {
        /**
         * keep adding values to the already existing event
         */
        if (event instanceof ProductLoadedEvent) {
            /**
             * start constructing an object for the local _dataLayer where the event name is the key
             * Example: {
             *  "product loaded": new ProductsLoadedEvent
             * }
             */
            const eventObject = {
                [event.event]: event
            };
            this._dataLayer = merge(this._dataLayer, eventObject, { arrayMerge: this.combineMerge });
            return;
        }
        else if (event instanceof PageLoadedEvent) {
            this.pushEventsToDataLayer();
        }
        window.adobeDataLayer.push({ ...event });
    }
}

export { AdobeDataLayerService };
//# sourceMappingURL=index.js.map
