import { Constants } from '../../../dex-constants/dist/src/index.js';
import Cookies from './cookies.js';
import UserAgent from './user-agent/index.js';

class User {
    static _info = this.staticInitialise();
    static _fingerprint = this.getFingerprint();
    static _country = this.getGeolocation();
    static _locale = this.getUserLocale();
    static async staticInitialise() {
        if (!Cookies.has(Constants.LOGIN_LOGGED_USER_EXPIRY_COOKIE_NAME)) {
            return null;
        }
        try {
            const userDataResponse = await fetch(`${Constants.PUBLIC_URL_ORIGIN}/bin/login/userInfo.json`);
            return userDataResponse.ok ? (await userDataResponse.json()).result : null;
        }
        catch {
            return null;
        }
    }
    static async getFingerprint() {
        // Try to grab the fingeprint from localstoraage
        const storageFingerprint = localStorage.getItem(Constants.FINGERPRINT_LOCAL_STORAGE_NAME);
        if (storageFingerprint) {
            return storageFingerprint;
        }
        // Try to grab fingerprint from login data
        const userInfo = await this._info;
        if (userInfo) {
            localStorage.setItem(Constants.FINGERPRINT_LOCAL_STORAGE_NAME, userInfo.fingerprint);
            return userInfo.fingerprint;
        }
        // Try to grab fingerprint from dummyPost (from user local antivirus instance)
        const fingerprintNotExist = Cookies.has(Constants.NO_FINGERPRINT_COOKIE_NAME);
        if (!fingerprintNotExist && UserAgent.isWindows) {
            try {
                const fingerprintReq = await fetch(`${Constants.WWW_ONLY_ORIGIN}/site/Main/dummyPost?${Math.random()}`, {
                    method: 'POST',
                    headers: {
                        'Content-type': 'application/x-www-form-urlencoded',
                        'Pragma': 'no-cache',
                        'Cache-Control': 'no-store, no-cache, must-revalidate, max-age=0',
                        'Expires': 'Tue, 01 Jan 1971 02:00:00 GMT',
                        'BDUS_A312C09A2666456D9F2B2AA5D6B463D6': 'check.bitdefender'
                    }
                });
                if (fingerprintReq.ok && fingerprintReq.headers.has(Constants.FINGERPRINT_HEADER)) {
                    const fingerprint = fingerprintReq.headers.get(Constants.FINGERPRINT_HEADER);
                    localStorage.setItem(Constants.FINGERPRINT_LOCAL_STORAGE_NAME, fingerprint);
                    return fingerprint;
                }
                else {
                    Cookies.set(Constants.NO_FINGERPRINT_COOKIE_NAME, 'true', { expires: 1 });
                }
            }
            catch { /* empty */ }
        }
        return null;
    }
    /**
     * Handling User Geolocation
     * This wil fetch the user's country
    */
    static async getGeolocation() {
        try {
            const response = await fetch(`${Constants.PUBLIC_URL_ORIGIN}/geoip`);
            if (!response.ok) {
                return 'us';
            }
            const country = await response.json();
            if (country.error_code) {
                return 'us';
            }
            return country['country'].toLowerCase();
        }
        catch {
            return 'us';
        }
    }
    /** Getting the User's Locale */
    static async getUserLocale() {
        const userCountry = await this._country;
        try {
            const userGeoIpCall = await fetch(`${Constants.WWW_ONLY_ORIGIN}/p-api/v1/countries/${userCountry.toUpperCase()}/locales`);
            const userGeoIpData = await userGeoIpCall.json();
            return userGeoIpData[0].locale.toLowerCase();
        }
        catch {
            return 'en-us';
        }
    }
    /** attempt to log the user in.
     * You can access it from the mega menu if it is imported.
     * If the login fails, this operation will not be permited in the same tab session. */
    static async login() {
        const loginAttempt = sessionStorage.getItem(Constants.LOGIN_ATTEMPT_SESSION_STORAGE_KEY);
        const userData = await this._info;
        const userLoggedInExpirationDate = Number(Cookies.get(Constants.LOGIN_LOGGED_USER_EXPIRY_COOKIE_NAME)) || 0;
        if (!loginAttempt && !userData
            && userLoggedInExpirationDate > Date.now()) {
            sessionStorage.setItem(Constants.LOGIN_ATTEMPT_SESSION_STORAGE_KEY, 'true');
            const loginEndpointUrl = new URL(`${Constants.PUBLIC_URL_ORIGIN}${Constants.LOGIN_ENDPOINT}`);
            loginEndpointUrl.searchParams.set('origin', `${window.location.pathname}${window.location.search}`);
            window.location.href = loginEndpointUrl.href;
        }
    }
    static get info() {
        return this._info;
    }
    static get fingerprint() {
        return this._fingerprint;
    }
    static get country() {
        return this._country;
    }
    static get locale() {
        return this._locale;
    }
}

export { User as default };
//# sourceMappingURL=user.js.map
