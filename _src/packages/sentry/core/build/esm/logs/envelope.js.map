{"version":3,"file":"envelope.js","sources":["../../../../../../../node_modules/@sentry/core/build/esm/logs/envelope.js"],"sourcesContent":["import { dsnToString } from '../utils-hoist/dsn.js';\nimport { createEnvelope } from '../utils-hoist/envelope.js';\n\n/**\n * Creates a log container envelope item for a list of logs.\n *\n * @param items - The logs to include in the envelope.\n * @returns The created log container envelope item.\n */\nfunction createLogContainerEnvelopeItem(items) {\n  return [\n    {\n      type: 'log',\n      item_count: items.length,\n      content_type: 'application/vnd.sentry.items.log+json',\n    },\n    {\n      items,\n    },\n  ];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * Logs from multiple traces can be included in the same envelope.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nfunction createLogEnvelope(\n  logs,\n  metadata,\n  tunnel,\n  dsn,\n) {\n  const headers = {};\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  return createEnvelope(headers, [createLogContainerEnvelopeItem(logs)]);\n}\n\nexport { createLogContainerEnvelopeItem, createLogEnvelope };\n//# sourceMappingURL=envelope.js.map\n"],"names":["createLogContainerEnvelopeItem","items","createLogEnvelope","logs","metadata","tunnel","dsn","headers","dsnToString","createEnvelope"],"mappings":"gHASA,SAASA,EAA+BC,EAAO,CAC7C,MAAO,CACL,CACE,KAAM,MACN,WAAYA,EAAM,OAClB,aAAc,uCACf,EACD,CACE,MAAAA,CACD,CACF,CACH,CAaA,SAASC,EACPC,EACAC,EACAC,EACAC,EACA,CACA,MAAMC,EAAU,CAAE,EAElB,OAAIH,GAAU,MACZG,EAAQ,IAAM,CACZ,KAAMH,EAAS,IAAI,KACnB,QAASA,EAAS,IAAI,OACvB,GAGGC,GAAYC,IAChBC,EAAQ,IAAMC,EAAYF,CAAG,GAGxBG,EAAeF,EAAS,CAACP,EAA+BG,CAAI,CAAC,CAAC,CACvE","x_google_ignoreList":[0]}