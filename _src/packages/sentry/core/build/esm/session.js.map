{"version":3,"file":"session.js","sources":["../../../../../../node_modules/@sentry/core/build/esm/session.js"],"sourcesContent":["import { uuid4 } from './utils-hoist/misc.js';\nimport { timestampInSeconds } from './utils-hoist/time.js';\n\n/**\n * Creates a new `Session` object by setting certain default parameters. If optional @param context\n * is passed, the passed properties are applied to the session object.\n *\n * @param context (optional) additional properties to be applied to the returned session object\n *\n * @returns a new `Session` object\n */\nfunction makeSession(context) {\n  // Both timestamp and started are in seconds since the UNIX epoch.\n  const startingTime = timestampInSeconds();\n\n  const session = {\n    sid: uuid4(),\n    init: true,\n    timestamp: startingTime,\n    started: startingTime,\n    duration: 0,\n    status: 'ok',\n    errors: 0,\n    ignoreDuration: false,\n    toJSON: () => sessionToJSON(session),\n  };\n\n  if (context) {\n    updateSession(session, context);\n  }\n\n  return session;\n}\n\n/**\n * Updates a session object with the properties passed in the context.\n *\n * Note that this function mutates the passed object and returns void.\n * (Had to do this instead of returning a new and updated session because closing and sending a session\n * makes an update to the session after it was passed to the sending logic.\n * @see Client.captureSession )\n *\n * @param session the `Session` to update\n * @param context the `SessionContext` holding the properties that should be updated in @param session\n */\n// eslint-disable-next-line complexity\nfunction updateSession(session, context = {}) {\n  if (context.user) {\n    if (!session.ipAddress && context.user.ip_address) {\n      session.ipAddress = context.user.ip_address;\n    }\n\n    if (!session.did && !context.did) {\n      session.did = context.user.id || context.user.email || context.user.username;\n    }\n  }\n\n  session.timestamp = context.timestamp || timestampInSeconds();\n\n  if (context.abnormal_mechanism) {\n    session.abnormal_mechanism = context.abnormal_mechanism;\n  }\n\n  if (context.ignoreDuration) {\n    session.ignoreDuration = context.ignoreDuration;\n  }\n  if (context.sid) {\n    // Good enough uuid validation. â€” Kamil\n    session.sid = context.sid.length === 32 ? context.sid : uuid4();\n  }\n  if (context.init !== undefined) {\n    session.init = context.init;\n  }\n  if (!session.did && context.did) {\n    session.did = `${context.did}`;\n  }\n  if (typeof context.started === 'number') {\n    session.started = context.started;\n  }\n  if (session.ignoreDuration) {\n    session.duration = undefined;\n  } else if (typeof context.duration === 'number') {\n    session.duration = context.duration;\n  } else {\n    const duration = session.timestamp - session.started;\n    session.duration = duration >= 0 ? duration : 0;\n  }\n  if (context.release) {\n    session.release = context.release;\n  }\n  if (context.environment) {\n    session.environment = context.environment;\n  }\n  if (!session.ipAddress && context.ipAddress) {\n    session.ipAddress = context.ipAddress;\n  }\n  if (!session.userAgent && context.userAgent) {\n    session.userAgent = context.userAgent;\n  }\n  if (typeof context.errors === 'number') {\n    session.errors = context.errors;\n  }\n  if (context.status) {\n    session.status = context.status;\n  }\n}\n\n/**\n * Closes a session by setting its status and updating the session object with it.\n * Internally calls `updateSession` to update the passed session object.\n *\n * Note that this function mutates the passed session (@see updateSession for explanation).\n *\n * @param session the `Session` object to be closed\n * @param status the `SessionStatus` with which the session was closed. If you don't pass a status,\n *               this function will keep the previously set status, unless it was `'ok'` in which case\n *               it is changed to `'exited'`.\n */\nfunction closeSession(session, status) {\n  let context = {};\n  if (status) {\n    context = { status };\n  } else if (session.status === 'ok') {\n    context = { status: 'exited' };\n  }\n\n  updateSession(session, context);\n}\n\n/**\n * Serializes a passed session object to a JSON object with a slightly different structure.\n * This is necessary because the Sentry backend requires a slightly different schema of a session\n * than the one the JS SDKs use internally.\n *\n * @param session the session to be converted\n *\n * @returns a JSON object of the passed session\n */\nfunction sessionToJSON(session) {\n  return {\n    sid: `${session.sid}`,\n    init: session.init,\n    // Make sure that sec is converted to ms for date constructor\n    started: new Date(session.started * 1000).toISOString(),\n    timestamp: new Date(session.timestamp * 1000).toISOString(),\n    status: session.status,\n    errors: session.errors,\n    did: typeof session.did === 'number' || typeof session.did === 'string' ? `${session.did}` : undefined,\n    duration: session.duration,\n    abnormal_mechanism: session.abnormal_mechanism,\n    attrs: {\n      release: session.release,\n      environment: session.environment,\n      ip_address: session.ipAddress,\n      user_agent: session.userAgent,\n    },\n  };\n}\n\nexport { closeSession, makeSession, updateSession };\n//# sourceMappingURL=session.js.map\n"],"names":["makeSession","context","startingTime","timestampInSeconds","session","uuid4","sessionToJSON","updateSession","duration","closeSession","status"],"mappings":"yGAWA,SAASA,EAAYC,EAAS,CAE5B,MAAMC,EAAeC,EAAoB,EAEnCC,EAAU,CACd,IAAKC,EAAO,EACZ,KAAM,GACN,UAAWH,EACX,QAASA,EACT,SAAU,EACV,OAAQ,KACR,OAAQ,EACR,eAAgB,GAChB,OAAQ,IAAMI,EAAcF,CAAO,CACpC,EAED,OAAIH,GACFM,EAAcH,EAASH,CAAO,EAGzBG,CACT,CAcA,SAASG,EAAcH,EAASH,EAAU,GAAI,CAiC5C,GAhCIA,EAAQ,OACN,CAACG,EAAQ,WAAaH,EAAQ,KAAK,aACrCG,EAAQ,UAAYH,EAAQ,KAAK,YAG/B,CAACG,EAAQ,KAAO,CAACH,EAAQ,MAC3BG,EAAQ,IAAMH,EAAQ,KAAK,IAAMA,EAAQ,KAAK,OAASA,EAAQ,KAAK,WAIxEG,EAAQ,UAAYH,EAAQ,WAAaE,EAAoB,EAEzDF,EAAQ,qBACVG,EAAQ,mBAAqBH,EAAQ,oBAGnCA,EAAQ,iBACVG,EAAQ,eAAiBH,EAAQ,gBAE/BA,EAAQ,MAEVG,EAAQ,IAAMH,EAAQ,IAAI,SAAW,GAAKA,EAAQ,IAAMI,EAAO,GAE7DJ,EAAQ,OAAS,SACnBG,EAAQ,KAAOH,EAAQ,MAErB,CAACG,EAAQ,KAAOH,EAAQ,MAC1BG,EAAQ,IAAM,GAAGH,EAAQ,GAAG,IAE1B,OAAOA,EAAQ,SAAY,WAC7BG,EAAQ,QAAUH,EAAQ,SAExBG,EAAQ,eACVA,EAAQ,SAAW,eACV,OAAOH,EAAQ,UAAa,SACrCG,EAAQ,SAAWH,EAAQ,aACtB,CACL,MAAMO,EAAWJ,EAAQ,UAAYA,EAAQ,QAC7CA,EAAQ,SAAWI,GAAY,EAAIA,EAAW,CAClD,CACMP,EAAQ,UACVG,EAAQ,QAAUH,EAAQ,SAExBA,EAAQ,cACVG,EAAQ,YAAcH,EAAQ,aAE5B,CAACG,EAAQ,WAAaH,EAAQ,YAChCG,EAAQ,UAAYH,EAAQ,WAE1B,CAACG,EAAQ,WAAaH,EAAQ,YAChCG,EAAQ,UAAYH,EAAQ,WAE1B,OAAOA,EAAQ,QAAW,WAC5BG,EAAQ,OAASH,EAAQ,QAEvBA,EAAQ,SACVG,EAAQ,OAASH,EAAQ,OAE7B,CAaA,SAASQ,EAAaL,EAASM,EAAQ,CACrC,IAAIT,EAAU,CAAE,EAGLG,EAAQ,SAAW,OAC5BH,EAAU,CAAE,OAAQ,QAAU,GAGhCM,EAAcH,EAASH,CAAO,CAChC,CAWA,SAASK,EAAcF,EAAS,CAC9B,MAAO,CACL,IAAK,GAAGA,EAAQ,GAAG,GACnB,KAAMA,EAAQ,KAEd,QAAS,IAAI,KAAKA,EAAQ,QAAU,GAAI,EAAE,YAAa,EACvD,UAAW,IAAI,KAAKA,EAAQ,UAAY,GAAI,EAAE,YAAa,EAC3D,OAAQA,EAAQ,OAChB,OAAQA,EAAQ,OAChB,IAAK,OAAOA,EAAQ,KAAQ,UAAY,OAAOA,EAAQ,KAAQ,SAAW,GAAGA,EAAQ,GAAG,GAAK,OAC7F,SAAUA,EAAQ,SAClB,mBAAoBA,EAAQ,mBAC5B,MAAO,CACL,QAASA,EAAQ,QACjB,YAAaA,EAAQ,YACrB,WAAYA,EAAQ,UACpB,WAAYA,EAAQ,SACrB,CACF,CACH","x_google_ignoreList":[0]}