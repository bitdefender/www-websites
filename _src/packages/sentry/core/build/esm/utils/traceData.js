import{getAsyncContextStrategy as m}from"../asyncContext/index.js";import{getMainCarrier as p}from"../carrier.js";import{getClient as s,getCurrentScope as d}from"../currentScopes.js";import{isEnabled as f}from"../exports.js";import{logger as T}from"../utils-hoist/logger.js";import{getActiveSpan as S,spanToTraceHeader as y}from"./spanUtils.js";import{getDynamicSamplingContextFromSpan as l,getDynamicSamplingContextFromScope as C}from"../tracing/dynamicSamplingContext.js";import{TRACEPARENT_REGEXP as u,generateSentryTraceHeader as x}from"../utils-hoist/tracing.js";import{dynamicSamplingContextToSentryBaggageHeader as H}from"../utils-hoist/baggage.js";function B(e={}){const t=s();if(!f()||!t)return{};const n=p(),r=m(n);if(r.getTraceData)return r.getTraceData(e);const o=d(),a=e.span||S(),c=a?y(a):D(o),i=a?l(a):C(t,o),g=H(i);return u.test(c)?{"sentry-trace":c,baggage:g}:(T.warn("Invalid sentry-trace data. Cannot generate trace data"),{})}function D(e){const{traceId:t,sampled:n,propagationSpanId:r}=e.getPropagationContext();return x(t,r,n)}export{B as getTraceData};
//# sourceMappingURL=traceData.js.map
