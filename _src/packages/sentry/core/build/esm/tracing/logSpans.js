import{DEBUG_BUILD as m}from"../debug-build.js";import{spanToJSON as a,spanIsSampled as g,getRootSpan as u}from"../utils/spanUtils.js";import{logger as S}from"../utils-hoist/logger.js";function D(o){if(!m)return;const{description:s="< unknown name >",op:r="< unknown op >",parent_span_id:p}=a(o),{spanId:e}=o.spanContext(),i=g(o),n=u(o),c=n===o,f=`[Tracing] Starting ${i?"sampled":"unsampled"} ${c?"root ":""}span`,t=[`op: ${r}`,`name: ${s}`,`ID: ${e}`];if(p&&t.push(`parent ID: ${p}`),!c){const{op:d,description:$}=a(n);t.push(`root ID: ${n.spanContext().spanId}`),d&&t.push(`root op: ${d}`),$&&t.push(`root description: ${$}`)}S.log(`${f}
  ${t.join(`
  `)}`)}function w(o){if(!m)return;const{description:s="< unknown name >",op:r="< unknown op >"}=a(o),{spanId:p}=o.spanContext(),i=u(o)===o,n=`[Tracing] Finishing "${r}" ${i?"root ":""}span "${s}" with ID ${p}`;S.log(n)}export{w as logSpanEnd,D as logSpanStart};
//# sourceMappingURL=logSpans.js.map
