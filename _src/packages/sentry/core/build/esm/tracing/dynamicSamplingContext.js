import{DEFAULT_ENVIRONMENT as _}from"../constants.js";import{getClient as d}from"../currentScopes.js";import{SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE as u,SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE as C,SEMANTIC_ATTRIBUTE_SENTRY_SOURCE as D}from"../semanticAttributes.js";import{hasSpansEnabled as R}from"../utils/hasSpansEnabled.js";import{getRootSpan as y,spanToJSON as I,spanIsSampled as A}from"../utils/spanUtils.js";import{baggageHeaderToDynamicSamplingContext as N}from"../utils-hoist/baggage.js";import{extractOrgIdFromDsnHost as x}from"../utils-hoist/dsn.js";import{addNonEnumerableProperty as O}from"../utils-hoist/object.js";import{getCapturedScopesOnSpan as b}from"./utils.js";const l="_frozenDsc";function v(n,e){O(n,l,e)}function T(n,e){const t=e.getOptions(),{publicKey:c,host:r}=e.getDsn()||{};let o;t.orgId?o=String(t.orgId):r&&(o=x(r));const a={environment:t.environment||_,release:t.release,public_key:c,trace_id:n,org_id:o};return e.emit("createDsc",a),a}function H(n,e){const t=e.getPropagationContext();return t.dsc||T(t.traceId,n)}function J(n){const e=d();if(!e)return{};const t=y(n),c=I(t),r=c.data,o=t.spanContext().traceState,a=o?.get("sentry.sample_rate")??r[u]??r[C];function p(f){return(typeof a=="number"||typeof a=="string")&&(f.sample_rate=`${a}`),f}const i=t[l];if(i)return p(i);const m=o?.get("sentry.dsc"),S=m&&N(m);if(S)return p(S);const s=T(n.spanContext().traceId,e),E=r[D],g=c.description;return E!=="url"&&g&&(s.transaction=g),R()&&(s.sampled=String(A(t)),s.sample_rand=o?.get("sentry.sample_rand")??b(t).scope?.getPropagationContext().sampleRand.toString()),p(s),e.emit("createDsc",s,t),s}export{v as freezeDscOnSpan,T as getDynamicSamplingContextFromClient,H as getDynamicSamplingContextFromScope,J as getDynamicSamplingContextFromSpan};
//# sourceMappingURL=dynamicSamplingContext.js.map
