import{DEFAULT_ENVIRONMENT as _}from"../constants.js";import{getClient as u}from"../currentScopes.js";import{SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE as d,SEMANTIC_ATTRIBUTE_SENTRY_PREVIOUS_TRACE_SAMPLE_RATE as C,SEMANTIC_ATTRIBUTE_SENTRY_SOURCE as D}from"../semanticAttributes.js";import{hasSpansEnabled as R}from"../utils/hasSpansEnabled.js";import{getRootSpan as y,spanToJSON as A,spanIsSampled as I}from"../utils/spanUtils.js";import{baggageHeaderToDynamicSamplingContext as N}from"../utils-hoist/baggage.js";import{addNonEnumerableProperty as x}from"../utils-hoist/object.js";import{getCapturedScopesOnSpan as b}from"./utils.js";const T="_frozenDsc";function B(e,n){x(e,T,n)}function l(e,n){const t=n.getOptions(),{publicKey:a}=n.getDsn()||{},o={environment:t.environment||_,release:t.release,public_key:a,trace_id:e};return n.emit("createDsc",o),o}function Y(e,n){const t=n.getPropagationContext();return t.dsc||l(t.traceId,e)}function v(e){const n=u();if(!n)return{};const t=y(e),a=A(t),o=a.data,s=t.spanContext().traceState,c=s?.get("sentry.sample_rate")??o[d]??o[C];function p(f){return(typeof c=="number"||typeof c=="string")&&(f.sample_rate=`${c}`),f}const i=t[T];if(i)return p(i);const m=s?.get("sentry.dsc"),S=m&&N(m);if(S)return p(S);const r=l(e.spanContext().traceId,n),E=o[D],g=a.description;return E!=="url"&&g&&(r.transaction=g),R()&&(r.sampled=String(I(t)),r.sample_rand=s?.get("sentry.sample_rand")??b(t).scope?.getPropagationContext().sampleRand.toString()),p(r),n.emit("createDsc",r,t),r}export{B as freezeDscOnSpan,l as getDynamicSamplingContextFromClient,Y as getDynamicSamplingContextFromScope,v as getDynamicSamplingContextFromSpan};
//# sourceMappingURL=dynamicSamplingContext.js.map
