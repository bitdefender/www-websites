{"version":3,"file":"logSpans.js","sources":["../../../../../../../node_modules/@sentry/core/build/esm/tracing/logSpans.js"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build.js';\nimport { spanToJSON, getRootSpan, spanIsSampled } from '../utils/spanUtils.js';\nimport { logger } from '../utils-hoist/logger.js';\n\n/**\n * Print a log message for a started span.\n */\nfunction logSpanStart(span) {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n\n  const sampled = spanIsSampled(span);\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n\n  const infoParts = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n\n  if (!isRootSpan) {\n    const { op, description } = spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n\n  logger.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nfunction logSpanEnd(span) {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >' } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  logger.log(msg);\n}\n\nexport { logSpanEnd, logSpanStart };\n//# sourceMappingURL=logSpans.js.map\n"],"names":["logSpanStart","span","DEBUG_BUILD","description","op","parentSpanId","spanToJSON","spanId","sampled","spanIsSampled","rootSpan","getRootSpan","isRootSpan","header","infoParts","logger","logSpanEnd","msg"],"mappings":"yLAOA,SAASA,EAAaC,EAAM,CAC1B,GAAI,CAACC,EAAa,OAElB,KAAM,CAAE,YAAAC,EAAc,mBAAoB,GAAAC,EAAK,iBAAkB,eAAgBC,CAAY,EAAKC,EAAWL,CAAI,EAC3G,CAAE,OAAAM,CAAM,EAAKN,EAAK,YAAa,EAE/BO,EAAUC,EAAcR,CAAI,EAC5BS,EAAWC,EAAYV,CAAI,EAC3BW,EAAaF,IAAaT,EAE1BY,EAAS,sBAAsBL,EAAU,UAAY,WAAW,IAAII,EAAa,QAAU,EAAE,OAE7FE,EAAY,CAAC,OAAOV,CAAE,GAAI,SAASD,CAAW,GAAI,OAAOI,CAAM,EAAE,EAMvE,GAJIF,GACFS,EAAU,KAAK,cAAcT,CAAY,EAAE,EAGzC,CAACO,EAAY,CACf,KAAM,CAAE,GAAAR,EAAI,YAAAD,GAAgBG,EAAWI,CAAQ,EAC/CI,EAAU,KAAK,YAAYJ,EAAS,YAAa,EAAC,MAAM,EAAE,EACtDN,GACFU,EAAU,KAAK,YAAYV,CAAE,EAAE,EAE7BD,GACFW,EAAU,KAAK,qBAAqBX,CAAW,EAAE,CAEvD,CAEEY,EAAO,IAAI,GAAGF,CAAM;AAAA,IAClBC,EAAU,KAAK;AAAA,GAAM,CAAC,EAAE,CAC5B,CAKA,SAASE,EAAWf,EAAM,CACxB,GAAI,CAACC,EAAa,OAElB,KAAM,CAAE,YAAAC,EAAc,mBAAoB,GAAAC,EAAK,gBAAkB,EAAGE,EAAWL,CAAI,EAC7E,CAAE,OAAAM,CAAM,EAAKN,EAAK,YAAa,EAE/BW,EADWD,EAAYV,CAAI,IACDA,EAE1BgB,EAAM,wBAAwBb,CAAE,KAAKQ,EAAa,QAAU,EAAE,SAAST,CAAW,aAAaI,CAAM,GAC3GQ,EAAO,IAAIE,CAAG,CAChB","x_google_ignoreList":[0]}