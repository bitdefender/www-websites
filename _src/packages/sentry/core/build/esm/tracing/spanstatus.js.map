{"version":3,"file":"spanstatus.js","sources":["../../../../../../../node_modules/@sentry/core/build/esm/tracing/spanstatus.js"],"sourcesContent":["const SPAN_STATUS_UNSET = 0;\nconst SPAN_STATUS_OK = 1;\nconst SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nfunction getSpanStatusFromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return { code: SPAN_STATUS_OK };\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return { code: SPAN_STATUS_ERROR, message: 'unauthenticated' };\n      case 403:\n        return { code: SPAN_STATUS_ERROR, message: 'permission_denied' };\n      case 404:\n        return { code: SPAN_STATUS_ERROR, message: 'not_found' };\n      case 409:\n        return { code: SPAN_STATUS_ERROR, message: 'already_exists' };\n      case 413:\n        return { code: SPAN_STATUS_ERROR, message: 'failed_precondition' };\n      case 429:\n        return { code: SPAN_STATUS_ERROR, message: 'resource_exhausted' };\n      case 499:\n        return { code: SPAN_STATUS_ERROR, message: 'cancelled' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'invalid_argument' };\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return { code: SPAN_STATUS_ERROR, message: 'unimplemented' };\n      case 503:\n        return { code: SPAN_STATUS_ERROR, message: 'unavailable' };\n      case 504:\n        return { code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'internal_error' };\n    }\n  }\n\n  return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nfunction setHttpStatus(span, httpStatus) {\n  span.setAttribute('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n\nexport { SPAN_STATUS_ERROR, SPAN_STATUS_OK, SPAN_STATUS_UNSET, getSpanStatusFromHttpCode, setHttpStatus };\n//# sourceMappingURL=spanstatus.js.map\n"],"names":["SPAN_STATUS_UNSET","SPAN_STATUS_OK","SPAN_STATUS_ERROR","getSpanStatusFromHttpCode","httpStatus","setHttpStatus","span","spanStatus"],"mappings":"AAAK,MAACA,EAAoB,EACpBC,EAAiB,EACjBC,EAAoB,EAS1B,SAASC,EAA0BC,EAAY,CAC7C,GAAIA,EAAa,KAAOA,GAAc,IACpC,MAAO,CAAE,KAAM,CAAgB,EAGjC,GAAIA,GAAc,KAAOA,EAAa,IACpC,OAAQA,EAAU,CAChB,IAAK,KACH,MAAO,CAAE,KAAM,EAAmB,QAAS,iBAAmB,EAChE,IAAK,KACH,MAAO,CAAE,KAAM,EAAmB,QAAS,mBAAqB,EAClE,IAAK,KACH,MAAO,CAAE,KAAM,EAAmB,QAAS,WAAa,EAC1D,IAAK,KACH,MAAO,CAAE,KAAM,EAAmB,QAAS,gBAAkB,EAC/D,IAAK,KACH,MAAO,CAAE,KAAM,EAAmB,QAAS,qBAAuB,EACpE,IAAK,KACH,MAAO,CAAE,KAAM,EAAmB,QAAS,oBAAsB,EACnE,IAAK,KACH,MAAO,CAAE,KAAM,EAAmB,QAAS,WAAa,EAC1D,QACE,MAAO,CAAE,KAAM,EAAmB,QAAS,kBAAoB,CACvE,CAGE,GAAIA,GAAc,KAAOA,EAAa,IACpC,OAAQA,EAAU,CAChB,IAAK,KACH,MAAO,CAAE,KAAM,EAAmB,QAAS,eAAiB,EAC9D,IAAK,KACH,MAAO,CAAE,KAAM,EAAmB,QAAS,aAAe,EAC5D,IAAK,KACH,MAAO,CAAE,KAAM,EAAmB,QAAS,mBAAqB,EAClE,QACE,MAAO,CAAE,KAAM,EAAmB,QAAS,gBAAkB,CACrE,CAGE,MAAO,CAAE,KAAM,EAAmB,QAAS,eAAiB,CAC9D,CAMA,SAASC,EAAcC,EAAMF,EAAY,CACvCE,EAAK,aAAa,4BAA6BF,CAAU,EAEzD,MAAMG,EAAaJ,EAA0BC,CAAU,EACnDG,EAAW,UAAY,iBACzBD,EAAK,UAAUC,CAAU,CAE7B","x_google_ignoreList":[0]}