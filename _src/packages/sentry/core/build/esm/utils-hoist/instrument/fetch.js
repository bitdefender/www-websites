import{isError as T,isRequest as E}from"../is.js";import{fill as w,addNonEnumerableProperty as F}from"../object.js";import{supportsNativeFetch as H}from"../supports.js";import{timestampInSeconds as u}from"../time.js";import{GLOBAL_OBJ as d}from"../worldwide.js";import{addHandler as h,maybeInstrument as p,triggerHandlers as m}from"./handlers.js";function A(t,e){const n="fetch";h(n,t),p(n,()=>y(void 0,e))}function N(t){const e="fetch-body-resolved";h(e,t),p(e,()=>y(k))}function y(t,e=!1){e&&!H()||w(d,"fetch",function(n){return function(...o){const c=new Error,{method:i,url:s}=R(o),a={args:o,fetchData:{method:i,url:s},startTimestamp:u()*1e3,virtualError:c,headers:v(o)};return t||m("fetch",{...a}),n.apply(d,o).then(async r=>(t?t(r):m("fetch",{...a,endTimestamp:u()*1e3,response:r}),r),r=>{if(m("fetch",{...a,endTimestamp:u()*1e3,error:r}),T(r)&&r.stack===void 0&&(r.stack=c.stack,F(r,"framesToPop",1)),r instanceof TypeError&&(r.message==="Failed to fetch"||r.message==="Load failed"||r.message==="NetworkError when attempting to fetch resource."))try{const g=new URL(a.fetchData.url);r.message=`${r.message} (${g.host})`}catch{}throw r})}})}async function b(t,e){if(t?.body){const n=t.body,o=n.getReader(),c=setTimeout(()=>{n.cancel().then(null,()=>{})},90*1e3);let i=!0;for(;i;){let s;try{s=setTimeout(()=>{n.cancel().then(null,()=>{})},5e3);const{done:a}=await o.read();clearTimeout(s),a&&(e(),i=!1)}catch{i=!1}finally{clearTimeout(s)}}clearTimeout(c),o.releaseLock(),n.cancel().then(null,()=>{})}}function k(t){let e;try{e=t.clone()}catch{return}b(e,()=>{m("fetch-body-resolved",{endTimestamp:u()*1e3,response:t})})}function l(t,e){return!!t&&typeof t=="object"&&!!t[e]}function f(t){return typeof t=="string"?t:t?l(t,"url")?t.url:t.toString?t.toString():"":""}function R(t){if(t.length===0)return{method:"GET",url:""};if(t.length===2){const[n,o]=t;return{url:f(n),method:l(o,"method")?String(o.method).toUpperCase():"GET"}}const e=t[0];return{url:f(e),method:l(e,"method")?String(e.method).toUpperCase():"GET"}}function v(t){const[e,n]=t;try{if(typeof n=="object"&&n!==null&&"headers"in n&&n.headers)return new Headers(n.headers);if(E(e))return new Headers(e.headers)}catch{}}export{N as addFetchEndInstrumentationHandler,A as addFetchInstrumentationHandler,R as parseFetchArgs};
//# sourceMappingURL=fetch.js.map
