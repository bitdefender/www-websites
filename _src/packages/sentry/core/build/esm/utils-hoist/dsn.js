import{DEBUG_BUILD as h}from"../debug-build.js";import{consoleSandbox as I,logger as a}from"./logger.js";const $=/^o(\d+)\./,m=/^(?:(\w+):)\/\/(?:(\w+)(?::(\w+)?)?@)([\w.-]+)(?::(\d+))?\/(.+)/;function D(t){return t==="http"||t==="https"}function S(t,r=!1){const{host:n,path:o,pass:i,port:c,projectId:e,protocol:l,publicKey:p}=t;return`${l}://${p}${r&&i?`:${i}`:""}@${n}${c?`:${c}`:""}/${o&&`${o}/`}${e}`}function y(t){const r=m.exec(t);if(!r){I(()=>{console.error(`Invalid Sentry Dsn: ${t}`)});return}const[n,o,i="",c="",e="",l=""]=r.slice(1);let p="",s=l;const u=s.split("/");if(u.length>1&&(p=u.slice(0,-1).join("/"),s=u.pop()),s){const d=s.match(/^\d+/);d&&(s=d[0])}return f({host:c,pass:i,path:p,projectId:s,port:e,protocol:n,publicKey:o})}function f(t){return{protocol:t.protocol,publicKey:t.publicKey||"",pass:t.pass||"",host:t.host,port:t.port||"",path:t.path||"",projectId:t.projectId}}function g(t){if(!h)return!0;const{port:r,projectId:n,protocol:o}=t;return["protocol","publicKey","host","projectId"].find(e=>t[e]?!1:(a.error(`Invalid Sentry Dsn: ${e} missing`),!0))?!1:n.match(/^\d+$/)?D(o)?r&&isNaN(parseInt(r,10))?(a.error(`Invalid Sentry Dsn: Invalid port ${r}`),!1):!0:(a.error(`Invalid Sentry Dsn: Invalid protocol ${o}`),!1):(a.error(`Invalid Sentry Dsn: Invalid projectId ${n}`),!1)}function b(t){return t.match($)?.[1]}function C(t){const r=typeof t=="string"?y(t):f(t);if(!(!r||!g(r)))return r}export{y as dsnFromString,S as dsnToString,b as extractOrgIdFromDsnHost,C as makeDsn};
//# sourceMappingURL=dsn.js.map
