const i="thismessage:/";function s(t){return"isRelative"in t}function c(t,e){const n=t.indexOf("://")<=0&&t.indexOf("//")!==0,r=n?i:void 0;try{if("canParse"in URL&&!URL.canParse(t,r))return;const a=new URL(t,r);return n?{isRelative:n,pathname:a.pathname,search:a.search,hash:a.hash}:a}catch{}}function o(t){if(s(t))return t.pathname;const e=new URL(t);return e.search="",e.hash="",["80","443"].includes(e.port)&&(e.port=""),e.password&&(e.password="%filtered%"),e.username&&(e.username="%filtered%"),e.toString()}function f(t){if(!t)return{};const e=t.match(/^(([^:/?#]+):)?(\/\/([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?$/);if(!e)return{};const n=e[6]||"",r=e[8]||"";return{host:e[4],path:e[5],protocol:e[2],search:n,hash:r,relative:e[5]+n+r}}function h(t){return t.split(/[?#]/,1)[0]}export{o as getSanitizedUrlStringFromUrlObject,s as isURLObjectRelative,c as parseStringToURLObject,f as parseUrl,h as stripUrlQueryAndFragment};
//# sourceMappingURL=url.js.map
