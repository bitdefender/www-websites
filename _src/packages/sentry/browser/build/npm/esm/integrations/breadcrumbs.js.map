{"version":3,"file":"breadcrumbs.js","sources":["../../../../../../../../node_modules/@sentry/browser/build/npm/esm/integrations/breadcrumbs.js"],"sourcesContent":["import { defineIntegration, addConsoleInstrumentationHandler, addFetchInstrumentationHandler, getClient, safeJoin, severityLevelFromString, addBreadcrumb, logger, htmlTreeAsString, getComponentName, getBreadcrumbLogLevelFromHttpStatusCode, parseUrl, getEventDescription } from '@sentry/core';\nimport { addClickKeypressInstrumentationHandler, addXhrInstrumentationHandler, addHistoryInstrumentationHandler, SENTRY_XHR_DATA_KEY } from '@sentry-internal/browser-utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW } from '../helpers.js';\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\n\nconst INTEGRATION_NAME = 'Breadcrumbs';\n\nconst _breadcrumbsIntegration = ((options = {}) => {\n  const _options = {\n    console: true,\n    dom: true,\n    fetch: true,\n    history: true,\n    sentry: true,\n    xhr: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      // TODO(v10): Remove this functionality and use `consoleIntegration` from @sentry/core instead.\n      if (_options.console) {\n        addConsoleInstrumentationHandler(_getConsoleBreadcrumbHandler(client));\n      }\n      if (_options.dom) {\n        addClickKeypressInstrumentationHandler(_getDomBreadcrumbHandler(client, _options.dom));\n      }\n      if (_options.xhr) {\n        addXhrInstrumentationHandler(_getXhrBreadcrumbHandler(client));\n      }\n      if (_options.fetch) {\n        addFetchInstrumentationHandler(_getFetchBreadcrumbHandler(client));\n      }\n      if (_options.history) {\n        addHistoryInstrumentationHandler(_getHistoryBreadcrumbHandler(client));\n      }\n      if (_options.sentry) {\n        client.on('beforeSendEvent', _getSentryBreadcrumbHandler(client));\n      }\n    },\n  };\n}) ;\n\nconst breadcrumbsIntegration = defineIntegration(_breadcrumbsIntegration);\n\n/**\n * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n */\nfunction _getSentryBreadcrumbHandler(client) {\n  return function addSentryBreadcrumb(event) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  };\n}\n\n/**\n * A HOC that creates a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _getDomBreadcrumbHandler(\n  client,\n  dom,\n) {\n  return function _innerDomBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    let target;\n    let componentName;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    let maxStringLength =\n      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        logger.warn(\n          `\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,\n        );\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event ;\n      const element = _isEvent(event) ? event.target : event;\n\n      target = htmlTreeAsString(element, { keyAttrs, maxStringLength });\n      componentName = getComponentName(element);\n    } catch (e) {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    const breadcrumb = {\n      category: `ui.${handlerData.name}`,\n      message: target,\n    };\n\n    if (componentName) {\n      breadcrumb.data = { 'ui.component_name': componentName };\n    }\n\n    addBreadcrumb(breadcrumb, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global,\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _getConsoleBreadcrumbHandler(client) {\n  return function _consoleBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: severityLevelFromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _getXhrBreadcrumbHandler(client) {\n  return function _xhrBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const { startTimestamp, endTimestamp } = handlerData;\n\n    const sentryXhrData = handlerData.xhr[SENTRY_XHR_DATA_KEY];\n\n    // We only capture complete, non-sentry requests\n    if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n      return;\n    }\n\n    const { method, url, status_code, body } = sentryXhrData;\n\n    const data = {\n      method,\n      url,\n      status_code,\n    };\n\n    const hint = {\n      xhr: handlerData.xhr,\n      input: body,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    const breadcrumb = {\n      category: 'xhr',\n      data,\n      type: 'http',\n      level: getBreadcrumbLogLevelFromHttpStatusCode(status_code),\n    };\n\n    client.emit('beforeOutgoingRequestBreadcrumb', breadcrumb, hint );\n\n    addBreadcrumb(breadcrumb, hint);\n  };\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _getFetchBreadcrumbHandler(client) {\n  return function _fetchBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const { startTimestamp, endTimestamp } = handlerData;\n\n    // We only capture complete fetch requests\n    if (!endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    ({\n      method: handlerData.fetchData.method,\n      url: handlerData.fetchData.url,\n    });\n\n    if (handlerData.error) {\n      const data = handlerData.fetchData;\n      const hint = {\n        data: handlerData.error,\n        input: handlerData.args,\n        startTimestamp,\n        endTimestamp,\n      };\n\n      const breadcrumb = {\n        category: 'fetch',\n        data,\n        level: 'error',\n        type: 'http',\n      } ;\n\n      client.emit('beforeOutgoingRequestBreadcrumb', breadcrumb, hint );\n\n      addBreadcrumb(breadcrumb, hint);\n    } else {\n      const response = handlerData.response ;\n      const data = {\n        ...handlerData.fetchData,\n        status_code: response?.status,\n      };\n\n      handlerData.fetchData.request_body_size;\n      handlerData.fetchData.response_body_size;\n      response?.status;\n\n      const hint = {\n        input: handlerData.args,\n        response,\n        startTimestamp,\n        endTimestamp,\n      };\n\n      const breadcrumb = {\n        category: 'fetch',\n        data,\n        type: 'http',\n        level: getBreadcrumbLogLevelFromHttpStatusCode(data.status_code),\n      };\n\n      client.emit('beforeOutgoingRequestBreadcrumb', breadcrumb, hint );\n\n      addBreadcrumb(breadcrumb, hint);\n    }\n  };\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _getHistoryBreadcrumbHandler(client) {\n  return function _historyBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(WINDOW.location.href);\n    let parsedFrom = from ? parseUrl(from) : undefined;\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom?.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  };\n}\n\nfunction _isEvent(event) {\n  return !!event && !!(event ).target;\n}\n\nexport { breadcrumbsIntegration };\n//# sourceMappingURL=breadcrumbs.js.map\n"],"names":["MAX_ALLOWED_STRING_LENGTH","INTEGRATION_NAME","_breadcrumbsIntegration","options","_options","client","addConsoleInstrumentationHandler","_getConsoleBreadcrumbHandler","addClickKeypressInstrumentationHandler","_getDomBreadcrumbHandler","addXhrInstrumentationHandler","_getXhrBreadcrumbHandler","addFetchInstrumentationHandler","_getFetchBreadcrumbHandler","addHistoryInstrumentationHandler","_getHistoryBreadcrumbHandler","_getSentryBreadcrumbHandler","breadcrumbsIntegration","defineIntegration","event","getClient","addBreadcrumb","getEventDescription","dom","handlerData","target","componentName","keyAttrs","maxStringLength","DEBUG_BUILD","logger","element","_isEvent","htmlTreeAsString","getComponentName","breadcrumb","severityLevelFromString","safeJoin","startTimestamp","endTimestamp","sentryXhrData","SENTRY_XHR_DATA_KEY","method","url","status_code","body","data","hint","getBreadcrumbLogLevelFromHttpStatusCode","response","from","to","parsedLoc","parseUrl","WINDOW","parsedFrom","parsedTo"],"mappings":"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","x_google_ignoreList":[0]}