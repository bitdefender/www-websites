{"version":3,"file":"globalhandlers.js","sources":["../../../../../../../../node_modules/@sentry/browser/build/npm/esm/integrations/globalhandlers.js"],"sourcesContent":["import { defineIntegration, addGlobalErrorInstrumentationHandler, getClient, captureEvent, logger, addGlobalUnhandledRejectionInstrumentationHandler, isPrimitive, isString, getLocationHref, UNKNOWN_FUNCTION } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { eventFromUnknownInput } from '../eventbuilder.js';\nimport { shouldIgnoreOnError } from '../helpers.js';\n\nconst INTEGRATION_NAME = 'GlobalHandlers';\n\nconst _globalHandlersIntegration = ((options = {}) => {\n  const _options = {\n    onerror: true,\n    onunhandledrejection: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      Error.stackTraceLimit = 50;\n    },\n    setup(client) {\n      if (_options.onerror) {\n        _installGlobalOnErrorHandler(client);\n        globalHandlerLog('onerror');\n      }\n      if (_options.onunhandledrejection) {\n        _installGlobalOnUnhandledRejectionHandler(client);\n        globalHandlerLog('onunhandledrejection');\n      }\n    },\n  };\n}) ;\n\nconst globalHandlersIntegration = defineIntegration(_globalHandlersIntegration);\n\nfunction _installGlobalOnErrorHandler(client) {\n  addGlobalErrorInstrumentationHandler(data => {\n    const { stackParser, attachStacktrace } = getOptions();\n\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n\n    const { msg, url, line, column, error } = data;\n\n    const event = _enhanceEventWithInitialFrame(\n      eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n      url,\n      line,\n      column,\n    );\n\n    event.level = 'error';\n\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onerror',\n      },\n    });\n  });\n}\n\nfunction _installGlobalOnUnhandledRejectionHandler(client) {\n  addGlobalUnhandledRejectionInstrumentationHandler(e => {\n    const { stackParser, attachStacktrace } = getOptions();\n\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n\n    const error = _getUnhandledRejectionError(e );\n\n    const event = isPrimitive(error)\n      ? _eventFromRejectionWithPrimitive(error)\n      : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n    event.level = 'error';\n\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n  });\n}\n\nfunction _getUnhandledRejectionError(error) {\n  if (isPrimitive(error)) {\n    return error;\n  }\n\n  // dig the object of the rejection out of known event types\n  try {\n\n    // PromiseRejectionEvents store the object of the rejection under 'reason'\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n    if ('reason' in (error )) {\n      return (error ).reason;\n    }\n\n    // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n    // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n    // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n    // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n    // https://github.com/getsentry/sentry-javascript/issues/2380\n    if ('detail' in (error ) && 'reason' in (error ).detail) {\n      return (error ).detail.reason;\n    }\n  } catch {} // eslint-disable-line no-empty\n\n  return error;\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason) {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\nfunction _enhanceEventWithInitialFrame(\n  event,\n  url,\n  line,\n  column,\n) {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = column;\n  const lineno = line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: UNKNOWN_FUNCTION,\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type) {\n  DEBUG_BUILD && logger.log(`Global Handler attached: ${type}`);\n}\n\nfunction getOptions() {\n  const client = getClient();\n  const options = client?.getOptions() || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return options;\n}\n\nexport { globalHandlersIntegration };\n//# sourceMappingURL=globalhandlers.js.map\n"],"names":["INTEGRATION_NAME","_globalHandlersIntegration","options","_options","client","_installGlobalOnErrorHandler","globalHandlerLog","_installGlobalOnUnhandledRejectionHandler","globalHandlersIntegration","defineIntegration","addGlobalErrorInstrumentationHandler","data","stackParser","attachStacktrace","getOptions","getClient","shouldIgnoreOnError","msg","url","line","column","error","event","_enhanceEventWithInitialFrame","eventFromUnknownInput","captureEvent","addGlobalUnhandledRejectionInstrumentationHandler","_getUnhandledRejectionError","isPrimitive","_eventFromRejectionWithPrimitive","reason","e","ev","ev0","ev0s","ev0sf","colno","lineno","filename","isString","getLocationHref","UNKNOWN_FUNCTION","type","DEBUG_BUILD","logger"],"mappings":"8+BAKA,MAAMA,EAAmB,iBAEnBC,EAA8B,CAACC,EAAU,KAAO,CACpD,MAAMC,EAAW,CACf,QAAS,GACT,qBAAsB,GACtB,GAAGD,CACJ,EAED,MAAO,CACL,KAAMF,EACN,WAAY,CACV,MAAM,gBAAkB,EACzB,EACD,MAAMI,EAAQ,CACRD,EAAS,UACXE,EAA6BD,CAAM,EACnCE,EAAiB,SAAS,GAExBH,EAAS,uBACXI,EAA0CH,CAAM,EAChDE,EAAiB,sBAAsB,EAE1C,CACF,CACH,EAEME,EAA4BC,EAAkBR,CAA0B,EAE9E,SAASI,EAA6BD,EAAQ,CAC5CM,EAAqCC,GAAQ,CAC3C,KAAM,CAAE,YAAAC,EAAa,iBAAAC,CAAkB,EAAGC,EAAY,EAEtD,GAAIC,EAAW,IAAKX,GAAUY,IAC5B,OAGF,KAAM,CAAE,IAAAC,EAAK,IAAAC,EAAK,KAAAC,EAAM,OAAAC,EAAQ,MAAAC,CAAK,EAAKV,EAEpCW,EAAQC,EACZC,EAAsBZ,EAAaS,GAASJ,EAAK,OAAWJ,EAAkB,EAAK,EACnFK,EACAC,EACAC,CACD,EAEDE,EAAM,MAAQ,QAEdG,EAAaH,EAAO,CAClB,kBAAmBD,EACnB,UAAW,CACT,QAAS,GACT,KAAM,SACP,CACP,CAAK,CACL,CAAG,CACH,CAEA,SAASd,EAA0CH,EAAQ,CACzDsB,EAAkD,GAAK,CACrD,KAAM,CAAE,YAAAd,EAAa,iBAAAC,CAAkB,EAAGC,EAAY,EAEtD,GAAIC,EAAW,IAAKX,GAAUY,IAC5B,OAGF,MAAMK,EAAQM,EAA4B,CAAG,EAEvCL,EAAQM,EAAYP,CAAK,EAC3BQ,EAAiCR,CAAK,EACtCG,EAAsBZ,EAAaS,EAAO,OAAWR,EAAkB,EAAI,EAE/ES,EAAM,MAAQ,QAEdG,EAAaH,EAAO,CAClB,kBAAmBD,EACnB,UAAW,CACT,QAAS,GACT,KAAM,sBACP,CACP,CAAK,CACL,CAAG,CACH,CAEA,SAASM,EAA4BN,EAAO,CAC1C,GAAIO,EAAYP,CAAK,EACnB,OAAOA,EAIT,GAAI,CAIF,GAAI,WAAaA,EACf,OAAQA,EAAQ,OAQlB,GAAI,WAAaA,GAAW,WAAaA,EAAQ,OAC/C,OAAQA,EAAQ,OAAO,MAE1B,MAAO,CAAE,CAEV,OAAOA,CACT,CAQA,SAASQ,EAAiCC,EAAQ,CAChD,MAAO,CACL,UAAW,CACT,OAAQ,CACN,CACE,KAAM,qBAEN,MAAO,oDAAoD,OAAOA,CAAM,CAAC,EAC1E,CACF,CACF,CACF,CACH,CAEA,SAASP,EACPD,EACAJ,EACAC,EACAC,EACA,CAEA,MAAMW,EAAKT,EAAM,UAAYA,EAAM,WAAa,CAAA,EAE1CU,EAAMD,EAAE,OAASA,EAAE,QAAU,CAAA,EAE7BE,EAAOD,EAAG,CAAC,EAAIA,EAAG,CAAC,GAAK,GAExBE,EAAQD,EAAI,WAAaA,EAAI,YAAc,CAAA,EAE3CE,EAASD,EAAK,OAASA,EAAK,QAAU,CAAA,EAEtCE,EAAQhB,EACRiB,EAASlB,EACTmB,EAAWC,EAASrB,CAAG,GAAKA,EAAI,OAAS,EAAIA,EAAMsB,EAAiB,EAG1E,OAAIL,EAAM,SAAW,GACnBA,EAAM,KAAK,CACT,MAAAC,EACA,SAAAE,EACA,SAAUG,EACV,OAAQ,GACR,OAAAJ,CACN,CAAK,EAGIf,CACT,CAEA,SAAShB,EAAiBoC,EAAM,CAC9BC,GAAeC,EAAO,IAAI,4BAA4BF,CAAI,EAAE,CAC9D,CAEA,SAAS5B,GAAa,CAMpB,OALeC,EAAW,GACF,cAAgB,CACtC,YAAa,IAAM,CAAE,EACrB,iBAAkB,EACnB,CAEH","x_google_ignoreList":[0]}