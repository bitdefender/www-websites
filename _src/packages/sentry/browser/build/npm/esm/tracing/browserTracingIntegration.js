import{DEBUG_BUILD as N}from"../debug-build.js";import{WINDOW as p}from"../helpers.js";import{registerBackgroundTabDetection as K}from"./backgroundtab.js";import{linkTraces as Q}from"./linkedTraces.js";import{defaultRequestInstrumentationOptions as Z,instrumentOutgoingRequests as ee}from"./request.js";import{consoleSandbox as te,logger as R}from"../../../../../core/build/esm/utils-hoist/logger.js";import{registerSpanErrorInstrumentation as ne}from"../../../../../core/build/esm/tracing/errors.js";import{TRACING_DEFAULTS as ae,startIdleSpan as x}from"../../../../../core/build/esm/tracing/idleSpan.js";import{startTrackingWebVitals as re,startTrackingLongAnimationFrames as oe,startTrackingLongTasks as ie,startTrackingInteractions as se,addPerformanceEntries as ce}from"../../../../../../sentry-internal/browser-utils/build/esm/metrics/browserMetrics.js";import{startTrackingINP as me,registerInpInteractionListener as pe}from"../../../../../../sentry-internal/browser-utils/build/esm/metrics/inp.js";import{GLOBAL_OBJ as ue}from"../../../../../core/build/esm/utils-hoist/worldwide.js";import{getLocationHref as de}from"../../../../../core/build/esm/utils-hoist/browser.js";import{getClient as O,getIsolationScope as ge,getCurrentScope as l}from"../../../../../core/build/esm/currentScopes.js";import{generateTraceId as h}from"../../../../../core/build/esm/utils-hoist/propagationContext.js";import{propagationContextFromHeaders as fe}from"../../../../../core/build/esm/utils-hoist/tracing.js";import{browserPerformanceTimeOrigin as le}from"../../../../../core/build/esm/utils-hoist/time.js";import{addHistoryInstrumentationHandler as Te}from"../../../../../../sentry-internal/browser-utils/build/esm/instrument/history.js";import{spanToJSON as C,spanIsSampled as Se}from"../../../../../core/build/esm/utils/spanUtils.js";import{SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON as F,SEMANTIC_ATTRIBUTE_SENTRY_SOURCE as f,SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN as w}from"../../../../../core/build/esm/semanticAttributes.js";import{addNonEnumerableProperty as Ie}from"../../../../../core/build/esm/utils-hoist/object.js";import{getDynamicSamplingContextFromSpan as be}from"../../../../../core/build/esm/tracing/dynamicSamplingContext.js";const _e="BrowserTracing",Ee={...ae,instrumentNavigation:!0,instrumentPageLoad:!0,markBackgroundSpan:!0,enableLongTask:!0,enableLongAnimationFrame:!0,enableInp:!0,linkPreviousTrace:"in-memory",consistentTraceSampling:!1,_experiments:{},...Z};let y=!1;const Ve=(n={})=>{y&&te(()=>{console.warn("Multiple browserTracingIntegration instances are not supported.")}),y=!0;const a=p.document;ne();const{enableInp:s,enableLongTask:P,enableLongAnimationFrame:u,_experiments:{enableInteractions:T,enableStandaloneClsSpans:o},beforeStartSpan:S,idleTimeout:c,finalTimeout:d,childSpanTimeout:I,markBackgroundSpan:U,traceFetch:G,traceXHR:H,trackFetchStreamPerformance:M,shouldCreateSpanForRequest:q,enableHTTPTimings:Y,instrumentPageLoad:$,instrumentNavigation:V,linkPreviousTrace:v,consistentTraceSampling:J,onRequestSpanStart:z}={...Ee,...n},X=re({recordClsStandaloneSpans:o||!1});s&&me(),u&&ue.PerformanceObserver&&PerformanceObserver.supportedEntryTypes&&PerformanceObserver.supportedEntryTypes.includes("long-animation-frame")?oe():P&&ie(),T&&se();const A={name:void 0,source:void 0};function L(t,i){const g=i.op==="pageload",e=S?S(i):i,r=e.attributes||{};i.name!==e.name&&(r[f]="custom",e.attributes=r),A.name=e.name,A.source=r[f];const m=x(e,{idleTimeout:c,finalTimeout:d,childSpanTimeout:I,disableAutoFinish:g,beforeSpanEnd:_=>{X(),ce(_,{recordClsOnPageloadSpan:!o}),D(t,void 0);const k=l(),j=k.getPropagationContext();k.setPropagationContext({...j,traceId:m.spanContext().traceId,sampled:Se(m),dsc:be(_)})}});D(t,m);function b(){a&&["interactive","complete"].includes(a.readyState)&&t.emit("idleSpanEnableAutoFinish",m)}g&&a&&(a.addEventListener("readystatechange",()=>{b()}),b())}return{name:_e,afterAllSetup(t){let i=de();function g(){const e=E(t);e&&!C(e).timestamp&&(N&&R.log(`[Tracing] Finishing current active span with op: ${C(e).op}`),e.setAttribute(F,"cancelled"),e.end())}if(t.on("startNavigationSpan",e=>{O()===t&&(g(),ge().setPropagationContext({traceId:h(),sampleRand:Math.random()}),l().setPropagationContext({traceId:h(),sampleRand:Math.random()}),L(t,{op:"navigation",...e}))}),t.on("startPageLoadSpan",(e,r={})=>{if(O()!==t)return;g();const m=r.sentryTrace||B("sentry-trace"),b=r.baggage||B("baggage"),_=fe(m,b);l().setPropagationContext(_),L(t,{op:"pageload",...e})}),v!=="off"&&Q(t,{linkPreviousTrace:v,consistentTraceSampling:J}),p.location){if($){const e=le();Pe(t,{name:p.location.pathname,startTime:e?e/1e3:void 0,attributes:{[f]:"url",[w]:"auto.pageload.browser"}})}V&&Te(({to:e,from:r})=>{if(r===void 0&&i?.indexOf(e)!==-1){i=void 0;return}r!==e&&(i=void 0,Ae(t,{name:p.location.pathname,attributes:{[f]:"url",[w]:"auto.navigation.browser"}}))})}U&&K(),T&&Ne(t,c,d,I,A),s&&pe(),ee(t,{traceFetch:G,traceXHR:H,trackFetchStreamPerformance:M,tracePropagationTargets:t.getOptions().tracePropagationTargets,shouldCreateSpanForRequest:q,enableHTTPTimings:Y,onRequestSpanStart:z})}}};function Pe(n,a,s){return n.emit("startPageLoadSpan",a,s),l().setTransactionName(a.name),E(n)}function Ae(n,a){return n.emit("startNavigationSpan",a),l().setTransactionName(a.name),E(n)}function B(n){return p.document?.querySelector(`meta[name=${n}]`)?.getAttribute("content")||void 0}function Ne(n,a,s,P,u){const T=p.document;let o;const S=()=>{const c="ui.action.click",d=E(n);if(d){const I=C(d).op;if(["navigation","pageload"].includes(I)){N&&R.warn(`[Tracing] Did not create ${c} span because a pageload or navigation span is in progress.`);return}}if(o&&(o.setAttribute(F,"interactionInterrupted"),o.end(),o=void 0),!u.name){N&&R.warn(`[Tracing] Did not create ${c} transaction because _latestRouteName is missing.`);return}o=x({name:u.name,op:c,attributes:{[f]:u.source||"url"}},{idleTimeout:a,finalTimeout:s,childSpanTimeout:P})};T&&addEventListener("click",S,{once:!1,capture:!0})}const W="_sentry_idleSpan";function E(n){return n[W]}function D(n,a){Ie(n,W,a)}export{_e as BROWSER_TRACING_INTEGRATION_ID,Ve as browserTracingIntegration,B as getMetaContent,Ae as startBrowserTracingNavigationSpan,Pe as startBrowserTracingPageLoadSpan};
//# sourceMappingURL=browserTracingIntegration.js.map
