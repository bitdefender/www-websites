import{eventFromException as c,eventFromMessage as m}from"./eventbuilder.js";import{WINDOW as r}from"./helpers.js";import{Client as u}from"../../../../core/build/esm/client.js";import{applySdkMetadata as l}from"../../../../core/build/esm/utils/sdkMetadata.js";import{_INTERNAL_flushLogsBuffer as i}from"../../../../core/build/esm/logs/exports.js";import{addAutoIpAddressToUser as d,addAutoIpAddressToSession as f}from"../../../../core/build/esm/utils/ipAddress.js";import{getSDKSource as _}from"../../../../core/build/esm/utils-hoist/env.js";const h=5e3;class A extends u{constructor(e){const o={parentSpanIsAlwaysRootSpan:!0,...e},s=r.SENTRY_SDK_SOURCE||_();l(o,"browser",["browser"],s),super(o);const t=this,{sendDefaultPii:a,_experiments:p}=t._options,n=p?.enableLogs;o.sendClientReports&&r.document&&r.document.addEventListener("visibilitychange",()=>{r.document.visibilityState==="hidden"&&(this._flushOutcomes(),n&&i(t))}),n&&(t.on("flush",()=>{i(t)}),t.on("afterCaptureLog",()=>{t._logFlushIdleTimeout&&clearTimeout(t._logFlushIdleTimeout),t._logFlushIdleTimeout=setTimeout(()=>{i(t)},h)})),a&&(t.on("postprocessEvent",d),t.on("beforeSendSession",f))}eventFromException(e,o){return c(this._options.stackParser,e,o,this._options.attachStacktrace)}eventFromMessage(e,o="info",s){return m(this._options.stackParser,e,o,s,this._options.attachStacktrace)}_prepareEvent(e,o,s,t){return e.platform=e.platform||"javascript",super._prepareEvent(e,o,s,t)}}export{A as BrowserClient};
//# sourceMappingURL=client.js.map
