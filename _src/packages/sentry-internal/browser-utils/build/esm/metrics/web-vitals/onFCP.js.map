{"version":3,"file":"onFCP.js","sources":["../../../../../../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/onFCP.js"],"sourcesContent":["import { bindReporter } from './lib/bindReporter.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { whenActivated } from './lib/whenActivated.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Thresholds for FCP. See https://web.dev/articles/fcp#what_is_a_good_fcp_score */\nconst FCPThresholds = [1800, 3000];\n\n/**\n * Calculates the [FCP](https://web.dev/articles/fcp) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `paint` performance entry used to determine the value. The reported\n * value is a `DOMHighResTimeStamp`.\n */\nconst onFCP = (onReport, opts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('FCP');\n    let report;\n\n    const handleEntries = (entries) => {\n      entries.forEach(entry => {\n        if (entry.name === 'first-contentful-paint') {\n          po.disconnect();\n\n          // Only report if the page wasn't hidden prior to the first paint.\n          if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n            // The activationStart reference is used because FCP should be\n            // relative to page activation rather than navigation start if the\n            // page was prerendered. But in cases where `activationStart` occurs\n            // after the FCP, this time should be clamped at 0.\n            metric.value = Math.max(entry.startTime - getActivationStart(), 0);\n            metric.entries.push(entry);\n            report(true);\n          }\n        }\n      });\n    };\n\n    const po = observe('paint', handleEntries);\n\n    if (po) {\n      report = bindReporter(onReport, metric, FCPThresholds, opts.reportAllChanges);\n    }\n  });\n};\n\nexport { FCPThresholds, onFCP };\n//# sourceMappingURL=onFCP.js.map\n"],"names":["FCPThresholds","onFCP","onReport","opts","whenActivated","visibilityWatcher","getVisibilityWatcher","metric","initMetric","report","po","observe","entries","entry","getActivationStart","bindReporter"],"mappings":"8UAyBK,MAACA,EAAgB,CAAC,KAAM,GAAI,EAQ3BC,EAAQ,CAACC,EAAUC,EAAO,KAAO,CACrCC,EAAc,IAAM,CAClB,MAAMC,EAAoBC,EAAsB,EAC1CC,EAASC,EAAW,KAAK,EAC/B,IAAIC,EAqBJ,MAAMC,EAAKC,EAAQ,QAnBIC,GAAY,CACjCA,EAAQ,QAAQC,GAAS,CACnBA,EAAM,OAAS,2BACjBH,EAAG,WAAY,EAGXG,EAAM,UAAYR,EAAkB,kBAKtCE,EAAO,MAAQ,KAAK,IAAIM,EAAM,UAAYC,EAAoB,EAAE,CAAC,EACjEP,EAAO,QAAQ,KAAKM,CAAK,EACzBJ,EAAO,EAAI,GAGvB,CAAO,CACF,CAEwC,EAErCC,IACFD,EAASM,EAAab,EAAUK,EAAQP,EAAeG,EAAK,gBAAgB,EAElF,CAAG,CACH","x_google_ignoreList":[0]}