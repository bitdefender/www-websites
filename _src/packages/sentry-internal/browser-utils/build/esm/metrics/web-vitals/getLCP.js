import{WINDOW as f}from"../../types.js";import{bindReporter as p}from"./lib/bindReporter.js";import{getActivationStart as d}from"./lib/getActivationStart.js";import{getVisibilityWatcher as l}from"./lib/getVisibilityWatcher.js";import{initMetric as h}from"./lib/initMetric.js";import{observe as u}from"./lib/observe.js";import{onHidden as g}from"./lib/onHidden.js";import{runOnce as v}from"./lib/runOnce.js";import{whenActivated as C}from"./lib/whenActivated.js";import{whenIdle as L}from"./lib/whenIdle.js";const b=[2500,4e3],m={},D=(s,n={})=>{C(()=>{const a=l(),r=h("LCP");let o;const c=t=>{n.reportAllChanges||(t=t.slice(-1)),t.forEach(e=>{e.startTime<a.firstHiddenTime&&(r.value=Math.max(e.startTime-d(),0),r.entries=[e],o())})},i=u("largest-contentful-paint",c);if(i){o=p(s,r,b,n.reportAllChanges);const t=v(()=>{m[r.id]||(c(i.takeRecords()),i.disconnect(),m[r.id]=!0,o(!0))});["keydown","click"].forEach(e=>{f.document&&addEventListener(e,()=>L(t),{once:!0,capture:!0})}),g(t)}})};export{b as LCPThresholds,D as onLCP};
//# sourceMappingURL=getLCP.js.map
