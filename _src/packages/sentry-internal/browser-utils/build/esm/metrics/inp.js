import{addPerformanceInstrumentationHandler as T,addInpInstrumentationHandler as _,isPerformanceEventTiming as A}from"./instrument.js";import{getBrowserPerformanceAPI as h,msToSec as m,startStandaloneWebVitalSpan as R}from"./utils.js";import{browserPerformanceTimeOrigin as l}from"../../../../../sentry/core/build/esm/utils-hoist/time.js";import{getActiveSpan as E,getRootSpan as I,spanToJSON as k}from"../../../../../sentry/core/build/esm/utils/spanUtils.js";import{getCurrentScope as M}from"../../../../../sentry/core/build/esm/currentScopes.js";import{htmlTreeAsString as P}from"../../../../../sentry/core/build/esm/utils-hoist/browser.js";import{SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME as U,SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE as C,SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT as w,SEMANTIC_ATTRIBUTE_SENTRY_OP as B,SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN as O}from"../../../../../sentry/core/build/esm/semanticAttributes.js";const p=[],s=new Map;function J(){if(h()&&l()){const e=b();return()=>{e()}}return()=>{}}const f={click:"click",pointerdown:"click",pointerup:"click",mousedown:"click",mouseup:"click",touchstart:"click",touchend:"click",mouseover:"hover",mouseout:"hover",mouseenter:"hover",mouseleave:"hover",pointerover:"hover",pointerout:"hover",pointerenter:"hover",pointerleave:"hover",dragstart:"drag",dragend:"drag",drag:"drag",dragenter:"drag",dragleave:"drag",dragover:"drag",drop:"drag",keydown:"press",keyup:"press",keypress:"press",input:"press"};function b(){return _(({metric:n})=>{if(n.value==null)return;const e=n.entries.find(u=>u.duration===n.value&&f[u.name]);if(!e)return;const{interactionId:r}=e,a=f[e.name],o=m(l()+e.startTime),t=m(n.value),i=E(),S=i?I(i):void 0,d=(r!=null?s.get(r):void 0)||S,g=d?k(d).description:M().getScopeData().transactionName,v=P(e.target),N={[O]:"auto.http.browser.inp",[B]:`ui.interaction.${a}`,[U]:e.duration},c=R({name:v,transaction:g,attributes:N,startTime:o});c&&(c.addEvent("inp",{[w]:"millisecond",[C]:n.value}),c.end(o+t))})}function W(){const n=({entries:e})=>{const r=E(),a=r&&I(r);e.forEach(o=>{if(!A(o)||!a)return;const t=o.interactionId;if(t!=null&&!s.has(t)){if(p.length>10){const i=p.shift();s.delete(i)}p.push(t),s.set(t,a)}})};T("event",n),T("first-input",n)}export{W as registerInpInteractionListener,J as startTrackingINP};
//# sourceMappingURL=inp.js.map
