{"version":3,"file":"history.js","sources":["../../../../../../../node_modules/@sentry-internal/browser-utils/build/esm/instrument/history.js"],"sourcesContent":["import { addHandler, maybeInstrument, triggerHandlers, supportsHistory, fill } from '@sentry/core';\nimport { WINDOW } from '../types.js';\n\nlet lastHref;\n\n/**\n * Add an instrumentation handler for when a fetch request happens.\n * The handler function is called once when the request starts and once when it ends,\n * which can be identified by checking if it has an `endTimestamp`.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addHistoryInstrumentationHandler(handler) {\n  const type = 'history';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentHistory);\n}\n\n/**\n * Exported just for testing\n */\nfunction instrumentHistory() {\n  // The `popstate` event may also be triggered on `pushState`, but it may not always reliably be emitted by the browser\n  // Which is why we also monkey-patch methods below, in addition to this\n  WINDOW.addEventListener('popstate', () => {\n    const to = WINDOW.location.href;\n    // keep track of the current URL state, as we always receive only the updated state\n    const from = lastHref;\n    lastHref = to;\n\n    if (from === to) {\n      return;\n    }\n\n    const handlerData = { from, to } ;\n    triggerHandlers('history', handlerData);\n  });\n\n  // Just guard against this not being available, in weird environments\n  if (!supportsHistory()) {\n    return;\n  }\n\n  function historyReplacementFunction(originalHistoryFunction) {\n    return function ( ...args) {\n      const url = args.length > 2 ? args[2] : undefined;\n      if (url) {\n        // coerce to string (this is what pushState does)\n        const from = lastHref;\n        const to = String(url);\n        // keep track of the current URL state, as we always receive only the updated state\n        lastHref = to;\n\n        if (from === to) {\n          return originalHistoryFunction.apply(this, args);\n        }\n\n        const handlerData = { from, to } ;\n        triggerHandlers('history', handlerData);\n      }\n      return originalHistoryFunction.apply(this, args);\n    };\n  }\n\n  fill(WINDOW.history, 'pushState', historyReplacementFunction);\n  fill(WINDOW.history, 'replaceState', historyReplacementFunction);\n}\n\nexport { addHistoryInstrumentationHandler, instrumentHistory };\n//# sourceMappingURL=history.js.map\n"],"names":["lastHref","addHistoryInstrumentationHandler","handler","type","addHandler","maybeInstrument","instrumentHistory","WINDOW","to","from","triggerHandlers","supportsHistory","historyReplacementFunction","originalHistoryFunction","args","url","fill"],"mappings":"qWAGA,IAAIA,EAUJ,SAASC,EAAiCC,EAAS,CACjD,MAAMC,EAAO,UACbC,EAAWD,EAAMD,CAAO,EACxBG,EAAgBF,EAAMG,CAAiB,CACzC,CAKA,SAASA,GAAoB,CAkB3B,GAfAC,EAAO,iBAAiB,WAAY,IAAM,CACxC,MAAMC,EAAKD,EAAO,SAAS,KAErBE,EAAOT,EAGb,GAFAA,EAAWQ,EAEPC,IAASD,EACX,OAIFE,EAAgB,UADI,CAAE,KAAAD,EAAM,GAAAD,CAAI,CACM,CAC1C,CAAG,EAGG,CAACG,EAAe,EAClB,OAGF,SAASC,EAA2BC,EAAyB,CAC3D,OAAO,YAAcC,EAAM,CACzB,MAAMC,EAAMD,EAAK,OAAS,EAAIA,EAAK,CAAC,EAAI,OACxC,GAAIC,EAAK,CAEP,MAAMN,EAAOT,EACPQ,EAAK,OAAOO,CAAG,EAIrB,GAFAf,EAAWQ,EAEPC,IAASD,EACX,OAAOK,EAAwB,MAAM,KAAMC,CAAI,EAIjDJ,EAAgB,UADI,CAAE,KAAAD,EAAM,GAAAD,CAAI,CACM,CAC9C,CACM,OAAOK,EAAwB,MAAM,KAAMC,CAAI,CAChD,CACL,CAEEE,EAAKT,EAAO,QAAS,YAAaK,CAA0B,EAC5DI,EAAKT,EAAO,QAAS,eAAgBK,CAA0B,CACjE","x_google_ignoreList":[0]}