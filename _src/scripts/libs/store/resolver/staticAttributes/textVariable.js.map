{"version":3,"file":"textVariable.js","sources":["../../../../../../src/scripts/libs/store/resolver/staticAttributes/textVariable.js"],"sourcesContent":["/**\n * @param {string} hideCondition\n * @param {import(\"../resolver\").Context} context\n * @returns {boolean} if the hiding condition is true, the text will be hidden otherwise it will still be displayed\n */\nconst checkHidingCondition = (hideCondition, {option}) => {\n\n    if (!hideCondition) {\n        return false;\n    }\n\n    switch (hideCondition) {\n        case ('no-price'):\n            return !Boolean(option.getPrice());\n        case ('no-price-discounted'):\n            return !Boolean(option.getDiscountedPrice());\n        default:\n            return true;\n    }\n};\n\n/**\n *\n * @param {string} text\n * @param {import(\"../resolver\").Context} context\n * @param {string[]} variableParameters\n * @param {string} textVariable\n * @returns {string} returns the initial text with the replaced variable or the actual initial text when the variable cannot be replaced\n */\nconst replaceVariable = (text, context, variableParameters, textVariable) => {\n\n    let stopVariableSearch = false;\n\n    for (const variableParameter of variableParameters) {\n        switch (variableParameter) {\n            case \"DEVICES\":\n                text = text.replaceAll(textVariable, context.option.getDevices());\n                stopVariableSearch = true;\n                break;\n            case \"YEARS\":\n                text = text.replaceAll(textVariable, context.option.getSubscription(\"years\"));\n                stopVariableSearch = true;\n                break;\n            case \"PRICE_FULL\":\n                if (!context.option.getPrice(\"valueWithCurrency\")) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, context.option.getPrice(\"valueWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"PRICE_DISCOUNTED\":\n                if (!context.option.getDiscountedPrice(\"valueWithCurrency\")) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, context.option.getDiscountedPrice(\"valueWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"PRICE_FULL_MONTHLY\":\n                if (!context.option.getPrice(\"monthlyWithCurrency\")) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, context.option.getPrice(\"monthlyWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"PRICE_DISCOUNTED_MONTHLY\":\n                if (!context.option.getDiscountedPrice(\"monthlyWithCurrency\")) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, context.option.getDiscountedPrice(\"monthlyWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"DISCOUNT_PERCENTAGE\":\n                if (!context.option.getDiscount(\"percentageWithProcent\")) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, context.option.getDiscount(\"percentageWithProcent\"));\n                stopVariableSearch = true;\n                break;\n            case \"DISCOUNT_VALUE\":\n                if (!context.option.getDiscount(\"valueWithCurrency\")) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, context.option.getDiscount(\"valueWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"SMALLEST_PRICE\":\n                {\n                    let smallestPrice = Number.MAX_SAFE_INTEGER;\n                    let currency = \"\";\n\n                    if (context.contexts.length === 0) { break; }\n\n                    for (const { product } of context.contexts) {\n                        const productSmallestPrice = product.getSmallestPrice(\"value\");\n                        if (productSmallestPrice && productSmallestPrice < smallestPrice) {\n                            smallestPrice = productSmallestPrice;\n                            currency = product.getCurrency();\n                        }\n                    }\n\n                    if (smallestPrice === Number.MAX_SAFE_INTEGER) { break; }\n\n                    text = text.replaceAll(textVariable, Store.placeSymbol(smallestPrice, currency));\n                    stopVariableSearch = true;\n                    break;\n                }\n            case \"SMALLEST_PRICE_PER_MONTH\":\n                let smallestPrice = Number.MAX_SAFE_INTEGER;\n                let currency = \"\";\n                if (context.contextProducts.length === 0) {\n                    break;\n                }\n                \n                for (const contextProduct of context.contextProducts) {\n                    const productSmallestPrice = contextProduct.getSmallestPrice(\"monthly\");\n                    if (productSmallestPrice && productSmallestPrice < smallestPrice) {\n                        smallestPrice = productSmallestPrice;\n                        currency = contextProduct.getCurrency();\n                    }\n                }\n                if (smallestPrice === Number.MAX_SAFE_INTEGER) { break; }\n\n                text = text.replaceAll(textVariable, Store.placeSymbol(smallestPrice, currency));\n                stopVariableSearch = true;\n                break;\n            case \"SERVER_NUMBER\":\n            case \"MAIL_BOX_NUMBER\":\n                const discount = variableParameters.find(variableParameter => variableParameter.includes(\"DISCOUNT=\"))?.split(\"=\")[1];\n                if (!discount && !Number(discount)) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, Math.ceil(context.option.getDevices() * Number(discount) / 100));\n                stopVariableSearch = true;\n                break;\n            case \"MINIMUM_DEVICES_NUMBER\":\n                text = text.replaceAll(textVariable, context.product.getMinMaxDeviceNumbers()[0]);\n                stopVariableSearch = true;\n                break;\n            case \"MAXIMUM_DEVICES_NUMBER\":\n                text = text.replaceAll(textVariable, context.product.getMinMaxDeviceNumbers()[1]);\n                stopVariableSearch = true;\n                break;\n            default:\n                break;\n        }\n\n        if (context.devicePropertiesVariables.includes(variableParameter)) {\n            const deviceMapping = context.option.deviceMapping;\n            if (deviceMapping) {\n                text = text.replaceAll(textVariable, context.option.deviceMapping[variableParameter]);\n            }\n        }\n\n        if (stopVariableSearch) {\n            break;\n        }\n    }\n\n    return text;\n};\n\n/**\n *\n * @param {string} text\n * @param {import(\"../resolver\").Context} context\n * @returns {string} return the initial text with all variables inside of it resolved. If some cannot be resoled, they will retain their variable form\n */\nconst replaceTextVariables = (text, context) => {\n    //get all the textVariables defined using brackets\n    const allTextVariables = [...new Set(text.match(/{.*?}/ig))];\n    for (const textVariable of allTextVariables) {\n        const variableParameters = textVariable.split(/{|}|\\|\\||;/).filter(Boolean);\n\n        // get the hidingCondition and test it. If it is true remove the variable from the text\n        const hideCondition = variableParameters.find(variableParameter => variableParameter.includes(\"hide=\"))?.split(\"=\")[1];\n        if (checkHidingCondition(hideCondition, context)) {\n            text = text.replaceAll(textVariable, \"\");\n            continue;\n        }\n\n        // replace the variable inside the text\n        text = replaceVariable(text, context, variableParameters, textVariable);\n    }\n\n    return text;\n};\n\n/**\n *\n * @param {object} parent\n * @param {import(\"../resolver\").Context} context\n * parse the data-cmp-data-layer object and for each string resolve every variable. This is for the data layer component\n */\nconst recursiveDataLayerParse = (parent, context) => {\n    for (const key of Object.keys(parent)) {\n        if (typeof parent[key] === 'string') {\n            parent[key] = replaceTextVariables(parent[key], context);\n        }\n\n        if (typeof parent[key] === 'object') {\n            recursiveDataLayerParse(parent[key], context);\n        }\n    }\n};\n\n/**\n * @param {HTMLElement} element\n * @param {import(\"../resolver\").Context} context\n */\nexport const resolve = (element, context) => {\n    if (element.dataset.storeTextVariable === undefined || !context.option) { return; }\n\n    const children = [...element.childNodes];\n    for (const child of children) {\n\n        //resolve all text variables in the data layer attribute\n        if (child.dataset && child.dataset.cmpDataLayer && !child.dataset.parsedDataLayer) {\n            const dataLayerObject = JSON.parse(child.dataset.cmpDataLayer);\n            recursiveDataLayerParse(dataLayerObject, context);\n            child.setAttribute(\"data-cmp-data-layer\", JSON.stringify(dataLayerObject));\n            child.setAttribute(\"data-parsed-data-layer\", true);\n        }\n\n        // resolve all text variables in text nodes\n        if (child.nodeType === Node.TEXT_NODE) {\n            if (!child.initialContent) {\n                child.initialContent = child.textContent;\n            }\n            child.textContent = replaceTextVariables(child.initialContent, context);\n        }\n\n        children.push(...child.childNodes);\n    }\n}"],"names":["checkHidingCondition","hideCondition","option","replaceVariable","text","context","variableParameters","textVariable","stopVariableSearch","variableParameter","smallestPrice","currency","product","productSmallestPrice","contextProduct","discount","replaceTextVariables","allTextVariables","recursiveDataLayerParse","parent","key","resolve","element","children","child","dataLayerObject"],"mappings":"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"}