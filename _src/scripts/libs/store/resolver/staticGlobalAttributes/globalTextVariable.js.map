{"version":3,"file":"globalTextVariable.js","sources":["../../../../../../src/scripts/libs/store/resolver/staticGlobalAttributes/globalTextVariable.js"],"sourcesContent":["import { GlobalContext } from \"../resolver.js\";\nimport { Constants } from \"../../../constants.js\";\n\n/**\n * @param {string} hideCondition\n * @returns {boolean} if the hiding condition is true, the text will be hidden otherwise it will still be displayed\n */\nconst checkHidingCondition = (hideCondition) => {\n\n    if (!hideCondition) {\n        return false;\n    }\n\n    switch (hideCondition) {\n        case ('no-price'):\n            return !GlobalContext.variations.some(option => option.getPrice(\"value\"));\n        case ('no-price-discounted'):\n            return !GlobalContext.variations.some(option => option.getDiscountedPrice(\"value\"));\n        default:\n            return true;\n    }\n};\n\n/**\n *  @param {\"min\"|\"max\"} value\n *  @param {import(\"../../index.js\").ProductOption[]} options\n *  @param {function} fn\n *  @returns {import(\"../../index.js\").ProductOption}\n */\nconst getMinOrMax = (value, options, fn) => {\n    let minOrMax = value === \"max\" ? Number.MIN_SAFE_INTEGER : Number.MAX_SAFE_INTEGER;\n    let productValue = null;\n\n    for (const option of options) {\n        let localValue = fn(option);\n        localValue = Constants.PRODUCT_ID_MAPPINGS[option.getId()].isMonthlyProduct ? localValue * 12 : localValue;\n        if (localValue && (value === \"min\" && localValue < minOrMax) || (value === \"max\" && localValue > minOrMax)) {\n            minOrMax = localValue;\n            productValue = option;\n        }\n    }\n\n    return productValue;\n}\n\n/**\n *\n * @param {string} text\n * @param {string[]} variableParameters\n * @param {string} textVariable\n * @returns {string} returns the initial text with the replaced variable or the actual initial text when the variable cannot be replaced\n */\nconst replaceVariable = (text, variableParameters, textVariable) => {\n\n    /**\n     * @type {import(\"../../index.js\").ProductOption[]}\n     */\n    const options = GlobalContext.variations;\n    let stopVariableSearch = false;\n    let option = null;\n\n    if (options.length === 0) {\n        return;\n    }\n\n    for (const variableParameter of variableParameters) {\n        switch (variableParameter) {\n            case \"GLOBAL_SMALLEST_PRICE_FULL\":\n                option = getMinOrMax(\"min\", options, option => option.getPrice(\"value\"));\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getPrice(\"valueWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_BIGGEST_PRICE_FULL\":\n                option = getMinOrMax(\"max\", options, option => option.getPrice(\"value\"));\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getPrice(\"valueWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_SMALLEST_PRICE_DISCOUNTED\":\n                option = getMinOrMax(\"min\", options, option => option.getDiscountedPrice(\"value\"));\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getDiscountedPrice(\"valueWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_BIGGEST_PRICE_DISCOUNTED\":\n                option = getMinOrMax(\"max\", options, option => option.getDiscountedPrice(\"value\"));\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getDiscountedPrice(\"valueWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_SMALLEST_DISCOUNT_PERCENTAGE\":\n                option = getMinOrMax(\"min\", options, option => option.getDiscount(\"percentage\"))\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getDiscount(\"percentageWithProcent\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_BIGGEST_DISCOUNT_PERCENTAGE\":\n                option = getMinOrMax(\"max\", options, option => option.getDiscount(\"percentage\"));\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getDiscount(\"percentageWithProcent\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_SMALLEST_DISCOUNT_VALUE\":\n                option = getMinOrMax(\"min\", options, option => option.getDiscount(\"value\"))\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getDiscount(\"valueWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_BIGGEST_DISCOUNT_VALUE\":\n                option = getMinOrMax(\"max\", options, option => option.getDiscount(\"value\"));\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getDiscount(\"valueWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_SMALLEST_PRICE_PER_MONTH\":\n                option = getMinOrMax(\"min\", options, option => option.getPrice(\"monthly\"))\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getPrice(\"monthlyWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_BIGGEST_PRICE_PER_MONTH\":\n                option = getMinOrMax(\"max\", options, option => option.getPrice(\"monthly\"));\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getPrice(\"monthlyWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_SMALLEST_PRICE_DISCOUNTED_PER_MONTH\":\n                option = getMinOrMax(\"min\", options, option => option.getDiscountedPrice(\"monthly\"))\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getDiscountedPrice(\"monthlyWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            case \"GLOBAL_BIGGEST_PRICE_DISCOUNTED_PER_MONTH\":\n                option = getMinOrMax(\"max\", options, option => option.getDiscountedPrice(\"monthly\"));\n                if (!option) {\n                    break;\n                }\n\n                text = text.replaceAll(textVariable, option.getDiscountedPrice(\"monthlyWithCurrency\"));\n                stopVariableSearch = true;\n                break;\n            default:\n                break;\n        }\n\n        if (stopVariableSearch) {\n            break;\n        }\n    }\n\n    return text;\n};\n\n/**\n *\n * @param {string} text\n * @returns {string} return the initial text with all variables inside of it resolved. If some cannot be resoled, they will retain their variable form\n */\nconst replaceTextVariables = (text) => {\n    //get all the textVariables defined using brackets\n    const allTextVariables = [...new Set(text.match(/{.*?}/ig))];\n    for (const textVariable of allTextVariables) {\n        const variableParameters = textVariable.split(/{|}|\\|\\||;/);\n\n        // get the hidingCondition and test it. If it is true remove the variable from the text\n        const hideCondition = variableParameters.find(variableParameter => variableParameter.includes(\"hide=\"))?.split(\"=\")[1];\n        if (checkHidingCondition(hideCondition)) {\n            text = text.replaceAll(textVariable, \"\");\n            continue;\n        }\n\n        // replace the variable inside the text\n        text = replaceVariable(text, variableParameters, textVariable);\n    }\n\n    return text;\n};\n\n/**\n *\n * @param {object} parent\n * parse the data-cmp-data-layer object and for each string resolve every variable. This is for the data layer component\n */\nconst recursiveDataLayerParse = (parent) => {\n    for (const key of Object.keys(parent)) {\n        if (typeof parent[key] === 'string') {\n            parent[key] = replaceTextVariables(parent[key]);\n        }\n\n        if (typeof parent[key] === 'object') {\n            recursiveDataLayerParse(parent[key]);\n        }\n    }\n};\n\n/**\n * @param {HTMLElement} element\n */\nexport const resolve = (element) => {\n\n    const children = [...element.childNodes];\n    for (const child of children) {\n\n        //resolve all text variables in the data layer attribute\n        if (child.dataset && child.dataset.cmpDataLayer && !child.dataset.parsedDataLayer) {\n            const dataLayerObject = JSON.parse(child.dataset.cmpDataLayer);\n            recursiveDataLayerParse(dataLayerObject);\n            child.setAttribute(\"data-cmp-data-layer\", JSON.stringify(dataLayerObject));\n            child.setAttribute(\"data-parsed-data-layer\", true);\n        }\n\n        // resolve all text variables in text nodes\n        if (child.nodeType === Node.TEXT_NODE) {\n            child.textContent = replaceTextVariables(child.textContent);\n        }\n\n        children.push(...child.childNodes);\n    }\n}"],"names":["checkHidingCondition","hideCondition","GlobalContext","option","getMinOrMax","value","options","fn","minOrMax","productValue","localValue","Constants","replaceVariable","text","variableParameters","textVariable","stopVariableSearch","variableParameter","replaceTextVariables","allTextVariables","recursiveDataLayerParse","parent","key","resolve","element","children","child","dataLayerObject"],"mappings":"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"}