{"version":3,"file":"data-layer.js","sources":["../../../src/scripts/libs/data-layer.js"],"sourcesContent":["import { target } from \"../target.js\";\nimport { User } from \"@repobit/dex-utils\";\nimport page from \"../page.js\";\nimport { PageLoadStartedEvent, UserDetectedEvent, ButtonClickEvent, PageErrorEvent, AdobeDataLayerService, ProductLoadedEvent } from \"@repobit/dex-data-layer\";\nimport {\n  getExperimentDetails,\n  generatePageLoadStartedName,\n  getCampaignBasedOnLocale,\n  getUrlPromotion,\n  getProductFinding,\n  getMetadata,\n} from '../utils/utils.js';\nimport { getTargetExperimentDetails } from \"../target.js\";\n\nexport class FranklinProductsLoadedEvent extends ProductLoadedEvent{\n  getOptionInfo(option) {\n    return {\n      ID: option.getAvangateId(),\n      name: option.getName(),\n      devices: option.getId() === 'psm' ? 10 : option.getDevices(), //DEPRECATED content - please remove after Vlaicu implementation\n      subscription: option.getSubscription(\"months\"),\n      version: option.getSubscription(\"months\") === 1 ? \"monthly\" : \"yearly\",\n      basePrice: option.getPrice(\"value\"),\n      discountValue: option.getDiscount(\"value\"),\n      discountRate: option.getDiscount(\"percentage\"),\n      currency: option.getCurrency(),\n      priceWithTax: option.getDiscountedPrice(\"value\") || option.getPrice(\"value\"),\n    };\n  }\n};\n\n/**\n * Page Error Handling\n */\nconst pageErrorHandling = () => {\n  const isErrorPage = window.errorCode === '404';\n  if(isErrorPage) {\n    AdobeDataLayerService.push(new PageErrorEvent());\n  }\n}\n\n/**\n * Add click events to the data layer after page redirect\n */\nconst checkClickEventAfterRedirect = () => {\n  if(localStorage.getItem(\"clickEvent\") !== null) {\n    const clickEvent = JSON.parse(localStorage.getItem(\"clickEvent\"));\n\n    if(clickEvent?.clickEvent) {\n      AdobeDataLayerService.push(new ButtonClickEvent(clickEvent.clickEvent, clickEvent.productId));\n    }\n\n    localStorage.removeItem(\"clickEvent\");\n  }\n}\n\n/**\n * Add entry for free products\n */\nconst getFreeProductsEvents = () => {\n  const currentPage = page.name;\n  if (currentPage === 'free-antivirus') {\n    // on Free Antivirus page we should add Free Antivirus as the main product\n    AdobeDataLayerService.push(new FranklinProductsLoadedEvent({\n      ID: '8430',\n    }, 'info'));\n  }\n}\n\n/**\n * push the pageLoadStartedEvent\n * and send data to CDP\n */\nconst resolvePageLoadStartedEvent = async () => {\n  // push the pageLoadStartedEvent to the Adobe Data Layer\n  AdobeDataLayerService.push(new PageLoadStartedEvent(\n    page,\n    {\n      name: generatePageLoadStartedName(),\n      experimentDetails: (await getTargetExperimentDetails()) ?? getExperimentDetails(),\n      geoRegion: await User.country,\n      serverName: 'hlx.live', // indicator for AEM Success Edge\n    },\n    {\n      promotionID: (await target.configMbox)?.promotion\n        || getUrlPromotion()\n        || getMetadata('pid')\n        || getCampaignBasedOnLocale()\n        || '',\n      internalPromotionID: page.getParamValue('icid') || '',\n      trackingID: page.getParamValue('cid') || '',\n    },\n  ));\n};\n\n/**\n * push the userDetectedEvent to the Data Layer\n */\nconst resolveUserDetectedEvent = async () => {\n  AdobeDataLayerService.push(new UserDetectedEvent(\n    page,\n    {\n      ID: await User.fingerprint,\n      productFinding: getProductFinding()\n    }\n  ));\n};\n\n/**\n * Resolve the data layer\n */\nexport const resolveNonProductsDataLayer = async () => {\n  await resolvePageLoadStartedEvent();\n  pageErrorHandling();\n  await resolveUserDetectedEvent();\n  checkClickEventAfterRedirect();\n  getFreeProductsEvents();\n}"],"names":["FranklinProductsLoadedEvent","ProductLoadedEvent","option","pageErrorHandling","AdobeDataLayerService","PageErrorEvent","checkClickEventAfterRedirect","clickEvent","ButtonClickEvent","getFreeProductsEvents","page","resolvePageLoadStartedEvent","PageLoadStartedEvent","generatePageLoadStartedName","getTargetExperimentDetails","getExperimentDetails","User","target","getUrlPromotion","getMetadata","getCampaignBasedOnLocale","resolveUserDetectedEvent","UserDetectedEvent","getProductFinding","resolveNonProductsDataLayer"],"mappings":"soCAcO,MAAMA,UAAoCC,CAAkB,CACjE,cAAcC,EAAQ,CACpB,MAAO,CACL,GAAIA,EAAO,cAAe,EAC1B,KAAMA,EAAO,QAAS,EACtB,QAASA,EAAO,MAAO,IAAK,MAAQ,GAAKA,EAAO,WAAY,EAC5D,aAAcA,EAAO,gBAAgB,QAAQ,EAC7C,QAASA,EAAO,gBAAgB,QAAQ,IAAM,EAAI,UAAY,SAC9D,UAAWA,EAAO,SAAS,OAAO,EAClC,cAAeA,EAAO,YAAY,OAAO,EACzC,aAAcA,EAAO,YAAY,YAAY,EAC7C,SAAUA,EAAO,YAAa,EAC9B,aAAcA,EAAO,mBAAmB,OAAO,GAAKA,EAAO,SAAS,OAAO,CAC5E,CACL,CACA,CAKA,MAAMC,EAAoB,IAAM,CACV,OAAO,YAAc,OAEvCC,EAAsB,KAAK,IAAIC,CAAgB,CAEnD,EAKMC,EAA+B,IAAM,CACzC,GAAG,aAAa,QAAQ,YAAY,IAAM,KAAM,CAC9C,MAAMC,EAAa,KAAK,MAAM,aAAa,QAAQ,YAAY,CAAC,EAE7DA,GAAY,YACbH,EAAsB,KAAK,IAAII,EAAiBD,EAAW,WAAYA,EAAW,SAAS,CAAC,EAG9F,aAAa,WAAW,YAAY,CACxC,CACA,EAKME,EAAwB,IAAM,CACdC,EAAK,OACL,kBAElBN,EAAsB,KAAK,IAAIJ,EAA4B,CACzD,GAAI,MACL,EAAE,MAAM,CAAC,CAEd,EAMMW,EAA8B,SAAY,CAE9CP,EAAsB,KAAK,IAAIQ,EAC7BF,EACA,CACE,KAAMG,EAA6B,EACnC,kBAAoB,MAAMC,EAA4B,GAAKC,EAAsB,EACjF,UAAW,MAAMC,EAAK,QACtB,WAAY,UACb,EACD,CACE,aAAc,MAAMC,EAAO,aAAa,WACnCC,EAAe,GACfC,EAAY,KAAK,GACjBC,EAAwB,GACxB,GACL,oBAAqBV,EAAK,cAAc,MAAM,GAAK,GACnD,WAAYA,EAAK,cAAc,KAAK,GAAK,EAC1C,CACL,CAAG,CACH,EAKMW,EAA2B,SAAY,CAC3CjB,EAAsB,KAAK,IAAIkB,EAC7BZ,EACA,CACE,GAAI,MAAMM,EAAK,YACf,eAAgBO,EAAiB,CACvC,CACA,CAAG,CACH,EAKaC,EAA8B,SAAY,CACrD,MAAMb,EAA6B,EACnCR,EAAmB,EACnB,MAAMkB,EAA0B,EAChCf,EAA8B,EAC9BG,EAAuB,CACzB"}