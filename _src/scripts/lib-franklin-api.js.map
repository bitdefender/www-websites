{"version":3,"mappings":"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","names":["updateLinkSources","shadoRoot","origin","source","image","ICONS_CACHE","decorateIcons","element","svgSprite","div","icons","span","iconName","c","dynamicIconsSharepointPath","response","svg","error","symbols","k","v","parent","toCamelCase","name","toClassName","g","readBlockConfig","block","config","row","cols","col","value","as","a","imgs","img","ps","p","decorateSections","main","section","wrappers","defaultContent","e","wrapper","sectionMeta","meta","key","style","decorateBlock","shortBlockName","loadComponent","offer","options","selector","offerURL","offerFolder","container","shadowRoot","html","js","r","__vitePreload","newDiv","franklinHTMLStructure","currentPagePath","link","linkAnchor","parsedLinkAnchor","linkAnchorPath","event"],"ignoreList":[],"sources":["../../src/scripts/lib-franklin-api.js"],"sourcesContent":["/**\n * @param {HTMLDivElement} shadoRoot\n * @param {string} origin - prepends the origin to the relative links\n */\nconst updateLinkSources = (shadoRoot, origin) => {\n  shadoRoot\n    .querySelectorAll('source')\n    .forEach(source => source.srcset = new URL(source.getAttribute(\"srcset\"), origin).href);\n\n  shadoRoot\n    .querySelectorAll('img')\n    .forEach(image => image.src = new URL(image.getAttribute(\"src\"), origin).href);\n};\n\nlet ICONS_CACHE = {};\nasync function decorateIcons(element) {\n  // Prepare the inline sprite\n  let svgSprite = element.getElementById('franklin-svg-sprite');\n  if (!svgSprite) {\n    const div = document.createElement('div');\n    div.innerHTML = '<svg xmlns=\"http://www.w3.org/2000/svg\" id=\"franklin-svg-sprite\" style=\"display: none\"></svg>';\n    svgSprite = div.firstElementChild;\n    element.append(div.firstElementChild);\n  }\n  // Download all new icons\n  const icons = [...element.querySelectorAll('span.icon')];\n  await Promise.all(icons.map(async (span) => {\n    const iconName = Array.from(span.classList).find((c) => c.startsWith('icon-')).substring(5);\n    if (!ICONS_CACHE[iconName]) {\n      ICONS_CACHE[iconName] = true;\n      try {\n        let dynamicIconsSharepointPath = 'https://www.bitdefender.com/common/icons/';\n        if (window.location.hostname.includes('bitdefender.co.uk')) {\n          dynamicIconsSharepointPath = 'https://www.bitdefender.co.uk/content/dam/franklin/';\n        }\n        if (window.location.hostname.includes('bitdefender.fr')) {\n          dynamicIconsSharepointPath = 'https://www.bitdefender.fr/content/dam/franklin/';\n        }\n        // check for localhost\n        if (window.location.hostname === 'localhost') {\n          dynamicIconsSharepointPath = 'https://www.bitdefender.com/common/icons/';\n        }\n        const response = await fetch(`${dynamicIconsSharepointPath}${iconName}.svg`);\n        if (!response.ok) {\n          ICONS_CACHE[iconName] = false;\n          return;\n        }\n        // Styled icons don't play nice with the sprite approach because of shadow dom isolation\n        const svg = await response.text();\n        if (svg.match(/(<style | class=)/)) {\n          ICONS_CACHE[iconName] = { styled: true, html: svg };\n        } else {\n          ICONS_CACHE[iconName] = {\n            html: svg\n              .replace('<svg', `<symbol id=\"icons-sprite-${iconName}\"`)\n              .replace(/ width=\".*?\"/, '')\n              .replace(/ height=\".*?\"/, '')\n              .replace('</svg>', '</symbol>'),\n          };\n        }\n      } catch (error) {\n        ICONS_CACHE[iconName] = false;\n        // eslint-disable-next-line no-console\n        console.error(error);\n      }\n    }\n  }));\n\n  const symbols = Object\n    .keys(ICONS_CACHE).filter((k) => !svgSprite.querySelector(`#icons-sprite-${k}`))\n    .map((k) => ICONS_CACHE[k])\n    .filter((v) => !v.styled)\n    .map((v) => v.html)\n    .join('\\n');\n  svgSprite.innerHTML += symbols;\n\n  icons.forEach((span) => {\n    const iconName = Array.from(span.classList).find((c) => c.startsWith('icon-')).substring(5);\n    const parent = span.firstElementChild?.tagName === 'A' ? span.firstElementChild : span;\n    // Styled icons need to be inlined as-is, while unstyled ones can leverage the sprite\n    if (ICONS_CACHE[iconName].styled) {\n      parent.innerHTML = ICONS_CACHE[iconName].html;\n    } else {\n      parent.innerHTML = `<svg xmlns=\"http://www.w3.org/2000/svg\"><use href=\"#icons-sprite-${iconName}\"/></svg>`;\n    }\n  });\n}\n\n/**\n * Sanitizes a string for use as a js property name.\n * @param {string} name The unsanitized string\n * @returns {string} The camelCased name\n */\nexport function toCamelCase(name) {\n  return toClassName(name).replace(/-([a-z])/g, (g) => g[1].toUpperCase());\n}\n\n/**\n * Sanitizes a string for use as class name.\n * @param {string} name The unsanitized string\n * @returns {string} The class name\n */\nexport function toClassName(name) {\n  return typeof name === 'string'\n    ? name.toLowerCase()\n      .replace(/[^\\w\\u4e00-\\u9fa5]/g, '-') // Include Chinese characters in the regular expression\n      .replace(/-+/g, '-') // Replace consecutive hyphens with a single hyphen\n      .replace(/^-|-$/g, '') // Remove leading and trailing hyphens\n    : '';\n}\n\n/**\n * Extracts the config from a block.\n * @param {Element} block The block element\n * @returns {object} The block config\n */\nexport function readBlockConfig(block) {\n  const config = {};\n  block.querySelectorAll(':scope > div').forEach((row) => {\n    if (row.children) {\n      const cols = [...row.children];\n      if (cols[1]) {\n        const col = cols[1];\n        const name = toClassName(cols[0].textContent);\n        let value = '';\n        if (col.querySelector('a')) {\n          const as = [...col.querySelectorAll('a')];\n          if (as.length === 1) {\n            value = as[0].href;\n          } else {\n            value = as.map((a) => a.href);\n          }\n        } else if (col.querySelector('img')) {\n          const imgs = [...col.querySelectorAll('img')];\n          if (imgs.length === 1) {\n            value = imgs[0].src;\n          } else {\n            value = imgs.map((img) => img.src);\n          }\n        } else if (col.querySelector('p')) {\n          const ps = [...col.querySelectorAll('p')];\n          if (ps.length === 1) {\n            value = ps[0].textContent;\n          } else {\n            value = ps.map((p) => p.textContent);\n          }\n        } else value = row.children[1].textContent;\n        config[name] = value;\n      }\n    }\n  });\n  return config;\n}\n\nexport function decorateSections(main) {\n  main.querySelectorAll(':scope > div').forEach((section) => {\n    const wrappers = [];\n    let defaultContent = false;\n    [...section.children].forEach((e) => {\n      if (e.tagName === 'DIV' || !defaultContent) {\n        const wrapper = document.createElement('div');\n        wrappers.push(wrapper);\n        defaultContent = e.tagName !== 'DIV';\n        if (defaultContent) wrapper.classList.add('default-content-wrapper');\n      }\n      wrappers[wrappers.length - 1].append(e);\n    });\n    wrappers.forEach((wrapper) => section.append(wrapper));\n    section.classList.add('section');\n\n    /* process section metadata */\n    const sectionMeta = section.querySelector('div.section-metadata');\n    if (sectionMeta) {\n      const meta = readBlockConfig(sectionMeta);\n      Object.keys(meta).forEach((key) => {\n        if (key === 'style') {\n          const styles = meta.style.split(',').map((style) => toClassName(style.trim()));\n          styles.forEach((style) => section.classList.add(style));\n        } else {\n          section.dataset[toCamelCase(key)] = meta[key];\n        }\n      });\n      sectionMeta.parentNode.remove();\n    }\n  });\n}\n\nfunction decorateBlock(block) {\n  const shortBlockName = block.classList[0];\n  if (shortBlockName) {\n    block.classList.add('block');\n    block.dataset.blockName = shortBlockName;\n    block.dataset.blockStatus = 'initialized';\n    const blockWrapper = block.parentElement;\n    blockWrapper.classList.add(`${shortBlockName}-wrapper`);\n    const section = block.closest('.section');\n    if (section) section.classList.add(`${shortBlockName}-container`);\n  }\n}\n\nexport async function loadComponent(offer, block, options, selector)  {\n  const offerURL = new URL(offer);\n  const origin = offerURL.origin;\n  const offerFolder = offerURL.pathname.split(\"/\").slice(0,-1).join(\"/\");\n  const container = selector ? document.querySelector(selector) : document.createElement('div');\n  const shadowRoot = container.attachShadow({ mode: 'open' });\n\n  shadowRoot.innerHTML = `<link rel=\"stylesheet\" href=\"${origin}/_src/blocks/${block}/${block}.css\" type=\"text/css\">`;\n\n  const [html, js] = await Promise.all([\n    fetch(offer).then(r => r.text()),\n    import(`${origin}/_src/blocks/${block}/${block}.js`)\n  ])\n  // If the block is a particle background,\n  // a new div is created and appended to the body so the external library can work\n  if (block === \"particle-background\") {\n    const newDiv = document.createElement('div');\n    newDiv.style.display = \"none\";\n    newDiv.innerHTML += html;\n    decorateSections(newDiv);\n    decorateBlock(newDiv.querySelector(`.${block}`));\n    updateLinkSources(newDiv, `${origin}${offerFolder}/`);\n    document.body.appendChild(newDiv);\n    await js.default(newDiv, {...options});\n    shadowRoot.appendChild(newDiv);\n    newDiv.style.display = \"block\";\n  } else {\n    // in order to have a structure as close as possible as in franklin\n    // when we import in aem, we also decorate the sections and the block\n    // the functions are taken from lib-franklin.js\n    let franklinHTMLStructure = document.createElement('div')\n    franklinHTMLStructure.innerHTML = html;\n    decorateSections(franklinHTMLStructure);\n    decorateBlock(franklinHTMLStructure.querySelector(`.${block}`));\n    shadowRoot.innerHTML +=  franklinHTMLStructure.innerHTML;\n    updateLinkSources(shadowRoot, `${origin}${offerFolder}/`);\n    await js.default(shadowRoot.querySelector('.section'), {...options});\n    decorateIcons(shadowRoot);\n\n    // Get the current page path without the hash part and query\n    const currentPagePath = window.location.protocol + '//' + window.location.host + window.location.pathname;\n    // get all the links that pointing within the page with a hash\n    shadowRoot.querySelectorAll('a[href*=\"#\"]').forEach(link => {\n      let linkAnchor = link.getAttribute('href');\n      try {\n        const parsedLinkAnchor = new URL(linkAnchor, currentPagePath);\n        const linkAnchorPath = parsedLinkAnchor.protocol + '//' + parsedLinkAnchor.host + parsedLinkAnchor.pathname;\n        if (currentPagePath === linkAnchorPath) {\n          link.addEventListener('click', (event) => {\n            event.preventDefault();\n  \n            linkAnchor = '#' + linkAnchor.split('#')[1];\n            const target = document.querySelector(linkAnchor);\n            target.scrollIntoView({ behavior: 'smooth' });\n          });\n        }\n      } catch (e) {\n        return;\n      }\n    });\n  }\n\n  return container;\n}\n"],"file":"scripts/lib-franklin-api.js"}