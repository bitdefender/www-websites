{"version":3,"file":"bot-prevention.js","sources":["../../../src/scripts/utils/bot-prevention.js"],"sourcesContent":["// eslint-disable-next-line import/prefer-default-export\nexport class BotPrevention {\n  static MAX_EXECUTION_TIME = 2 * 60 * 1000;\n\n  static EXECUTION_TIME_LIMIT = 0.5 * 1000;\n\n  static MIN_DIFFICULTY = 2;\n\n  static MIN_COMPLEXITY = 100;\n\n  static POW_CONFIG = {};\n\n  static async solveChallange({pow_challenge, difficulty, complexity, allow_inc}) {\n    try {\n      const nonces = [];\n      let powPrefix = pow_challenge;\n      let executionTime = 0;\n      const startExecution = Date.now();\n      for (let i = 0; i < complexity; i++) {\n        const solution = await this.findNonce(powPrefix, difficulty);\n        powPrefix += solution.nonce;\n        nonces.push(solution.nonce);\n\n        executionTime = Date.now() - startExecution;\n        if (allow_inc === true && executionTime >= this.EXECUTION_TIME_LIMIT) {\n          break;\n        }\n        if (this.MAX_EXECUTION_TIME > 0 && executionTime > this.MAX_EXECUTION_TIME) {\n          throw new Error('Max execution time exceceded!');\n        }\n      }\n      return { nonces, executionTime };\n    } catch (err) {\n      return {};\n    }\n  }\n\n  static generateStringOfZeroes(charNo) {\n    let string = '';\n    for (let i = 0; i < charNo; i++) {\n      string += '0';\n    }\n    return string;\n  }\n\n  static convertHexCharToBinaryString(char) {\n    switch (char.toUpperCase()) {\n      case '0': return '0000';\n      case '1': return '0001';\n      case '2': return '0010';\n      case '3': return '0011';\n      case '4': return '0100';\n      case '5': return '0101';\n      case '6': return '0110';\n      case '7': return '0111';\n      case '8': return '1000';\n      case '9': return '1001';\n      case 'A': return '1010';\n      case 'B': return '1011';\n      case 'C': return '1100';\n      case 'D': return '1101';\n      case 'E': return '1110';\n      case 'F': return '1111';\n      default: return '0000';\n    }\n  }\n\n  static extractLeadingBitsFromHexString(hexString, numBits) {\n    let bitString = '';\n    const numChars = Math.ceil(numBits / 4);\n    for (let i = 0; i < numChars; i++) {\n      bitString = `${bitString}${this.convertHexCharToBinaryString(hexString.charAt(i))}`;\n    }\n    bitString = bitString.substr(0, numBits);\n    return bitString;\n  }\n\n  static async findNonce(challenge, difficulty) {\n    try {\n      const startExecution = Date.now();\n      let nonce = 1;\n      let executionTime = 1;\n      let hashedValue = await this.sha256(challenge + nonce);\n      const solutionPrefix = this.generateStringOfZeroes(difficulty);\n\n      while (this.extractLeadingBitsFromHexString(hashedValue, difficulty) !== solutionPrefix) {\n        nonce++;\n        hashedValue = await this.sha256(challenge + nonce);\n        executionTime = Date.now() - startExecution;\n        if (this.MAX_EXECUTION_TIME > 0 && executionTime > this.MAX_EXECUTION_TIME) {\n          throw new Error('Max execution time exceceded!');\n        }\n      }\n      return { nonce, executionTime };\n    } catch (err) {\n      return {};\n    }\n  }\n\n  static async sha256(message) {\n    // Encode the message as UTF-8\n    const msgBuffer = new TextEncoder().encode(message);\n\n    // Compute the hash\n    const hashBuffer = await crypto.subtle.digest('SHA-256', msgBuffer);\n\n    // Convert ArrayBuffer to byte array\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n\n    // Convert bytes to hex string\n    const hashHex = hashArray.map((b) => b.toString(16).padStart(2, '0')).join('');\n\n    return hashHex;\n  }\n}\n"],"names":["BotPrevention","pow_challenge","difficulty","complexity","allow_inc","nonces","powPrefix","executionTime","startExecution","solution","charNo","string","i","char","hexString","numBits","bitString","numChars","challenge","nonce","hashedValue","solutionPrefix","message","msgBuffer","hashBuffer","b"],"mappings":"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"}