{"version":3,"file":"pass_service.js","sources":["../../../src/scripts/utils/pass_service.js"],"sourcesContent":["/**\n * Service to manage the password datastore\n */\n/* eslint-disable */\n\nconst uppercaseMinCount = 1;\nconst lowercaseMinCount = 1;\nconst numberMinCount = 1;\nconst specialMinCount = 1;\n\nconst DEFAULT_SETTINGS = {\n    passwordLength: 16,\n    includeLettersUppercase: true,\n    includeLettersLowercase: true,\n    includeNumbers: true,\n    includeSpecialChars: true,\n    passwordLettersUppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n    passwordLettersLowercase: 'abcdefghijklmnopqrstuvwxyz',\n    passwordNumbers: '0123456789',\n    passwordSpecialChars: '!@#$%^&*()_+-=[]{}|;:,.<>?'\n  };\n\n  const SecurityReportConstants = {\n    // Length and score constants\n    minPasswordLength: 8,\n    maxPasswordLength: 16,\n    minVariationEnforcePasswordLength: 15,\n    minVariationLength: 3,\n    variationPenalty: 0.15,\n    maxScore: 100,\n    minScore: 0,\n    weakMaxScore: 20,\n    poorMaxScore: 40,\n    goodMaxScore: 80,\n    newPasswordMaxDays: 90,\n  \n    // Variation keys\n    digitsKey: 'digits',\n    lowerKey: 'lower',\n    upperKey: 'upper',\n    nonWordsKey: 'nonWords',\n\n    // Password strength labels\n    passwordStrengthWeak: 'weak',\n    passwordStrengthPoor: 'poor',\n    passwordStrengthGood: 'good',\n    passwordStrengthStrong: 'strong',\n  \n    // Advice constants\n    adviceSetLongerPassword: 'SET_LONGER_PASSWORD',\n    adviceSetLongerOrMoreComplexPassword: 'SET_LONGER_OR_MORE_COMPLEX_PASSWORD',\n    adviceSetLongerPassword10: 'SET_LONGER_PASSWORD_10',\n  };\n  \n  /**\n   * Computes a score for the provided password string.\n   * @param {string} password - The password to evaluate.\n   * @returns {Object} An object containing the score, advice, passwordLength, and variationCount.\n   */\n  function ratePasswordFromPasswordInfo(password) {\n    // If password is empty or undefined, return a minimal score.\n    if (!password) {\n      return {\n        score: SecurityReportConstants.minScore,\n        advice: SecurityReportConstants.adviceSetLongerPassword,\n        passwordLength: 0,\n        variationCount: 0,\n      };\n    }\n  \n    // Evaluate character variations using regular expressions.\n    const variations = {\n      [SecurityReportConstants.digitsKey]: /\\d/.test(password),\n      [SecurityReportConstants.lowerKey]: /[a-z]/.test(password),\n      [SecurityReportConstants.upperKey]: /[A-Z]/.test(password),\n      [SecurityReportConstants.nonWordsKey]: /\\W/.test(password),\n    };\n  \n    // Count the number of variation conditions that passed.\n    const variationCount = Object.values(variations).filter(Boolean).length;\n  \n    // If the password is too short, return a low score.\n    if (password.length <= SecurityReportConstants.minPasswordLength) {\n      return {\n        score: SecurityReportConstants.minScore,\n        advice: SecurityReportConstants.adviceSetLongerPassword,\n        passwordLength: password.length,\n        variationCount: variationCount,\n        minPasswordLength: SecurityReportConstants.minPasswordLength,\n      };\n    }\n  \n    // If the password is very long, consider it max score.\n    if (password.length >= SecurityReportConstants.maxPasswordLength) {\n      return {\n        score: SecurityReportConstants.maxScore,\n        advice: '',\n        passwordLength: password.length,\n        variationCount: variationCount,\n        maxPasswordLength: SecurityReportConstants.maxPasswordLength,\n      };\n    }\n  \n    // Compute a base score based on the password length.\n    let score = ((password.length - SecurityReportConstants.minPasswordLength) *\n                 SecurityReportConstants.maxScore) /\n                (SecurityReportConstants.maxPasswordLength - SecurityReportConstants.minPasswordLength);\n  \n    // If the password length is relatively short and the variation count is below minimum, apply a penalty.\n    if (\n      password.length <= SecurityReportConstants.minVariationEnforcePasswordLength &&\n      variationCount < SecurityReportConstants.minVariationLength\n    ) {\n      score = score * (1 - (SecurityReportConstants.minVariationLength - variationCount) * SecurityReportConstants.variationPenalty);\n      score = Math.min(score, SecurityReportConstants.maxScore);\n      score = Math.max(score, SecurityReportConstants.minScore);\n      score = Math.round(score * 10) / 10;\n      return {\n        score: score,\n        advice: SecurityReportConstants.adviceSetLongerOrMoreComplexPassword,\n        passwordLength: password.length,\n        variationCount: variationCount,\n      };\n    }\n  \n    // Clamp the score between minScore and maxScore, round to one decimal place.\n    score = Math.min(score, SecurityReportConstants.maxScore);\n    score = Math.max(score, SecurityReportConstants.minScore);\n    score = Math.round(score * 10) / 10;\n    return {\n      score: score,\n      advice: SecurityReportConstants.adviceSetLongerPassword10,\n      passwordLength: password.length,\n      variationCount: variationCount,\n    };\n  }\n\n  function fromRating(rating) {\n    const score = rating.score;\n    if (score == null || score <= SecurityReportConstants.weakMaxScore) {\n      return SecurityReportConstants.passwordStrengthWeak;\n    } else if (score < SecurityReportConstants.poorMaxScore) {\n      return SecurityReportConstants.passwordStrengthPoor;\n    } else if (score < SecurityReportConstants.goodMaxScore) {\n      return SecurityReportConstants.passwordStrengthGood;\n    } else {\n      return SecurityReportConstants.passwordStrengthStrong;\n    }\n  }\n\n/**\n * checks if the given password complies with the minimal complexity\n *\n * @param password\n * @returns {*}\n */\nfunction isStrongEnough(password, generatorSettings = DEFAULT_SETTINGS) {\n    if (\n        uppercaseMinCount + lowercaseMinCount + numberMinCount + specialMinCount >\n        generatorSettings.passwordLength\n    ) {\n        // password can never comply, so we skip check\n        return true;\n    }\n\n    const {\n        includeLettersUppercase = true,\n        includeLettersLowercase = true,\n        includeNumbers = true,\n        includeSpecialChars = true,\n        passwordLettersUppercase = '',\n        passwordLettersLowercase = '',\n        passwordNumbers = '',\n        passwordSpecialChars = '',\n    } = generatorSettings;\n\n    const uc = password.match(\n        new RegExp(\"([\" + escapeRegExp(passwordLettersUppercase) + \"])\", \"g\")\n    );\n    const lc = password.match(\n        new RegExp(\"([\" + escapeRegExp(passwordLettersLowercase) + \"])\", \"g\")\n    );\n    const n = password.match(\n        new RegExp(\"([\" + escapeRegExp(passwordNumbers) + \"])\", \"g\")\n    );\n    const sc = password.match(\n        new RegExp(\"([\" + escapeRegExp(passwordSpecialChars) + \"])\", \"g\")\n    );\n\n    const uc_test_result = includeLettersUppercase ? (\n        passwordLettersUppercase.length === 0 ||\n        (uc && uc.length >= uppercaseMinCount)\n    ) : true;\n    const lc_test_result = includeLettersLowercase ? (\n        passwordLettersLowercase.length === 0 ||\n        (lc && lc.length >= lowercaseMinCount)\n    ) : true;\n    const n_test_result = includeNumbers ? (\n        passwordNumbers.length === 0 || (n && n.length >= numberMinCount)\n    ) : true;\n    const sc_test_result = includeSpecialChars ? (\n        passwordSpecialChars.length === 0 || (sc && sc.length >= specialMinCount)\n    ) : true;\n\n    return uc_test_result && lc_test_result && n_test_result && sc_test_result;\n}\n\n/**\n * escapes regex string\n *\n * @param str\n * @returns {*}\n */\nfunction escapeRegExp(str) {\n    // from sindresorhus/escape-string-regexp under MIT License\n\n    if (typeof str !== \"string\") {\n        throw new TypeError(\"Expected a string\");\n    }\n\n    return str.replace(new RegExp(\"[|\\\\\\\\{}()[\\\\]^$+*?.-]\", \"g\"), \"\\\\$&\");\n}\n\n/**\n * generates a password based on the length requirement and a string with all allowed characters\n *\n * @param {int}  length The length of the password\n * @param {string}  allowedCharacters A string containing all allowed characters\n *\n * @returns {string} Returns the password\n */\nfunction generatePassword(length, allowedCharacters) {\n    const allowed_characters_length = allowedCharacters.length;\n    let password = \"\";\n\n    // Create a Uint32Array(1) for storing the random number\n    const randomBuffer = new Uint32Array(1);\n\n    for (let i = 0; i < length; i++) {\n        // Use Web Crypto API to fill the array with a random number\n        window.crypto.getRandomValues(randomBuffer);\n        \n        // Use the random value to select a character (normalized to the range)\n        const pos = Math.floor((randomBuffer[0] / 0xFFFFFFFF) * allowed_characters_length);\n        password = password + allowedCharacters.charAt(pos);\n    }\n\n    return password;\n}\n\n/**\n *\n * Main function to generate a random password based on the specified settings.\n *\n * @param [passwordLength]\n * @param [passwordLettersUppercase]\n * @param [passwordLettersLowercase]\n * @param [passwordNumbers]\n * @param [passwordSpecialChars]\n *\n * @returns {string} Returns the generated random password\n */\nfunction generate(passwordLength, passwordLettersUppercase, passwordLettersLowercase, passwordNumbers, passwordSpecialChars) {\n    let password = \"\";\n\n    const settings = {\n        passwordLength: passwordLength || DEFAULT_SETTINGS.passwordLength,\n        passwordLettersUppercase: passwordLettersUppercase || DEFAULT_SETTINGS.passwordLettersUppercase,\n        passwordLettersLowercase: passwordLettersLowercase || DEFAULT_SETTINGS.passwordLettersLowercase,\n        passwordNumbers: passwordNumbers || DEFAULT_SETTINGS.passwordNumbers,\n        passwordSpecialChars: passwordSpecialChars || DEFAULT_SETTINGS.passwordSpecialChars,\n        includeLettersUppercase: !!passwordLettersUppercase || DEFAULT_SETTINGS.includeLettersUppercase,\n        includeLettersLowercase: !!passwordLettersLowercase || DEFAULT_SETTINGS.includeLettersLowercase,\n        includeNumbers: !!passwordNumbers || DEFAULT_SETTINGS.includeNumbers,\n        includeSpecialChars: !!passwordSpecialChars || DEFAULT_SETTINGS.includeSpecialChars\n    };\n\n    while (!isStrongEnough(password, settings)) {\n        password = generatePassword(\n            settings.passwordLength,\n            settings.passwordLettersUppercase +\n            settings.passwordLettersLowercase +\n            settings.passwordNumbers +\n            settings.passwordSpecialChars\n        );\n    }\n    return password;\n}\n\n/**\n *\n * Main function to generate a random password based on the specified settings.\n *\n * @param [settings]\n *\n * @returns {string} Returns the generated random password\n */\nfunction generateWithSettings(settings = DEFAULT_SETTINGS) {\n\n    const {\n        includeLettersUppercase = true,\n        includeLettersLowercase = true,\n        includeNumbers = true,\n        includeSpecialChars = true,\n    } = settings;\n\n    let alphabet = \"\";\n    if (includeLettersUppercase) {\n        alphabet += settings.passwordLettersUppercase;\n    }\n\n    if (includeLettersLowercase) {\n        alphabet += settings.passwordLettersLowercase;\n    }\n\n    if (includeNumbers) {\n        alphabet += settings.passwordNumbers;\n    }\n\n    if (includeSpecialChars) {\n        alphabet += settings.passwordSpecialChars;\n    }\n\n    let password = \"\";\n    while (!isStrongEnough(password, settings)) {\n        password = generatePassword(\n            settings.passwordLength, alphabet\n        );\n    }\n    return password;\n}\n\nfunction updatePasswordStrengthTexts(weakText, poorText, goodText, strongText) {\n    SecurityReportConstants.passwordStrengthWeak = weakText;\n    SecurityReportConstants.passwordStrengthPoor = poorText;\n    SecurityReportConstants.passwordStrengthGood = goodText;\n    SecurityReportConstants.passwordStrengthStrong = strongText;\n}\n\nconst datastorePasswordService = {\n    generatePassword: generatePassword,\n    generate: generate,\n    generateWithSettings: generateWithSettings,\n    ratePasswordFromPasswordInfo: ratePasswordFromPasswordInfo,\n    fromRating: fromRating,\n    updatePasswordStrengthTexts: updatePasswordStrengthTexts,\n    SecurityReportConstants,\n};\n\nexport default datastorePasswordService;"],"names":["DEFAULT_SETTINGS","SecurityReportConstants","ratePasswordFromPasswordInfo","password","variations","variationCount","score","fromRating","rating","isStrongEnough","generatorSettings","includeLettersUppercase","includeLettersLowercase","includeNumbers","includeSpecialChars","passwordLettersUppercase","passwordLettersLowercase","passwordNumbers","passwordSpecialChars","uc","escapeRegExp","lc","n","sc","uc_test_result","lc_test_result","n_test_result","sc_test_result","str","generatePassword","length","allowedCharacters","allowed_characters_length","randomBuffer","i","pos","generate","passwordLength","settings","generateWithSettings","alphabet","updatePasswordStrengthTexts","weakText","poorText","goodText","strongText","datastorePasswordService"],"mappings":"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"}