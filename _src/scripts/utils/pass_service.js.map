{"version":3,"file":"pass_service.js","sources":["../../../src/scripts/utils/pass_service.js"],"sourcesContent":["/**\n * Service to manage the password datastore\n */\n/* eslint-disable */\n\nconst uppercaseMinCount = 1;\nconst lowercaseMinCount = 1;\nconst numberMinCount = 1;\nconst specialMinCount = 1;\n\nconst DEFAULT_SETTINGS = {\n    passwordLength: 16,\n    includeLettersUppercase: true,\n    includeLettersLowercase: true,\n    includeNumbers: true,\n    includeSpecialChars: true,\n    passwordLettersUppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',\n    passwordLettersLowercase: 'abcdefghijklmnopqrstuvwxyz',\n    passwordNumbers: '0123456789',\n    passwordSpecialChars: '!@#$%^&*()_+-=[]{}|;:,.<>?'\n  };\n\n  const SecurityReportConstants = {\n    // Length and score constants\n    minPasswordLength: 8,\n    maxPasswordLength: 16,\n    minVariationEnforcePasswordLength: 15,\n    minVariationLength: 3,\n    variationPenalty: 0.15,\n    maxScore: 100,\n    minScore: 0,\n    weakMaxScore: 20,\n    poorMaxScore: 40,\n    goodMaxScore: 80,\n    newPasswordMaxDays: 90,\n  \n    // Variation keys\n    digitsKey: 'digits',\n    lowerKey: 'lower',\n    upperKey: 'upper',\n    nonWordsKey: 'nonWords',\n\n    // Password strength labels\n    passwordStrengthWeak: 'weak',\n    passwordStrengthPoor: 'poor',\n    passwordStrengthGood: 'good',\n    passwordStrengthStrong: 'strong',\n  \n    // Advice constants\n    adviceSetLongerPassword: 'SET_LONGER_PASSWORD',\n    adviceSetLongerOrMoreComplexPassword: 'SET_LONGER_OR_MORE_COMPLEX_PASSWORD',\n    adviceSetLongerPassword10: 'SET_LONGER_PASSWORD_10',\n  };\n  \n  /**\n   * Computes a score for the provided password string.\n   * @param {string} password - The password to evaluate.\n   * @returns {Object} An object containing the score, advice, passwordLength, and variationCount.\n   */\n  function ratePasswordFromPasswordInfo(password) {\n    // If password is empty or undefined, return a minimal score.\n    if (!password) {\n      return {\n        score: SecurityReportConstants.minScore,\n        advice: SecurityReportConstants.adviceSetLongerPassword,\n        passwordLength: 0,\n        variationCount: 0,\n      };\n    }\n  \n    // Evaluate character variations using regular expressions.\n    const variations = {\n      [SecurityReportConstants.digitsKey]: /\\d/.test(password),\n      [SecurityReportConstants.lowerKey]: /[a-z]/.test(password),\n      [SecurityReportConstants.upperKey]: /[A-Z]/.test(password),\n      [SecurityReportConstants.nonWordsKey]: /\\W/.test(password),\n    };\n  \n    // Count the number of variation conditions that passed.\n    const variationCount = Object.values(variations).filter(Boolean).length;\n  \n    // If the password is too short, return a low score.\n    if (password.length <= SecurityReportConstants.minPasswordLength) {\n      return {\n        score: SecurityReportConstants.minScore,\n        advice: SecurityReportConstants.adviceSetLongerPassword,\n        passwordLength: password.length,\n        variationCount: variationCount,\n        minPasswordLength: SecurityReportConstants.minPasswordLength,\n      };\n    }\n  \n    // If the password is very long, consider it max score.\n    if (password.length >= SecurityReportConstants.maxPasswordLength) {\n      return {\n        score: SecurityReportConstants.maxScore,\n        advice: '',\n        passwordLength: password.length,\n        variationCount: variationCount,\n        maxPasswordLength: SecurityReportConstants.maxPasswordLength,\n      };\n    }\n  \n    // Compute a base score based on the password length.\n    let score = ((password.length - SecurityReportConstants.minPasswordLength) *\n                 SecurityReportConstants.maxScore) /\n                (SecurityReportConstants.maxPasswordLength - SecurityReportConstants.minPasswordLength);\n  \n    // If the password length is relatively short and the variation count is below minimum, apply a penalty.\n    if (\n      password.length <= SecurityReportConstants.minVariationEnforcePasswordLength &&\n      variationCount < SecurityReportConstants.minVariationLength\n    ) {\n      score = score * (1 - (SecurityReportConstants.minVariationLength - variationCount) * SecurityReportConstants.variationPenalty);\n      score = Math.min(score, SecurityReportConstants.maxScore);\n      score = Math.max(score, SecurityReportConstants.minScore);\n      score = Math.round(score * 10) / 10;\n      return {\n        score: score,\n        advice: SecurityReportConstants.adviceSetLongerOrMoreComplexPassword,\n        passwordLength: password.length,\n        variationCount: variationCount,\n      };\n    }\n  \n    // Clamp the score between minScore and maxScore, round to one decimal place.\n    score = Math.min(score, SecurityReportConstants.maxScore);\n    score = Math.max(score, SecurityReportConstants.minScore);\n    score = Math.round(score * 10) / 10;\n    return {\n      score: score,\n      advice: SecurityReportConstants.adviceSetLongerPassword10,\n      passwordLength: password.length,\n      variationCount: variationCount,\n    };\n  }\n\n  function fromRating(rating) {\n    const score = rating.score;\n    if (score == null || score <= SecurityReportConstants.weakMaxScore) {\n      return SecurityReportConstants.passwordStrengthWeak;\n    } else if (score < SecurityReportConstants.poorMaxScore) {\n      return SecurityReportConstants.passwordStrengthPoor;\n    } else if (score < SecurityReportConstants.goodMaxScore) {\n      return SecurityReportConstants.passwordStrengthGood;\n    } else {\n      return SecurityReportConstants.passwordStrengthStrong;\n    }\n  }\n\n/**\n * checks if the given password complies with the minimal complexity\n *\n * @param password\n * @returns {*}\n */\nfunction isStrongEnough(password, generatorSettings = DEFAULT_SETTINGS) {\n    if (\n        uppercaseMinCount + lowercaseMinCount + numberMinCount + specialMinCount >\n        generatorSettings.passwordLength\n    ) {\n        // password can never comply, so we skip check\n        return true;\n    }\n\n    const {\n        includeLettersUppercase = true,\n        includeLettersLowercase = true,\n        includeNumbers = true,\n        includeSpecialChars = true,\n        passwordLettersUppercase = '',\n        passwordLettersLowercase = '',\n        passwordNumbers = '',\n        passwordSpecialChars = '',\n    } = generatorSettings;\n\n    const uc = password.match(\n        new RegExp(\"([\" + escapeRegExp(passwordLettersUppercase) + \"])\", \"g\")\n    );\n    const lc = password.match(\n        new RegExp(\"([\" + escapeRegExp(passwordLettersLowercase) + \"])\", \"g\")\n    );\n    const n = password.match(\n        new RegExp(\"([\" + escapeRegExp(passwordNumbers) + \"])\", \"g\")\n    );\n    const sc = password.match(\n        new RegExp(\"([\" + escapeRegExp(passwordSpecialChars) + \"])\", \"g\")\n    );\n\n    const uc_test_result = includeLettersUppercase ? (\n        passwordLettersUppercase.length === 0 ||\n        (uc && uc.length >= uppercaseMinCount)\n    ) : true;\n    const lc_test_result = includeLettersLowercase ? (\n        passwordLettersLowercase.length === 0 ||\n        (lc && lc.length >= lowercaseMinCount)\n    ) : true;\n    const n_test_result = includeNumbers ? (\n        passwordNumbers.length === 0 || (n && n.length >= numberMinCount)\n    ) : true;\n    const sc_test_result = includeSpecialChars ? (\n        passwordSpecialChars.length === 0 || (sc && sc.length >= specialMinCount)\n    ) : true;\n\n    return uc_test_result && lc_test_result && n_test_result && sc_test_result;\n}\n\n/**\n * escapes regex string\n *\n * @param str\n * @returns {*}\n */\nfunction escapeRegExp(str) {\n    // from sindresorhus/escape-string-regexp under MIT License\n\n    if (typeof str !== \"string\") {\n        throw new TypeError(\"Expected a string\");\n    }\n\n    return str.replace(new RegExp(\"[|\\\\\\\\{}()[\\\\]^$+*?.-]\", \"g\"), \"\\\\$&\");\n}\n\n/**\n * generates a password based on the length requirement and a string with all allowed characters\n *\n * @param {int}  length The length of the password\n * @param {string}  allowedCharacters A string containing all allowed characters\n *\n * @returns {string} Returns the password\n */\nfunction generatePassword(length, allowedCharacters) {\n    const allowed_characters_length = allowedCharacters.length;\n    let password = \"\";\n\n    // Create a Uint32Array(1) for storing the random number\n    const randomBuffer = new Uint32Array(1);\n\n    for (let i = 0; i < length; i++) {\n        // Use Web Crypto API to fill the array with a random number\n        window.crypto.getRandomValues(randomBuffer);\n        \n        // Use the random value to select a character (normalized to the range)\n        const pos = Math.floor((randomBuffer[0] / 0xFFFFFFFF) * allowed_characters_length);\n        password = password + allowedCharacters.charAt(pos);\n    }\n\n    return password;\n}\n\n/**\n *\n * Main function to generate a random password based on the specified settings.\n *\n * @param [passwordLength]\n * @param [passwordLettersUppercase]\n * @param [passwordLettersLowercase]\n * @param [passwordNumbers]\n * @param [passwordSpecialChars]\n *\n * @returns {string} Returns the generated random password\n */\nfunction generate(passwordLength, passwordLettersUppercase, passwordLettersLowercase, passwordNumbers, passwordSpecialChars) {\n    let password = \"\";\n\n    const settings = {\n        passwordLength: passwordLength || DEFAULT_SETTINGS.passwordLength,\n        passwordLettersUppercase: passwordLettersUppercase || DEFAULT_SETTINGS.passwordLettersUppercase,\n        passwordLettersLowercase: passwordLettersLowercase || DEFAULT_SETTINGS.passwordLettersLowercase,\n        passwordNumbers: passwordNumbers || DEFAULT_SETTINGS.passwordNumbers,\n        passwordSpecialChars: passwordSpecialChars || DEFAULT_SETTINGS.passwordSpecialChars,\n        includeLettersUppercase: !!passwordLettersUppercase || DEFAULT_SETTINGS.includeLettersUppercase,\n        includeLettersLowercase: !!passwordLettersLowercase || DEFAULT_SETTINGS.includeLettersLowercase,\n        includeNumbers: !!passwordNumbers || DEFAULT_SETTINGS.includeNumbers,\n        includeSpecialChars: !!passwordSpecialChars || DEFAULT_SETTINGS.includeSpecialChars\n    };\n\n    while (!isStrongEnough(password, settings)) {\n        password = generatePassword(\n            settings.passwordLength,\n            settings.passwordLettersUppercase +\n            settings.passwordLettersLowercase +\n            settings.passwordNumbers +\n            settings.passwordSpecialChars\n        );\n    }\n    return password;\n}\n\n/**\n *\n * Main function to generate a random password based on the specified settings.\n *\n * @param [settings]\n *\n * @returns {string} Returns the generated random password\n */\nfunction generateWithSettings(settings = DEFAULT_SETTINGS) {\n\n    const {\n        includeLettersUppercase = true,\n        includeLettersLowercase = true,\n        includeNumbers = true,\n        includeSpecialChars = true,\n    } = settings;\n\n    let alphabet = \"\";\n    if (includeLettersUppercase) {\n        alphabet += settings.passwordLettersUppercase;\n    }\n\n    if (includeLettersLowercase) {\n        alphabet += settings.passwordLettersLowercase;\n    }\n\n    if (includeNumbers) {\n        alphabet += settings.passwordNumbers;\n    }\n\n    if (includeSpecialChars) {\n        alphabet += settings.passwordSpecialChars;\n    }\n\n    let password = \"\";\n    while (!isStrongEnough(password, settings)) {\n        password = generatePassword(\n            settings.passwordLength, alphabet\n        );\n    }\n    return password;\n}\n\nfunction updatePasswordStrengthTexts(weakText, poorText, goodText, strongText) {\n    SecurityReportConstants.passwordStrengthWeak = weakText;\n    SecurityReportConstants.passwordStrengthPoor = poorText;\n    SecurityReportConstants.passwordStrengthGood = goodText;\n    SecurityReportConstants.passwordStrengthStrong = strongText;\n}\n\nconst datastorePasswordService = {\n    generatePassword: generatePassword,\n    generate: generate,\n    generateWithSettings: generateWithSettings,\n    ratePasswordFromPasswordInfo: ratePasswordFromPasswordInfo,\n    fromRating: fromRating,\n    updatePasswordStrengthTexts: updatePasswordStrengthTexts,\n    SecurityReportConstants,\n};\n\nexport default datastorePasswordService;"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AAEA,MAAM,iBAAiB,GAAG,CAAC;AAC3B,MAAM,iBAAiB,GAAG,CAAC;AAC3B,MAAM,cAAc,GAAG,CAAC;AACxB,MAAM,eAAe,GAAG,CAAC;;AAEzB,MAAM,gBAAgB,GAAG;AACzB,IAAI,cAAc,EAAE,EAAE;AACtB,IAAI,uBAAuB,EAAE,IAAI;AACjC,IAAI,uBAAuB,EAAE,IAAI;AACjC,IAAI,cAAc,EAAE,IAAI;AACxB,IAAI,mBAAmB,EAAE,IAAI;AAC7B,IAAI,wBAAwB,EAAE,4BAA4B;AAC1D,IAAI,wBAAwB,EAAE,4BAA4B;AAC1D,IAAI,eAAe,EAAE,YAAY;AACjC,IAAI,oBAAoB,EAAE;AAC1B,GAAG;;AAEH,EAAE,MAAM,uBAAuB,GAAG;AAClC;AACA,IAAI,iBAAiB,EAAE,CAAC;AACxB,IAAI,iBAAiB,EAAE,EAAE;AACzB,IAAI,iCAAiC,EAAE,EAAE;AACzC,IAAI,kBAAkB,EAAE,CAAC;AACzB,IAAI,gBAAgB,EAAE,IAAI;AAC1B,IAAI,QAAQ,EAAE,GAAG;AACjB,IAAI,QAAQ,EAAE,CAAC;AACf,IAAI,YAAY,EAAE,EAAE;AACpB,IAAI,YAAY,EAAE,EAAE;AACpB,IAAI,YAAY,EAAE,EAAE;AACpB,IAAI,kBAAkB,EAAE,EAAE;AAC1B;AACA;AACA,IAAI,SAAS,EAAE,QAAQ;AACvB,IAAI,QAAQ,EAAE,OAAO;AACrB,IAAI,QAAQ,EAAE,OAAO;AACrB,IAAI,WAAW,EAAE,UAAU;;AAE3B;AACA,IAAI,oBAAoB,EAAE,MAAM;AAChC,IAAI,oBAAoB,EAAE,MAAM;AAChC,IAAI,oBAAoB,EAAE,MAAM;AAChC,IAAI,sBAAsB,EAAE,QAAQ;AACpC;AACA;AACA,IAAI,uBAAuB,EAAE,qBAAqB;AAClD,IAAI,oCAAoC,EAAE,qCAAqC;AAC/E,IAAI,yBAAyB,EAAE,wBAAwB;AACvD,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,SAAS,4BAA4B,CAAC,QAAQ,EAAE;AAClD;AACA,IAAI,IAAI,CAAC,QAAQ,EAAE;AACnB,MAAM,OAAO;AACb,QAAQ,KAAK,EAAE,uBAAuB,CAAC,QAAQ;AAC/C,QAAQ,MAAM,EAAE,uBAAuB,CAAC,uBAAuB;AAC/D,QAAQ,cAAc,EAAE,CAAC;AACzB,QAAQ,cAAc,EAAE,CAAC;AACzB,OAAO;AACP;AACA;AACA;AACA,IAAI,MAAM,UAAU,GAAG;AACvB,MAAM,CAAC,uBAAuB,CAAC,SAAS,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AAC9D,MAAM,CAAC,uBAAuB,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;AAChE,MAAM,CAAC,uBAAuB,CAAC,QAAQ,GAAG,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC;AAChE,MAAM,CAAC,uBAAuB,CAAC,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC;AAChE,KAAK;AACL;AACA;AACA,IAAI,MAAM,cAAc,GAAG,MAAM,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,MAAM;AAC3E;AACA;AACA,IAAI,IAAI,QAAQ,CAAC,MAAM,IAAI,uBAAuB,CAAC,iBAAiB,EAAE;AACtE,MAAM,OAAO;AACb,QAAQ,KAAK,EAAE,uBAAuB,CAAC,QAAQ;AAC/C,QAAQ,MAAM,EAAE,uBAAuB,CAAC,uBAAuB;AAC/D,QAAQ,cAAc,EAAE,QAAQ,CAAC,MAAM;AACvC,QAAQ,cAAc,EAAE,cAAc;AACtC,QAAQ,iBAAiB,EAAE,uBAAuB,CAAC,iBAAiB;AACpE,OAAO;AACP;AACA;AACA;AACA,IAAI,IAAI,QAAQ,CAAC,MAAM,IAAI,uBAAuB,CAAC,iBAAiB,EAAE;AACtE,MAAM,OAAO;AACb,QAAQ,KAAK,EAAE,uBAAuB,CAAC,QAAQ;AAC/C,QAAQ,MAAM,EAAE,EAAE;AAClB,QAAQ,cAAc,EAAE,QAAQ,CAAC,MAAM;AACvC,QAAQ,cAAc,EAAE,cAAc;AACtC,QAAQ,iBAAiB,EAAE,uBAAuB,CAAC,iBAAiB;AACpE,OAAO;AACP;AACA;AACA;AACA,IAAI,IAAI,KAAK,GAAG,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,uBAAuB,CAAC,iBAAiB;AAC7E,iBAAiB,uBAAuB,CAAC,QAAQ;AACjD,iBAAiB,uBAAuB,CAAC,iBAAiB,GAAG,uBAAuB,CAAC,iBAAiB,CAAC;AACvG;AACA;AACA,IAAI;AACJ,MAAM,QAAQ,CAAC,MAAM,IAAI,uBAAuB,CAAC,iCAAiC;AAClF,MAAM,cAAc,GAAG,uBAAuB,CAAC;AAC/C,MAAM;AACN,MAAM,KAAK,GAAG,KAAK,IAAI,CAAC,GAAG,CAAC,uBAAuB,CAAC,kBAAkB,GAAG,cAAc,IAAI,uBAAuB,CAAC,gBAAgB,CAAC;AACpI,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,uBAAuB,CAAC,QAAQ,CAAC;AAC/D,MAAM,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,uBAAuB,CAAC,QAAQ,CAAC;AAC/D,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,EAAE;AACzC,MAAM,OAAO;AACb,QAAQ,KAAK,EAAE,KAAK;AACpB,QAAQ,MAAM,EAAE,uBAAuB,CAAC,oCAAoC;AAC5E,QAAQ,cAAc,EAAE,QAAQ,CAAC,MAAM;AACvC,QAAQ,cAAc,EAAE,cAAc;AACtC,OAAO;AACP;AACA;AACA;AACA,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,uBAAuB,CAAC,QAAQ,CAAC;AAC7D,IAAI,KAAK,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,EAAE,uBAAuB,CAAC,QAAQ,CAAC;AAC7D,IAAI,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,EAAE,CAAC,GAAG,EAAE;AACvC,IAAI,OAAO;AACX,MAAM,KAAK,EAAE,KAAK;AAClB,MAAM,MAAM,EAAE,uBAAuB,CAAC,yBAAyB;AAC/D,MAAM,cAAc,EAAE,QAAQ,CAAC,MAAM;AACrC,MAAM,cAAc,EAAE,cAAc;AACpC,KAAK;AACL;;AAEA,EAAE,SAAS,UAAU,CAAC,MAAM,EAAE;AAC9B,IAAI,MAAM,KAAK,GAAG,MAAM,CAAC,KAAK;AAC9B,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,uBAAuB,CAAC,YAAY,EAAE;AACxE,MAAM,OAAO,uBAAuB,CAAC,oBAAoB;AACzD,KAAK,MAAM,IAAI,KAAK,GAAG,uBAAuB,CAAC,YAAY,EAAE;AAC7D,MAAM,OAAO,uBAAuB,CAAC,oBAAoB;AACzD,KAAK,MAAM,IAAI,KAAK,GAAG,uBAAuB,CAAC,YAAY,EAAE;AAC7D,MAAM,OAAO,uBAAuB,CAAC,oBAAoB;AACzD,KAAK,MAAM;AACX,MAAM,OAAO,uBAAuB,CAAC,sBAAsB;AAC3D;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,cAAc,CAAC,QAAQ,EAAE,iBAAiB,GAAG,gBAAgB,EAAE;AACxE,IAAI;AACJ,QAAQ,iBAAiB,GAAG,iBAAiB,GAAG,cAAc,GAAG,eAAe;AAChF,QAAQ,iBAAiB,CAAC;AAC1B,MAAM;AACN;AACA,QAAQ,OAAO,IAAI;AACnB;;AAEA,IAAI,MAAM;AACV,QAAQ,uBAAuB,GAAG,IAAI;AACtC,QAAQ,uBAAuB,GAAG,IAAI;AACtC,QAAQ,cAAc,GAAG,IAAI;AAC7B,QAAQ,mBAAmB,GAAG,IAAI;AAClC,QAAQ,wBAAwB,GAAG,EAAE;AACrC,QAAQ,wBAAwB,GAAG,EAAE;AACrC,QAAQ,eAAe,GAAG,EAAE;AAC5B,QAAQ,oBAAoB,GAAG,EAAE;AACjC,KAAK,GAAG,iBAAiB;;AAEzB,IAAI,MAAM,EAAE,GAAG,QAAQ,CAAC,KAAK;AAC7B,QAAQ,IAAI,MAAM,CAAC,IAAI,GAAG,YAAY,CAAC,wBAAwB,CAAC,GAAG,IAAI,EAAE,GAAG;AAC5E,KAAK;AACL,IAAI,MAAM,EAAE,GAAG,QAAQ,CAAC,KAAK;AAC7B,QAAQ,IAAI,MAAM,CAAC,IAAI,GAAG,YAAY,CAAC,wBAAwB,CAAC,GAAG,IAAI,EAAE,GAAG;AAC5E,KAAK;AACL,IAAI,MAAM,CAAC,GAAG,QAAQ,CAAC,KAAK;AAC5B,QAAQ,IAAI,MAAM,CAAC,IAAI,GAAG,YAAY,CAAC,eAAe,CAAC,GAAG,IAAI,EAAE,GAAG;AACnE,KAAK;AACL,IAAI,MAAM,EAAE,GAAG,QAAQ,CAAC,KAAK;AAC7B,QAAQ,IAAI,MAAM,CAAC,IAAI,GAAG,YAAY,CAAC,oBAAoB,CAAC,GAAG,IAAI,EAAE,GAAG;AACxE,KAAK;;AAEL,IAAI,MAAM,cAAc,GAAG,uBAAuB;AAClD,QAAQ,wBAAwB,CAAC,MAAM,KAAK,CAAC;AAC7C,SAAS,EAAE,IAAI,EAAE,CAAC,MAAM,IAAI,iBAAiB;AAC7C,QAAQ,IAAI;AACZ,IAAI,MAAM,cAAc,GAAG,uBAAuB;AAClD,QAAQ,wBAAwB,CAAC,MAAM,KAAK,CAAC;AAC7C,SAAS,EAAE,IAAI,EAAE,CAAC,MAAM,IAAI,iBAAiB;AAC7C,QAAQ,IAAI;AACZ,IAAI,MAAM,aAAa,GAAG,cAAc;AACxC,QAAQ,eAAe,CAAC,MAAM,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,MAAM,IAAI,cAAc;AACxE,QAAQ,IAAI;AACZ,IAAI,MAAM,cAAc,GAAG,mBAAmB;AAC9C,QAAQ,oBAAoB,CAAC,MAAM,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,CAAC,MAAM,IAAI,eAAe;AAChF,QAAQ,IAAI;;AAEZ,IAAI,OAAO,cAAc,IAAI,cAAc,IAAI,aAAa,IAAI,cAAc;AAC9E;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,YAAY,CAAC,GAAG,EAAE;AAC3B;;AAEA,IAAI,IAAI,OAAO,GAAG,KAAK,QAAQ,EAAE;AACjC,QAAQ,MAAM,IAAI,SAAS,CAAC,mBAAmB,CAAC;AAChD;;AAEA,IAAI,OAAO,GAAG,CAAC,OAAO,CAAC,IAAI,MAAM,CAAC,wBAAwB,EAAE,GAAG,CAAC,EAAE,MAAM,CAAC;AACzE;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,gBAAgB,CAAC,MAAM,EAAE,iBAAiB,EAAE;AACrD,IAAI,MAAM,yBAAyB,GAAG,iBAAiB,CAAC,MAAM;AAC9D,IAAI,IAAI,QAAQ,GAAG,EAAE;;AAErB;AACA,IAAI,MAAM,YAAY,GAAG,IAAI,WAAW,CAAC,CAAC,CAAC;;AAE3C,IAAI,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;AACrC;AACA,QAAQ,MAAM,CAAC,MAAM,CAAC,eAAe,CAAC,YAAY,CAAC;AACnD;AACA;AACA,QAAQ,MAAM,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,GAAG,UAAU,IAAI,yBAAyB,CAAC;AAC1F,QAAQ,QAAQ,GAAG,QAAQ,GAAG,iBAAiB,CAAC,MAAM,CAAC,GAAG,CAAC;AAC3D;;AAEA,IAAI,OAAO,QAAQ;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,QAAQ,CAAC,cAAc,EAAE,wBAAwB,EAAE,wBAAwB,EAAE,eAAe,EAAE,oBAAoB,EAAE;AAC7H,IAAI,IAAI,QAAQ,GAAG,EAAE;;AAErB,IAAI,MAAM,QAAQ,GAAG;AACrB,QAAQ,cAAc,EAAE,cAAc,IAAI,gBAAgB,CAAC,cAAc;AACzE,QAAQ,wBAAwB,EAAE,wBAAwB,IAAI,gBAAgB,CAAC,wBAAwB;AACvG,QAAQ,wBAAwB,EAAE,wBAAwB,IAAI,gBAAgB,CAAC,wBAAwB;AACvG,QAAQ,eAAe,EAAE,eAAe,IAAI,gBAAgB,CAAC,eAAe;AAC5E,QAAQ,oBAAoB,EAAE,oBAAoB,IAAI,gBAAgB,CAAC,oBAAoB;AAC3F,QAAQ,uBAAuB,EAAE,CAAC,CAAC,wBAAwB,IAAI,gBAAgB,CAAC,uBAAuB;AACvG,QAAQ,uBAAuB,EAAE,CAAC,CAAC,wBAAwB,IAAI,gBAAgB,CAAC,uBAAuB;AACvG,QAAQ,cAAc,EAAE,CAAC,CAAC,eAAe,IAAI,gBAAgB,CAAC,cAAc;AAC5E,QAAQ,mBAAmB,EAAE,CAAC,CAAC,oBAAoB,IAAI,gBAAgB,CAAC;AACxE,KAAK;;AAEL,IAAI,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;AAChD,QAAQ,QAAQ,GAAG,gBAAgB;AACnC,YAAY,QAAQ,CAAC,cAAc;AACnC,YAAY,QAAQ,CAAC,wBAAwB;AAC7C,YAAY,QAAQ,CAAC,wBAAwB;AAC7C,YAAY,QAAQ,CAAC,eAAe;AACpC,YAAY,QAAQ,CAAC;AACrB,SAAS;AACT;AACA,IAAI,OAAO,QAAQ;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,oBAAoB,CAAC,QAAQ,GAAG,gBAAgB,EAAE;;AAE3D,IAAI,MAAM;AACV,QAAQ,uBAAuB,GAAG,IAAI;AACtC,QAAQ,uBAAuB,GAAG,IAAI;AACtC,QAAQ,cAAc,GAAG,IAAI;AAC7B,QAAQ,mBAAmB,GAAG,IAAI;AAClC,KAAK,GAAG,QAAQ;;AAEhB,IAAI,IAAI,QAAQ,GAAG,EAAE;AACrB,IAAI,IAAI,uBAAuB,EAAE;AACjC,QAAQ,QAAQ,IAAI,QAAQ,CAAC,wBAAwB;AACrD;;AAEA,IAAI,IAAI,uBAAuB,EAAE;AACjC,QAAQ,QAAQ,IAAI,QAAQ,CAAC,wBAAwB;AACrD;;AAEA,IAAI,IAAI,cAAc,EAAE;AACxB,QAAQ,QAAQ,IAAI,QAAQ,CAAC,eAAe;AAC5C;;AAEA,IAAI,IAAI,mBAAmB,EAAE;AAC7B,QAAQ,QAAQ,IAAI,QAAQ,CAAC,oBAAoB;AACjD;;AAEA,IAAI,IAAI,QAAQ,GAAG,EAAE;AACrB,IAAI,OAAO,CAAC,cAAc,CAAC,QAAQ,EAAE,QAAQ,CAAC,EAAE;AAChD,QAAQ,QAAQ,GAAG,gBAAgB;AACnC,YAAY,QAAQ,CAAC,cAAc,EAAE;AACrC,SAAS;AACT;AACA,IAAI,OAAO,QAAQ;AACnB;;AAEA,SAAS,2BAA2B,CAAC,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,UAAU,EAAE;AAC/E,IAAI,uBAAuB,CAAC,oBAAoB,GAAG,QAAQ;AAC3D,IAAI,uBAAuB,CAAC,oBAAoB,GAAG,QAAQ;AAC3D,IAAI,uBAAuB,CAAC,oBAAoB,GAAG,QAAQ;AAC3D,IAAI,uBAAuB,CAAC,sBAAsB,GAAG,UAAU;AAC/D;;AAEK,MAAC,wBAAwB,GAAG;AACjC,IAAI,gBAAgB,EAAE,gBAAgB;AACtC,IAAI,QAAQ,EAAE,QAAQ;AACtB,IAAI,oBAAoB,EAAE,oBAAoB;AAC9C,IAAI,4BAA4B,EAAE,4BAA4B;AAC9D,IAAI,UAAU,EAAE,UAAU;AAC1B,IAAI,2BAA2B,EAAE,2BAA2B;AAC5D,IAAI,uBAAuB;AAC3B;;;;"}