{"version":3,"mappings":"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","names":["MAX_SAMPLING_RATE","DEFAULT_OPTIONS","isBot","getResolvedAudiences","applicableAudiences","options","context","usp","forcedAudience","results","key","_","replaceInner","path","element","plainPath","resp","html","e","parseExperimentConfig","json","config","line","str","variants","variantNames","vn","variantName","lastKey","vns","camelVN","isValidExperimentationConfig","v","inferEmptyPercentageSplits","variantsWithoutPercentage","remainingPercentage","result","variant","missingPercentage","getConfigForInstantExperiment","experimentId","instantExperiment","pluginOptions","audience","pages","p","splitString","splits","i","page","vname","getConfigForFullExperiment","getDecisionPolicy","props","getConfig","experiment","forcedExperiment","forcedVariant","experimentConfig","ued","__vitePreload","decision","runExperiment","document","err","currentPath","index","runCampaign","campaign","audiences","resolvedAudiences","allowedCampaigns","urlString","url","serveAudience","configuredAudiences","selectedAudience","origin","codeBasePath","isAdjusted","adjustedRumSamplingRate","checkpoint","data","loadEager","res","loadLazy"],"ignoreList":[],"sources":["../../../../src/plugins/experimentation/src/index.js"],"sourcesContent":["/*\n * Copyright 2022 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nconst MAX_SAMPLING_RATE = 10; // At a maximum we sample 1 in 10 requests\n\nexport const DEFAULT_OPTIONS = {\n  // Generic properties\n  rumSamplingRate: MAX_SAMPLING_RATE, // 1 in 10 requests\n\n  // Audiences related properties\n  audiences: {},\n  audiencesMetaTagPrefix: 'audience',\n  audiencesQueryParameter: 'audience',\n\n  // Campaigns related properties\n  campaignsMetaTagPrefix: 'campaign',\n  campaignsQueryParameter: 'campaign',\n\n  // Experimentation related properties\n  experimentsRoot: '/experiments',\n  experimentsConfigFile: 'manifest.json',\n  experimentsMetaTag: 'experiment',\n  experimentsQueryParameter: 'experiment',\n};\n\n/**\n * Checks if the current engine is detected as being a bot.\n * @returns `true` if the current engine is detected as being, `false` otherwise\n */\nfunction isBot() {\n  return navigator.userAgent.match(/bot|crawl|spider/i);\n}\n\n/**\n * Checks if any of the configured audiences on the page can be resolved.\n * @param {string[]} applicableAudiences a list of configured audiences for the page\n * @param {object} options the plugin options\n * @returns Returns the names of the resolved audiences, or `null` if no audience is configured\n */\nexport async function getResolvedAudiences(applicableAudiences, options, context) {\n  if (!applicableAudiences.length || !Object.keys(options.audiences).length) {\n    return null;\n  }\n  // If we have a forced audience set in the query parameters (typically for simulation purposes)\n  // we check if it is applicable\n  const usp = new URLSearchParams(window.location.search);\n  const forcedAudience = usp.has(options.audiencesQueryParameter)\n    ? context.toClassName(usp.get(options.audiencesQueryParameter))\n    : null;\n  if (forcedAudience) {\n    return applicableAudiences.includes(forcedAudience) ? [forcedAudience] : [];\n  }\n\n  // Otherwise, return the list of audiences that are resolved on the page\n  const results = await Promise.all(\n    applicableAudiences\n      .map((key) => {\n        if (options.audiences[key] && typeof options.audiences[key] === 'function') {\n          return options.audiences[key]();\n        }\n        return false;\n      }),\n  );\n  return applicableAudiences.filter((_, i) => results[i]);\n}\n\n/**\n * Replaces element with content from path\n * @param {string} path\n * @param {HTMLElement} element\n * @return Returns the path that was loaded or null if the loading failed\n */\nasync function replaceInner(path, element) {\n  const plainPath = path.endsWith('/')\n    ? `${path}index.plain.html`\n    : `${path}.plain.html`;\n  try {\n    const resp = await fetch(plainPath);\n    if (!resp.ok) {\n      // eslint-disable-next-line no-console\n      console.log('error loading content:', resp);\n      return false;\n    }\n    const html = await resp.text();\n    // eslint-disable-next-line no-param-reassign\n    element.innerHTML = html;\n    return plainPath;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(`error loading content: ${plainPath}`, e);\n  }\n  return null;\n}\n\n/**\n * Parses the experimentation configuration sheet and creates an internal model.\n *\n * Output model is expected to have the following structure:\n *      {\n *        id: <string>,\n *        label: <string>,\n *        blocks: <string>,\n *        audiences: [<string>],\n *        status: Active | Inactive,\n *        variantNames: [<string>],\n *        variants: {\n *          [variantName]: {\n *            label: <string>\n *            percentageSplit: <number 0-1>,\n *            pages: <string>,\n *            blocks: <string>,\n *          }\n *        }\n *      };\n */\nfunction parseExperimentConfig(json, context) {\n  const config = {};\n  try {\n    json.settings.data.forEach((line) => {\n      const key = context.toCamelCase(line.Name);\n      if (key === 'audience' || key === 'audiences') {\n        config.audiences = line.Value ? line.Value.split(',').map((str) => str.trim()) : [];\n      } else if (key === 'experimentName') {\n        config.label = line.Value;\n      } else {\n        config[key] = line.Value;\n      }\n    });\n    const variants = {};\n    let variantNames = Object.keys(json.experiences.data[0]);\n    variantNames.shift();\n    variantNames = variantNames.map((vn) => context.toCamelCase(vn));\n    variantNames.forEach((variantName) => {\n      variants[variantName] = {};\n    });\n    let lastKey = 'default';\n    json.experiences.data.forEach((line) => {\n      let key = context.toCamelCase(line.Name);\n      if (!key) key = lastKey;\n      lastKey = key;\n      const vns = Object.keys(line);\n      vns.shift();\n      vns.forEach((vn) => {\n        const camelVN = context.toCamelCase(vn);\n        if (key === 'pages' || key === 'blocks') {\n          variants[camelVN][key] = variants[camelVN][key] || [];\n          if (key === 'pages') variants[camelVN][key].push(new URL(line[vn]).pathname);\n          else variants[camelVN][key].push(line[vn]);\n        } else {\n          variants[camelVN][key] = line[vn];\n        }\n      });\n    });\n    config.variants = variants;\n    config.variantNames = variantNames;\n    return config;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log('error parsing experiment config:', e, json);\n  }\n  return null;\n}\n\n/**\n * Checks if the given config is a valid experimentation configuration.\n * @param {object} config the config to check\n * @returns `true` if it is valid, `false` otherwise\n */\nexport function isValidExperimentationConfig(config) {\n  if (!config.variantNames\n    || !config.variantNames.length\n    || !config.variants\n    || !Object.values(config.variants).length\n    || !Object.values(config.variants).every((v) => (\n      typeof v === 'object'\n      && !!v.blocks\n      && !!v.pages\n      && (v.percentageSplit === '' || !!v.percentageSplit)\n    ))) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * Calculates percentage split for variants where the percentage split is not\n * explicitly configured.\n * Substracts from 100 the explicitly configured percentage splits,\n * and divides the remaining percentage, among the variants without explicit\n * percentage split configured\n * @param {Array} variant objects\n */\nfunction inferEmptyPercentageSplits(variants) {\n  const variantsWithoutPercentage = [];\n\n  const remainingPercentage = variants.reduce((result, variant) => {\n    if (!variant.percentageSplit) {\n      variantsWithoutPercentage.push(variant);\n    }\n    const newResult = result - parseFloat(variant.percentageSplit || 0);\n    return newResult;\n  }, 1);\n  if (variantsWithoutPercentage.length) {\n    const missingPercentage = remainingPercentage / variantsWithoutPercentage.length;\n    variantsWithoutPercentage.forEach((v) => {\n      v.percentageSplit = missingPercentage.toFixed(2);\n    });\n  }\n}\n\n/**\n * Gets experiment config from the metadata.\n *\n * @param {string} experimentId The experiment identifier\n * @param {string} instantExperiment The list of varaints\n * @returns {object} the experiment manifest\n */\nfunction getConfigForInstantExperiment(\n  experimentId,\n  instantExperiment,\n  pluginOptions,\n  context,\n) {\n  const audience = context.getMetadata(`${pluginOptions.experimentsMetaTag}-audience`);\n  const config = {\n    label: `Instant Experiment: ${experimentId}`,\n    audiences: audience ? audience.split(',').map(context.toClassName) : [],\n    status: 'Active',\n    id: experimentId,\n    variants: {},\n    variantNames: [],\n  };\n\n  const pages = instantExperiment.split(',').map((p) => new URL(p.trim()).pathname);\n\n  const splitString = context.getMetadata(`${pluginOptions.experimentsMetaTag}-split`);\n  const splits = splitString\n    // custom split\n    ? splitString.split(',').map((i) => parseInt(i, 10) / 100)\n    // even split fallback\n    : [...new Array(pages.length)].map(() => 1 / (pages.length + 1));\n\n  config.variantNames.push('control');\n  config.variants.control = {\n    percentageSplit: '',\n    pages: [window.location.pathname],\n    blocks: [],\n    label: 'Control',\n  };\n\n  pages.forEach((page, i) => {\n    const vname = `challenger-${i + 1}`;\n    config.variantNames.push(vname);\n    config.variants[vname] = {\n      percentageSplit: `${splits[i].toFixed(2)}`,\n      pages: [page],\n      blocks: [],\n      label: `Challenger ${i + 1}`,\n    };\n  });\n  inferEmptyPercentageSplits(Object.values(config.variants));\n  return (config);\n}\n\n/**\n * Gets experiment config from the manifest and transforms it to more easily\n * consumable structure.\n *\n * the manifest consists of two sheets \"settings\" and \"experiences\", by default\n *\n * \"settings\" is applicable to the entire test and contains information\n * like \"Audience\", \"Status\" or \"Blocks\".\n *\n * \"experience\" hosts the experiences in rows, consisting of:\n * a \"Percentage Split\", \"Label\" and a set of \"Links\".\n *\n *\n * @param {string} experimentId The experiment identifier\n * @param {object} pluginOptions The plugin options\n * @returns {object} containing the experiment manifest\n */\nasync function getConfigForFullExperiment(experimentId, pluginOptions, context) {\n  let path;\n  if (experimentId.includes(`/${pluginOptions.experimentsConfigFile}`)) {\n    path = new URL(experimentId, window.location.origin).href;\n    // eslint-disable-next-line no-param-reassign\n    [experimentId] = path.split('/').splice(-2, 1);\n  } else {\n    path = `${pluginOptions.experimentsRoot}/${experimentId}/${pluginOptions.experimentsConfigFile}`;\n  }\n  try {\n    const resp = await fetch(path);\n    if (!resp.ok) {\n      // eslint-disable-next-line no-console\n      console.log('error loading experiment config:', resp);\n      return null;\n    }\n    const json = await resp.json();\n    const config = pluginOptions.parser\n      ? pluginOptions.parser(json, context)\n      : parseExperimentConfig(json, context);\n    if (!config) {\n      return null;\n    }\n    config.id = experimentId;\n    config.manifest = path;\n    config.basePath = `${pluginOptions.experimentsRoot}/${experimentId}`;\n    inferEmptyPercentageSplits(Object.values(config.variants));\n    return config;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.log(`error loading experiment manifest: ${path}`, e);\n  }\n  return null;\n}\n\nfunction getDecisionPolicy(config) {\n  const decisionPolicy = {\n    id: 'content-experimentation-policy',\n    rootDecisionNodeId: 'n1',\n    decisionNodes: [{\n      id: 'n1',\n      type: 'EXPERIMENTATION',\n      experiment: {\n        id: config.id,\n        identityNamespace: 'ECID',\n        randomizationUnit: 'DEVICE',\n        treatments: Object.entries(config.variants).map(([key, props]) => ({\n          id: key,\n          allocationPercentage: Number(props.percentageSplit) * 100,\n        })),\n      },\n    }],\n  };\n  return decisionPolicy;\n}\n\nasync function getConfig(experiment, instantExperiment, pluginOptions, context) {\n  const usp = new URLSearchParams(window.location.search);\n  const [forcedExperiment, forcedVariant] = usp.has(pluginOptions.experimentsQueryParameter)\n    ? usp.get(pluginOptions.experimentsQueryParameter).split('/')\n    : [];\n\n  const experimentConfig = instantExperiment\n    ? await getConfigForInstantExperiment(experiment, instantExperiment, pluginOptions, context)\n    : await getConfigForFullExperiment(experiment, pluginOptions, context);\n\n  // eslint-disable-next-line no-console\n  console.debug(experimentConfig);\n  if (!experimentConfig) {\n    return null;\n  }\n\n  const forcedAudience = usp.has(pluginOptions.audiencesQueryParameter)\n    ? context.toClassName(usp.get(pluginOptions.audiencesQueryParameter))\n    : null;\n\n  experimentConfig.resolvedAudiences = await getResolvedAudiences(\n    experimentConfig.audiences.map(context.toClassName),\n    pluginOptions,\n    context,\n  );\n  experimentConfig.run = (\n    // experiment is active or forced\n    (context.toCamelCase(experimentConfig.status) === 'active' || forcedExperiment)\n    // experiment has resolved audiences if configured\n    && (!experimentConfig.resolvedAudiences || experimentConfig.resolvedAudiences.length)\n    // forced audience resolves if defined\n    && (!forcedAudience || experimentConfig.audiences.includes(forcedAudience))\n  );\n\n  window.hlx = window.hlx || {};\n  window.hlx.experiment = experimentConfig;\n\n  // eslint-disable-next-line no-console\n  console.debug('run', experimentConfig.run, experimentConfig.audiences);\n  if (forcedVariant && experimentConfig.variantNames.includes(forcedVariant)) {\n    experimentConfig.selectedVariant = forcedVariant;\n  } else {\n    // eslint-disable-next-line import/extensions\n    const { ued } = await import('./ued.js');\n    const decision = ued.evaluateDecisionPolicy(getDecisionPolicy(experimentConfig), {});\n    experimentConfig.selectedVariant = decision.items[0].id;\n  }\n  return experimentConfig;\n}\n\nexport async function runExperiment(document, options, context) {\n  if (isBot()) {\n    return false;\n  }\n\n  const pluginOptions = { ...DEFAULT_OPTIONS, ...(options || {}) };\n  const experiment = context.getMetadata(pluginOptions.experimentsMetaTag);\n  if (!experiment) {\n    return false;\n  }\n  const variants = context.getMetadata('instant-experiment')\n    || context.getMetadata(`${pluginOptions.experimentsMetaTag}-variants`);\n  let experimentConfig;\n  try {\n    experimentConfig = await getConfig(experiment, variants, pluginOptions, context);\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error('Invalid experiment config.', err);\n  }\n  if (!experimentConfig || !isValidExperimentationConfig(experimentConfig)) {\n    // eslint-disable-next-line no-console\n    console.warn('Invalid experiment config. Please review your metadata, sheet and parser.');\n    return false;\n  }\n\n  const usp = new URLSearchParams(window.location.search);\n  const forcedVariant = usp.has(pluginOptions.experimentsQueryParameter)\n    ? usp.get(pluginOptions.experimentsQueryParameter).split('/')[1]\n    : null;\n  if (!experimentConfig.run && !forcedVariant) {\n    // eslint-disable-next-line no-console\n    console.warn('Experiment will not run. It is either not active or its configured audiences are not resolved.');\n    return false;\n  }\n  // eslint-disable-next-line no-console\n  console.debug(`running experiment (${window.hlx.experiment.id}) -> ${window.hlx.experiment.selectedVariant}`);\n\n  if (experimentConfig.selectedVariant === experimentConfig.variantNames[0]) {\n    context.sampleRUM('experiment', {\n      source: experimentConfig.id,\n      target: experimentConfig.selectedVariant,\n    });\n    return false;\n  }\n\n  const { pages } = experimentConfig.variants[experimentConfig.selectedVariant];\n  if (!pages.length) {\n    return false;\n  }\n\n  const currentPath = window.location.pathname;\n  const control = experimentConfig.variants[experimentConfig.variantNames[0]];\n  const index = control.pages.indexOf(currentPath);\n  if (index < 0 || pages[index] === currentPath) {\n    return false;\n  }\n\n  // Fullpage content experiment\n  document.body.classList.add(`experiment-${context.toClassName(experimentConfig.id)}`);\n  const result = await replaceInner(pages[index], document.querySelector('main'));\n  experimentConfig.servedExperience = result || currentPath;\n  if (!result) {\n    // eslint-disable-next-line no-console\n    console.debug(`failed to serve variant ${window.hlx.experiment.selectedVariant}. Falling back to ${experimentConfig.variantNames[0]}.`);\n  }\n  document.body.classList.add(`variant-${context.toClassName(result ? experimentConfig.selectedVariant : experimentConfig.variantNames[0])}`);\n  context.sampleRUM('experiment', {\n    source: experimentConfig.id,\n    target: result ? experimentConfig.selectedVariant : experimentConfig.variantNames[0],\n  });\n  return result;\n}\n\nexport async function runCampaign(document, options, context) {\n  if (isBot()) {\n    return false;\n  }\n\n  const pluginOptions = { ...DEFAULT_OPTIONS, ...options };\n  const usp = new URLSearchParams(window.location.search);\n  const campaign = (usp.has(pluginOptions.campaignsQueryParameter)\n    ? context.toClassName(usp.get(pluginOptions.campaignsQueryParameter))\n    : null)\n    || (usp.has('utm_campaign') ? context.toClassName(usp.get('utm_campaign')) : null);\n  if (!campaign) {\n    return false;\n  }\n\n  let audiences = context.getMetadata(`${pluginOptions.campaignsMetaTagPrefix}-audience`);\n  if (audiences) {\n    audiences = audiences.split(',').map(context.toClassName);\n    const resolvedAudiences = await getResolvedAudiences(audiences, pluginOptions, context);\n    if (!!resolvedAudiences && !resolvedAudiences.length) {\n      return false;\n    }\n  }\n\n  const allowedCampaigns = context.getAllMetadata(pluginOptions.campaignsMetaTagPrefix);\n  if (!Object.keys(allowedCampaigns).includes(campaign)) {\n    return false;\n  }\n\n  const urlString = allowedCampaigns[campaign];\n  if (!urlString) {\n    return false;\n  }\n\n  window.hlx.campaign = { selectedCampaign: campaign };\n\n  try {\n    const url = new URL(urlString);\n    const result = replaceInner(url.pathname, document.querySelector('main'));\n    window.hlx.campaign.servedExperience = result || window.location.pathname;\n    if (!result) {\n      // eslint-disable-next-line no-console\n      console.debug(`failed to serve campaign ${campaign}. Falling back to default content.`);\n    }\n    document.body.classList.add(`campaign-${campaign}`);\n    context.sampleRUM('campaign', {\n      source: window.location.href,\n      target: result ? campaign : 'default',\n    });\n    return result;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n    return false;\n  }\n}\n\nexport async function serveAudience(document, options, context) {\n  if (isBot()) {\n    return false;\n  }\n\n  const pluginOptions = { ...DEFAULT_OPTIONS, ...(options || {}) };\n  const configuredAudiences = context.getAllMetadata(pluginOptions.audiencesMetaTagPrefix);\n  if (!Object.keys(configuredAudiences).length) {\n    return false;\n  }\n\n  const audiences = await getResolvedAudiences(\n    Object.keys(configuredAudiences).map(context.toClassName),\n    pluginOptions,\n    context,\n  );\n  if (!audiences || !audiences.length) {\n    return false;\n  }\n\n  const usp = new URLSearchParams(window.location.search);\n  const forcedAudience = usp.has(pluginOptions.audiencesQueryParameter)\n    ? context.toClassName(usp.get(pluginOptions.audiencesQueryParameter))\n    : null;\n\n  const selectedAudience = forcedAudience || audiences[0];\n  const urlString = configuredAudiences[selectedAudience];\n  if (!urlString) {\n    return false;\n  }\n\n  window.hlx.audience = { selectedAudience };\n\n  try {\n    const url = new URL(urlString);\n    const result = replaceInner(url.pathname, document.querySelector('main'));\n    window.hlx.audience.servedExperience = result || window.location.pathname;\n    if (!result) {\n      // eslint-disable-next-line no-console\n      console.debug(`failed to serve audience ${selectedAudience}. Falling back to default content.`);\n    }\n    document.body.classList.add(audiences.map((audience) => `audience-${audience}`));\n    context.sampleRUM('audiences', {\n      source: window.location.href,\n      target: result ? forcedAudience || audiences.join(',') : 'default',\n    });\n    return result;\n  } catch (err) {\n    // eslint-disable-next-line no-console\n    console.error(err);\n    return false;\n  }\n}\n\nwindow.hlx.patchBlockConfig?.push((config) => {\n  const { experiment } = window.hlx;\n\n  // No experiment is running\n  if (!experiment || !experiment.run) {\n    return config;\n  }\n\n  // The current experiment does not modify the block\n  if (experiment.selectedVariant === experiment.variantNames[0]\n    || !experiment.variants[experiment.variantNames[0]].blocks\n    || !experiment.variants[experiment.variantNames[0]].blocks.includes(config.blockName)) {\n    return config;\n  }\n\n  // The current experiment does not modify the block code\n  const variant = experiment.variants[experiment.selectedVariant];\n  if (!variant.blocks.length) {\n    return config;\n  }\n\n  let index = experiment.variants[experiment.variantNames[0]].blocks.indexOf('');\n  if (index < 0) {\n    index = experiment.variants[experiment.variantNames[0]].blocks.indexOf(config.blockName);\n  }\n  if (index < 0) {\n    index = experiment.variants[experiment.variantNames[0]].blocks.indexOf(`/blocks/${config.blockName}`);\n  }\n  if (index < 0) {\n    return config;\n  }\n\n  let origin = '';\n  let path;\n  if (/^https?:\\/\\//.test(variant.blocks[index])) {\n    const url = new URL(variant.blocks[index]);\n    // Experimenting from a different branch\n    if (url.origin !== window.location.origin) {\n      origin = url.origin;\n    }\n    // Experimenting from a block path\n    if (url.pathname !== '/') {\n      path = url.pathname;\n    } else {\n      path = `/blocks/${config.blockName}`;\n    }\n  } else { // Experimenting from a different branch on the same branch\n    path = `/blocks/${variant.blocks[index]}`;\n  }\n  if (!origin && !path) {\n    return config;\n  }\n\n  const { codeBasePath } = window.hlx;\n  return {\n    ...config,\n    cssPath: `${origin}${codeBasePath}${path}/${config.blockName}.css`,\n    jsPath: `${origin}${codeBasePath}${path}/${config.blockName}.js`,\n  };\n});\n\nlet isAdjusted = false;\nfunction adjustedRumSamplingRate(checkpoint, options, context) {\n  const pluginOptions = { ...DEFAULT_OPTIONS, ...(options || {}) };\n  return (data) => {\n    if (!window.hlx.rum.isSelected && !isAdjusted) {\n      isAdjusted = true;\n      // adjust sampling rate based on project config …\n      window.hlx.rum.weight = Math.min(\n        window.hlx.rum.weight,\n        // … but limit it to the 10% sampling at max to avoid losing anonymization\n        // and reduce burden on the backend\n        Math.max(pluginOptions.rumSamplingRate, MAX_SAMPLING_RATE),\n      );\n      window.hlx.rum.isSelected = (window.hlx.rum.random * window.hlx.rum.weight < 1);\n      if (window.hlx.rum.isSelected) {\n        context.sampleRUM(checkpoint, data);\n      }\n    }\n    return true;\n  };\n}\n\nexport async function loadEager(document, options, context) {\n  context.sampleRUM.always.on('audiences', adjustedRumSamplingRate('audiences', options, context));\n  context.sampleRUM.always.on('campaign', adjustedRumSamplingRate('campaign', options, context));\n  context.sampleRUM.always.on('experiment', adjustedRumSamplingRate('experiment', options, context));\n  let res = await runCampaign(document, options, context);\n  if (!res) {\n    res = await runExperiment(document, options, context);\n  }\n  if (!res) {\n    res = await serveAudience(document, options, context);\n  }\n}\n\nexport async function loadLazy(document, options, context) {\n  const pluginOptions = {\n    ...DEFAULT_OPTIONS,\n    ...(options || {}),\n  };\n  if (window.location.hostname.endsWith('hlx.page')\n    || window.location.hostname === ('localhost')\n    || (typeof options.isProd === 'function' && !options.isProd())\n    || (options.prodHost\n        && options.prodHost !== window.location.host\n        && options.prodHost !== window.location.hostname\n        && options.prodHost !== window.location.origin)) {\n    // eslint-disable-next-line import/no-cycle\n    const preview = await import('./preview.js');\n    preview.default(document, pluginOptions, { ...context, getResolvedAudiences });\n  }\n}\n"],"file":"plugins/experimentation/src/index.js"}