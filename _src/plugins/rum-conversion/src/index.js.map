{"version":3,"file":"index.js","sources":["../../../../src/plugins/rum-conversion/src/index.js"],"sourcesContent":["/*\n * Copyright 2023 Adobe. All rights reserved.\n * This file is licensed to you under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License. You may obtain a copy\n * of the License at http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under\n * the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\n * OF ANY KIND, either express or implied. See the License for the specific language\n * governing permissions and limitations under the License.\n */\nconst { sampleRUM } = window.hlx.rum;\n// SampleRUM always initialization should happen in lib-franklin\n// we need to initialize it here until the initialization is part of\n// the boilerplate.\nsampleRUM.always = sampleRUM.always || [];\nsampleRUM.always.on = (chkpnt, fn) => {\n  sampleRUM.always[chkpnt] = fn;\n};\n\n/**\n* Registers the 'convert' function to `sampleRUM` which sends\n* variant and convert events upon conversion.\n* The function will register a listener for an element if listenTo parameter is provided.\n* listenTo supports 'submit' and 'click'.\n* If listenTo is not provided, the information is used to track a conversion event.\n*/\nsampleRUM.drain('convert', (cevent, cvalueThunk, element, listenTo = []) => {\n  async function trackConversion(celement) {\n    const MAX_SESSION_LENGTH = 1000 * 60 * 60 * 24 * 30; // 30 days\n    try {\n      // get all stored experiments from local storage (unified-decisioning-experiments)\n      const experiments = JSON.parse(localStorage.getItem('unified-decisioning-experiments'));\n      if (experiments) {\n        Object.entries(experiments)\n          .map(([experiment, { treatment, date }]) => ({ experiment, treatment, date }))\n          .filter(({ date }) => Date.now() - new Date(date) < MAX_SESSION_LENGTH)\n          .forEach(({ experiment, treatment }) => {\n            // send conversion event for each experiment that has been seen by this visitor\n            sampleRUM('variant', { source: experiment, target: treatment });\n          });\n      }\n      // send conversion event\n      const cvalue = typeof cvalueThunk === 'function' ? await cvalueThunk(element) : cvalueThunk;\n\n      const data = { source: cevent, target: cvalue, element: celement };\n      sampleRUM('convert', data);\n      // Following if statement must be removed once always mechanism is present in the boilerplate\n      if (sampleRUM.always && sampleRUM.always.convert) {\n        sampleRUM.always.convert(data);\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.log('error reading experiments', e);\n    }\n  }\n\n  function registerConversionListener(elements) {\n    // if elements is an array or nodelist, register a conversion event for each element\n    if (Array.isArray(elements) || elements instanceof NodeList) {\n      elements.forEach((e) => registerConversionListener(e, listenTo, cevent, cvalueThunk));\n    } else {\n      listenTo.forEach((eventName) => element.addEventListener(\n        eventName,\n        (e) => trackConversion(e.target),\n      ));\n    }\n  }\n\n  if (element && listenTo.length) {\n    registerConversionListener(element, listenTo, cevent, cvalueThunk);\n  } else {\n    trackConversion(element, cevent, cvalueThunk);\n  }\n});\n\n/**\n * Returns the label used for tracking link clicks\n * @param {Element} element link element\n * @returns link label used for tracking converstion\n */\nfunction getLinkLabel(element) {\n  return element.title ? this.toClassName(element.title) : this.toClassName(element.textContent);\n}\n\nfunction getConversionNameMetadata(element) {\n  const text = element.title || element.textContent;\n  return this.getMetadata(`conversion-name--${text.toLowerCase().replace(/[^0-9a-z]/gi, '-')}-`);\n}\n\nfunction findConversionValue(parent, fieldName) {\n  // Try to find the element by Id or Name\n  const valueElement = document.getElementById(fieldName) || parent.querySelector(`[name='${fieldName}']`);\n  if (valueElement) {\n    return valueElement.value;\n  }\n  // Find the element by the inner text of the label\n  return Array.from(parent.getElementsByTagName('label'))\n    .filter((l) => l.innerText.trim().toLowerCase() === fieldName.toLowerCase())\n    .map((label) => document.getElementById(label.htmlFor))\n    .filter((field) => !!field)\n    .map((field) => field.value)\n    .pop();\n}\n\n/**\n * Registers conversion listeners according to the metadata configured in the document.\n * @param {Element} parent element where to find potential event conversion sources\n * @param {string} defaultFormConversionName In case of form conversions, default\n * name for the conversion in case there is no conversion name defined\n * in the document or section metadata. If the form is defined in a fragment\n * this is typically the path to the fragment.\n * The parameter is optional, if no value is passed, and conversion\n * name is not defined in the document or section metadata,\n * the id of the HTML form element will be used as conversion name\n */\n// eslint-disable-next-line import/prefer-default-export\nexport async function initConversionTracking(parent = document, defaultFormConversionName = '') {\n  const conversionElements = {\n    form: () => {\n      // Track all forms\n      parent.querySelectorAll('form').forEach((element) => {\n        const section = element.closest('div.section');\n        if (section.dataset.conversionValueField) {\n          const cvField = section.dataset.conversionValueField.trim();\n          // this will track the value of the element with the id specified in\n          // the \"Conversion Element\" field.\n          // ideally, this should not be an ID, but the case-insensitive name label of the element.\n          sampleRUM.convert(undefined, (cvParent) => findConversionValue(cvParent, cvField), element, ['submit']);\n        }\n        let formConversionName = section.dataset.conversionName || this.getMetadata('conversion-name');\n        if (!formConversionName) {\n          // if no conversion name is defined in the metadata,\n          // use the conversion name passed as parameter or the form or id\n          formConversionName = defaultFormConversionName\n            ? this.toClassName(defaultFormConversionName) : element.id;\n        }\n        sampleRUM.convert(formConversionName, undefined, element, ['submit']);\n      });\n    },\n    link: () => {\n      // track all links\n      Array.from(parent.querySelectorAll('a[href]'))\n        .map((element) => ({\n          element,\n          cevent: getConversionNameMetadata.call(this, element) || this.getMetadata('conversion-name') || getLinkLabel.call(this, element),\n        }))\n        .forEach(({ element, cevent }) => {\n          sampleRUM.convert(cevent, undefined, element, ['click']);\n        });\n    },\n    'labeled-link': () => {\n      // track only the links configured in the metadata\n      const linkLabels = this.getMetadata('conversion-link-labels') || '';\n      const trackedLabels = linkLabels.split(',')\n        .map((p) => p.trim())\n        .map(this.toClassName);\n\n      Array.from(parent.querySelectorAll('a[href]'))\n        .filter((element) => trackedLabels.includes(getLinkLabel.call(this, element)))\n        .map((element) => ({\n          element,\n          cevent: getConversionNameMetadata.call(this, element) || this.getMetadata('conversion-name') || getLinkLabel.call(this, element),\n        }))\n        .forEach(({ element, cevent }) => {\n          sampleRUM.convert(cevent, undefined, element, ['click']);\n        });\n    },\n  };\n\n  const declaredConversionElements = this.getMetadata('conversion-element') ? this.getMetadata('conversion-element').split(',').map((ce) => this.toClassName(ce.trim())) : [];\n\n  Object.keys(conversionElements)\n    .filter((ce) => declaredConversionElements.includes(ce))\n    .forEach((cefn) => conversionElements[cefn]());\n}\n"],"names":[],"mappings":"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"}