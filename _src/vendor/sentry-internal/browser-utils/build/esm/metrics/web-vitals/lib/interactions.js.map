{"version":3,"file":"interactions.js","sources":["../../../../../../../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/lib/interactions.js"],"sourcesContent":["import { getInteractionCount } from './polyfills/interactionCountPolyfill.js';\n\n/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n// A list of longest interactions on the page (by latency) sorted so the\n// longest one is first. The list is at most MAX_INTERACTIONS_TO_CONSIDER long.\nconst longestInteractionList = [];\n\n// A mapping of longest interactions by their interaction ID.\n// This is used for faster lookup.\nconst longestInteractionMap = new Map();\n\n// The default `durationThreshold` used across this library for observing\n// `event` entries via PerformanceObserver.\nconst DEFAULT_DURATION_THRESHOLD = 40;\n\n// Used to store the interaction count after a bfcache restore, since p98\n// interaction latencies should only consider the current navigation.\nlet prevInteractionCount = 0;\n\n/**\n * Returns the interaction count since the last bfcache restore (or for the\n * full page lifecycle if there were no bfcache restores).\n */\nconst getInteractionCountForNavigation = () => {\n  return getInteractionCount() - prevInteractionCount;\n};\n\n/**\n * Returns the estimated p98 longest interaction based on the stored\n * interaction candidates and the interaction count for the current page.\n */\nconst estimateP98LongestInteraction = () => {\n  const candidateInteractionIndex = Math.min(\n    longestInteractionList.length - 1,\n    Math.floor(getInteractionCountForNavigation() / 50),\n  );\n\n  return longestInteractionList[candidateInteractionIndex];\n};\n\n// To prevent unnecessary memory usage on pages with lots of interactions,\n// store at most 10 of the longest interactions to consider as INP candidates.\nconst MAX_INTERACTIONS_TO_CONSIDER = 10;\n\n/**\n * A list of callback functions to run before each entry is processed.\n * Exposing this list allows the attribution build to hook into the\n * entry processing pipeline.\n */\nconst entryPreProcessingCallbacks = [];\n\n/**\n * Takes a performance entry and adds it to the list of worst interactions\n * if its duration is long enough to make it among the worst. If the\n * entry is part of an existing interaction, it is merged and the latency\n * and entries list is updated as needed.\n */\nconst processInteractionEntry = (entry) => {\n  entryPreProcessingCallbacks.forEach(cb => cb(entry));\n\n  // Skip further processing for entries that cannot be INP candidates.\n  if (!(entry.interactionId || entry.entryType === 'first-input')) return;\n\n  // The least-long of the 10 longest interactions.\n  const minLongestInteraction = longestInteractionList[longestInteractionList.length - 1];\n\n  const existingInteraction = longestInteractionMap.get(entry.interactionId);\n\n  // Only process the entry if it's possibly one of the ten longest,\n  // or if it's part of an existing interaction.\n  if (\n    existingInteraction ||\n    longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER ||\n    (minLongestInteraction && entry.duration > minLongestInteraction.latency)\n  ) {\n    // If the interaction already exists, update it. Otherwise create one.\n    if (existingInteraction) {\n      // If the new entry has a longer duration, replace the old entries,\n      // otherwise add to the array.\n      if (entry.duration > existingInteraction.latency) {\n        existingInteraction.entries = [entry];\n        existingInteraction.latency = entry.duration;\n      } else if (\n        entry.duration === existingInteraction.latency &&\n        entry.startTime === existingInteraction.entries[0]?.startTime\n      ) {\n        existingInteraction.entries.push(entry);\n      }\n    } else {\n      const interaction = {\n        id: entry.interactionId,\n        latency: entry.duration,\n        entries: [entry],\n      };\n      longestInteractionMap.set(interaction.id, interaction);\n      longestInteractionList.push(interaction);\n    }\n\n    // Sort the entries by latency (descending) and keep only the top ten.\n    longestInteractionList.sort((a, b) => b.latency - a.latency);\n    if (longestInteractionList.length > MAX_INTERACTIONS_TO_CONSIDER) {\n      longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER).forEach(i => longestInteractionMap.delete(i.id));\n    }\n  }\n};\n\nexport { DEFAULT_DURATION_THRESHOLD, entryPreProcessingCallbacks, estimateP98LongestInteraction, longestInteractionList, longestInteractionMap, processInteractionEntry };\n//# sourceMappingURL=interactions.js.map\n"],"names":["longestInteractionList","longestInteractionMap","DEFAULT_DURATION_THRESHOLD","prevInteractionCount","getInteractionCountForNavigation","getInteractionCount","estimateP98LongestInteraction","candidateInteractionIndex","MAX_INTERACTIONS_TO_CONSIDER","entryPreProcessingCallbacks","processInteractionEntry","entry","cb","minLongestInteraction","existingInteraction","interaction","a","b","i"],"mappings":"8EAqBK,MAACA,EAAyB,CAAA,EAIzBC,EAAwB,IAAI,IAI5BC,EAA6B,GAInC,IAAIC,EAAuB,EAM3B,MAAMC,EAAmC,IAChCC,EAAqB,EAAGF,EAO3BG,EAAgC,IAAM,CAC1C,MAAMC,EAA4B,KAAK,IACrCP,EAAuB,OAAS,EAChC,KAAK,MAAMI,EAAkC,EAAG,EAAE,CACnD,EAED,OAAOJ,EAAuBO,CAAyB,CACzD,EAIMC,EAA+B,GAO/BC,EAA8B,CAAA,EAQ9BC,EAA2BC,GAAU,CAIzC,GAHAF,EAA4B,QAAQG,GAAMA,EAAGD,CAAK,CAAC,EAG/C,EAAEA,EAAM,eAAiBA,EAAM,YAAc,eAAgB,OAGjE,MAAME,EAAwBb,EAAuBA,EAAuB,OAAS,CAAC,EAEhFc,EAAsBb,EAAsB,IAAIU,EAAM,aAAa,EAIzE,GACEG,GACAd,EAAuB,OAASQ,GAC/BK,GAAyBF,EAAM,SAAWE,EAAsB,QACjE,CAEA,GAAIC,EAGEH,EAAM,SAAWG,EAAoB,SACvCA,EAAoB,QAAU,CAACH,CAAK,EACpCG,EAAoB,QAAUH,EAAM,UAEpCA,EAAM,WAAaG,EAAoB,SACvCH,EAAM,YAAcG,EAAoB,QAAQ,CAAC,GAAG,WAEpDA,EAAoB,QAAQ,KAAKH,CAAK,MAEnC,CACL,MAAMI,EAAc,CAClB,GAAIJ,EAAM,cACV,QAASA,EAAM,SACf,QAAS,CAACA,CAAK,CAChB,EACDV,EAAsB,IAAIc,EAAY,GAAIA,CAAW,EACrDf,EAAuB,KAAKe,CAAW,CAC7C,CAGIf,EAAuB,KAAK,CAACgB,EAAGC,IAAMA,EAAE,QAAUD,EAAE,OAAO,EACvDhB,EAAuB,OAASQ,GAClCR,EAAuB,OAAOQ,CAA4B,EAAE,QAAQU,GAAKjB,EAAsB,OAAOiB,EAAE,EAAE,CAAC,CAEjH,CACA","x_google_ignoreList":[0]}