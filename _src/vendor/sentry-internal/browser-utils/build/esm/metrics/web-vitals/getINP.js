import{WINDOW as c}from"../../types.js";import{bindReporter as a}from"./lib/bindReporter.js";import{initMetric as f}from"./lib/initMetric.js";import{DEFAULT_DURATION_THRESHOLD as l,processInteractionEntry as p,estimateP98LongestInteraction as d}from"./lib/interactions.js";import{observe as h}from"./lib/observe.js";import{onHidden as u}from"./lib/onHidden.js";import{initInteractionCountPolyfill as I}from"./lib/polyfills/interactionCountPolyfill.js";import{whenActivated as T}from"./lib/whenActivated.js";import{whenIdle as v}from"./lib/whenIdle.js";const E=[200,500],L=(m,t={})=>{"PerformanceEventTiming"in c&&"interactionId"in PerformanceEventTiming.prototype&&T(()=>{I();const r=f("INP");let o;const i=s=>{v(()=>{s.forEach(p);const e=d();e&&e.latency!==r.value&&(r.value=e.latency,r.entries=e.entries,o())})},n=h("event",i,{durationThreshold:t.durationThreshold!=null?t.durationThreshold:l});o=a(m,r,E,t.reportAllChanges),n&&(n.observe({type:"first-input",buffered:!0}),u(()=>{i(n.takeRecords()),o(!0)}))})};export{E as INPThresholds,L as onINP};
//# sourceMappingURL=getINP.js.map
