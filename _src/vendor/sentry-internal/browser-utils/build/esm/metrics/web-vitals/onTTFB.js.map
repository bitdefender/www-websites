{"version":3,"file":"onTTFB.js","sources":["../../../../../../../../node_modules/@sentry-internal/browser-utils/build/esm/metrics/web-vitals/onTTFB.js"],"sourcesContent":["import { WINDOW } from '../../types.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { getActivationStart } from './lib/getActivationStart.js';\nimport { getNavigationEntry } from './lib/getNavigationEntry.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { whenActivated } from './lib/whenActivated.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n\n/** Thresholds for TTFB. See https://web.dev/articles/ttfb#what_is_a_good_ttfb_score */\nconst TTFBThresholds = [800, 1800];\n\n/**\n * Runs in the next task after the page is done loading and/or prerendering.\n * @param callback\n */\nconst whenReady = (callback) => {\n  if (WINDOW.document?.prerendering) {\n    whenActivated(() => whenReady(callback));\n  } else if (WINDOW.document?.readyState !== 'complete') {\n    addEventListener('load', () => whenReady(callback), true);\n  } else {\n    // Queue a task so the callback runs after `loadEventEnd`.\n    setTimeout(callback, 0);\n  }\n};\n\n/**\n * Calculates the [TTFB](https://web.dev/articles/ttfb) value for the\n * current page and calls the `callback` function once the page has loaded,\n * along with the relevant `navigation` performance entry used to determine the\n * value. The reported value is a `DOMHighResTimeStamp`.\n *\n * Note, this function waits until after the page is loaded to call `callback`\n * in order to ensure all properties of the `navigation` entry are populated.\n * This is useful if you want to report on other metrics exposed by the\n * [Navigation Timing API](https://w3c.github.io/navigation-timing/). For\n * example, the TTFB metric starts from the page's [time\n * origin](https://www.w3.org/TR/hr-time-2/#sec-time-origin), which means it\n * includes time spent on DNS lookup, connection negotiation, network latency,\n * and server processing time.\n */\nconst onTTFB = (onReport, opts = {}) => {\n  const metric = initMetric('TTFB');\n  const report = bindReporter(onReport, metric, TTFBThresholds, opts.reportAllChanges);\n\n  whenReady(() => {\n    const navigationEntry = getNavigationEntry();\n\n    if (navigationEntry) {\n      // The activationStart reference is used because TTFB should be\n      // relative to page activation rather than navigation start if the\n      // page was prerendered. But in cases where `activationStart` occurs\n      // after the first byte is received, this time should be clamped at 0.\n      metric.value = Math.max(navigationEntry.responseStart - getActivationStart(), 0);\n\n      metric.entries = [navigationEntry];\n      report(true);\n    }\n  });\n};\n\nexport { TTFBThresholds, onTTFB };\n//# sourceMappingURL=onTTFB.js.map\n"],"names":["TTFBThresholds","whenReady","callback","WINDOW","whenActivated","onTTFB","onReport","opts","metric","initMetric","report","bindReporter","navigationEntry","getNavigationEntry","getActivationStart"],"mappings":"uUAyBK,MAACA,EAAiB,CAAC,IAAK,IAAI,EAM3BC,EAAaC,GAAa,CAC1BC,EAAO,UAAU,aACnBC,EAAc,IAAMH,EAAUC,CAAQ,CAAC,EAC9BC,EAAO,UAAU,aAAe,WACzC,iBAAiB,OAAQ,IAAMF,EAAUC,CAAQ,EAAG,EAAI,EAGxD,WAAWA,EAAU,CAAC,CAE1B,EAiBMG,EAAS,CAACC,EAAUC,EAAO,KAAO,CACtC,MAAMC,EAASC,EAAW,MAAM,EAC1BC,EAASC,EAAaL,EAAUE,EAAQR,EAAgBO,EAAK,gBAAgB,EAEnFN,EAAU,IAAM,CACd,MAAMW,EAAkBC,EAAoB,EAExCD,IAKFJ,EAAO,MAAQ,KAAK,IAAII,EAAgB,cAAgBE,EAAoB,EAAE,CAAC,EAE/EN,EAAO,QAAU,CAACI,CAAe,EACjCF,EAAO,EAAI,EAEjB,CAAG,CACH","x_google_ignoreList":[0]}