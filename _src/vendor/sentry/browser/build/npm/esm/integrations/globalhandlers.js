import{DEBUG_BUILD as I}from"../debug-build.js";import{eventFromUnknownInput as u}from"../eventbuilder.js";import{shouldIgnoreOnError as f}from"../helpers.js";import{defineIntegration as _}from"../../../../../core/build/esm/integration.js";import{addGlobalErrorInstrumentationHandler as j}from"../../../../../core/build/esm/utils-hoist/instrument/globalError.js";import{logger as k}from"../../../../../core/build/esm/utils-hoist/logger.js";import{addGlobalUnhandledRejectionInstrumentationHandler as H}from"../../../../../core/build/esm/utils-hoist/instrument/globalUnhandledRejection.js";import{getClient as d}from"../../../../../core/build/esm/currentScopes.js";import{captureEvent as p}from"../../../../../core/build/esm/exports.js";import{isPrimitive as h,isString as b}from"../../../../../core/build/esm/utils-hoist/is.js";import{getLocationHref as N}from"../../../../../core/build/esm/utils-hoist/browser.js";import{UNKNOWN_FUNCTION as O}from"../../../../../core/build/esm/utils-hoist/stacktrace.js";const U="GlobalHandlers",G=(n={})=>{const e={onerror:!0,onunhandledrejection:!0,...n};return{name:U,setupOnce(){Error.stackTraceLimit=50},setup(o){e.onerror&&(x(o),m("onerror")),e.onunhandledrejection&&(R(o),m("onunhandledrejection"))}}},q=_(G);function x(n){j(e=>{const{stackParser:o,attachStacktrace:a}=g();if(d()!==n||f())return;const{msg:t,url:r,line:c,column:l,error:i}=e,s=y(u(o,i||t,void 0,a,!1),r,c,l);s.level="error",p(s,{originalException:i,mechanism:{handled:!1,type:"onerror"}})})}function R(n){H(e=>{const{stackParser:o,attachStacktrace:a}=g();if(d()!==n||f())return;const t=P(e),r=h(t)?S(t):u(o,t,void 0,a,!0);r.level="error",p(r,{originalException:t,mechanism:{handled:!1,type:"onunhandledrejection"}})})}function P(n){if(h(n))return n;try{if("reason"in n)return n.reason;if("detail"in n&&"reason"in n.detail)return n.detail.reason}catch{}return n}function S(n){return{exception:{values:[{type:"UnhandledRejection",value:`Non-Error promise rejection captured with value: ${String(n)}`}]}}}function y(n,e,o,a){const t=n.exception=n.exception||{},r=t.values=t.values||[],c=r[0]=r[0]||{},l=c.stacktrace=c.stacktrace||{},i=l.frames=l.frames||[],s=a,v=o,E=b(e)&&e.length>0?e:N();return i.length===0&&i.push({colno:s,filename:E,function:O,in_app:!0,lineno:v}),n}function m(n){I&&k.log(`Global Handler attached: ${n}`)}function g(){return d()?.getOptions()||{stackParser:()=>[],attachStacktrace:!1}}export{q as globalHandlersIntegration};
//# sourceMappingURL=globalhandlers.js.map
