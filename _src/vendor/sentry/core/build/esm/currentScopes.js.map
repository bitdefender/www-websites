{"version":3,"file":"currentScopes.js","sources":["../../../../../../node_modules/@sentry/core/build/esm/currentScopes.js"],"sourcesContent":["import { getAsyncContextStrategy } from './asyncContext/index.js';\nimport { getMainCarrier, getGlobalSingleton } from './carrier.js';\nimport { Scope } from './scope.js';\nimport { generateSpanId } from './utils-hoist/propagationContext.js';\n\n/**\n * Get the currently active scope.\n */\nfunction getCurrentScope() {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getCurrentScope();\n}\n\n/**\n * Get the currently active isolation scope.\n * The isolation scope is active for the current execution context.\n */\nfunction getIsolationScope() {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n  return acs.getIsolationScope();\n}\n\n/**\n * Get the global scope.\n * This scope is applied to _all_ events.\n */\nfunction getGlobalScope() {\n  return getGlobalSingleton('globalScope', () => new Scope());\n}\n\n/**\n * Creates a new scope with and executes the given operation within.\n * The scope is automatically removed once the operation\n * finishes or throws.\n */\n\n/**\n * Either creates a new active scope, or sets the given scope as active scope in the given callback.\n */\nfunction withScope(\n  ...rest\n) {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [scope, callback] = rest;\n\n    if (!scope) {\n      return acs.withScope(callback);\n    }\n\n    return acs.withSetScope(scope, callback);\n  }\n\n  return acs.withScope(rest[0]);\n}\n\n/**\n * Attempts to fork the current isolation scope and the current scope based on the current async context strategy. If no\n * async context strategy is set, the isolation scope and the current scope will not be forked (this is currently the\n * case, for example, in the browser).\n *\n * Usage of this function in environments without async context strategy is discouraged and may lead to unexpected behaviour.\n *\n * This function is intended for Sentry SDK and SDK integration development. It is not recommended to be used in \"normal\"\n * applications directly because it comes with pitfalls. Use at your own risk!\n */\n\n/**\n * Either creates a new active isolation scope, or sets the given isolation scope as active scope in the given callback.\n */\nfunction withIsolationScope(\n  ...rest\n\n) {\n  const carrier = getMainCarrier();\n  const acs = getAsyncContextStrategy(carrier);\n\n  // If a scope is defined, we want to make this the active scope instead of the default one\n  if (rest.length === 2) {\n    const [isolationScope, callback] = rest;\n\n    if (!isolationScope) {\n      return acs.withIsolationScope(callback);\n    }\n\n    return acs.withSetIsolationScope(isolationScope, callback);\n  }\n\n  return acs.withIsolationScope(rest[0]);\n}\n\n/**\n * Get the currently active client.\n */\nfunction getClient() {\n  return getCurrentScope().getClient();\n}\n\n/**\n * Get a trace context for the given scope.\n */\nfunction getTraceContextFromScope(scope) {\n  const propagationContext = scope.getPropagationContext();\n\n  const { traceId, parentSpanId, propagationSpanId } = propagationContext;\n\n  const traceContext = {\n    trace_id: traceId,\n    span_id: propagationSpanId || generateSpanId(),\n  };\n\n  if (parentSpanId) {\n    traceContext.parent_span_id = parentSpanId;\n  }\n\n  return traceContext;\n}\n\nexport { getClient, getCurrentScope, getGlobalScope, getIsolationScope, getTraceContextFromScope, withIsolationScope, withScope };\n//# sourceMappingURL=currentScopes.js.map\n"],"names":["getCurrentScope","carrier","getMainCarrier","getAsyncContextStrategy","getIsolationScope","getGlobalScope","getGlobalSingleton","Scope","withScope","rest","acs","scope","callback","getClient","getTraceContextFromScope","propagationContext","traceId","parentSpanId","propagationSpanId","traceContext","generateSpanId"],"mappings":"gPAQA,SAASA,GAAkB,CACzB,MAAMC,EAAUC,EAAgB,EAEhC,OADYC,EAAwBF,CAAO,EAChC,gBAAiB,CAC9B,CAMA,SAASG,GAAoB,CAC3B,MAAMH,EAAUC,EAAgB,EAEhC,OADYC,EAAwBF,CAAO,EAChC,kBAAmB,CAChC,CAMA,SAASI,GAAiB,CACxB,OAAOC,EAAmB,cAAe,IAAM,IAAIC,CAAO,CAC5D,CAWA,SAASC,KACJC,EACH,CACA,MAAMR,EAAUC,EAAgB,EAC1BQ,EAAMP,EAAwBF,CAAO,EAG3C,GAAIQ,EAAK,SAAW,EAAG,CACrB,KAAM,CAACE,EAAOC,CAAQ,EAAIH,EAE1B,OAAKE,EAIED,EAAI,aAAaC,EAAOC,CAAQ,EAH9BF,EAAI,UAAUE,CAAQ,CAInC,CAEE,OAAOF,EAAI,UAAUD,EAAK,CAAC,CAAC,CAC9B,CAwCA,SAASI,GAAY,CACnB,OAAOb,EAAiB,EAAC,UAAW,CACtC,CAKA,SAASc,EAAyBH,EAAO,CACvC,MAAMI,EAAqBJ,EAAM,sBAAuB,EAElD,CAAE,QAAAK,EAAS,aAAAC,EAAc,kBAAAC,CAAmB,EAAGH,EAE/CI,EAAe,CACnB,SAAUH,EACV,QAASE,GAAqBE,EAAgB,CAC/C,EAED,OAAIH,IACFE,EAAa,eAAiBF,GAGzBE,CACT","x_google_ignoreList":[0]}